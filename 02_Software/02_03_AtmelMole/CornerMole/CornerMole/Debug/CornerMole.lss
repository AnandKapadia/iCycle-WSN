
CornerMole.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000027b2  00002846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000880  0080020c  0080020c  00002852  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  00002852  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a8  00000000  00000000  000028f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008711  00000000  00000000  00002e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035c5  00000000  00000000  0000b5ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007a79  00000000  00000000  0000eb72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001228  00000000  00000000  000165ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001c9d1  00000000  00000000  00017814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000048ed  00000000  00000000  000341e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  00038ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008d4f  00000000  00000000  000390d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
       2:	00 00       	nop
       4:	ab c0       	rjmp	.+342    	; 0x15c <__bad_interrupt>
       6:	00 00       	nop
       8:	a9 c0       	rjmp	.+338    	; 0x15c <__bad_interrupt>
       a:	00 00       	nop
       c:	a7 c0       	rjmp	.+334    	; 0x15c <__bad_interrupt>
       e:	00 00       	nop
      10:	a5 c0       	rjmp	.+330    	; 0x15c <__bad_interrupt>
      12:	00 00       	nop
      14:	a3 c0       	rjmp	.+326    	; 0x15c <__bad_interrupt>
      16:	00 00       	nop
      18:	a1 c0       	rjmp	.+322    	; 0x15c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9f c0       	rjmp	.+318    	; 0x15c <__bad_interrupt>
      1e:	00 00       	nop
      20:	9d c0       	rjmp	.+314    	; 0x15c <__bad_interrupt>
      22:	00 00       	nop
      24:	9b c0       	rjmp	.+310    	; 0x15c <__bad_interrupt>
      26:	00 00       	nop
      28:	99 c0       	rjmp	.+306    	; 0x15c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	97 c0       	rjmp	.+302    	; 0x15c <__bad_interrupt>
      2e:	00 00       	nop
      30:	95 c0       	rjmp	.+298    	; 0x15c <__bad_interrupt>
      32:	00 00       	nop
      34:	93 c0       	rjmp	.+294    	; 0x15c <__bad_interrupt>
      36:	00 00       	nop
      38:	91 c0       	rjmp	.+290    	; 0x15c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8f c0       	rjmp	.+286    	; 0x15c <__bad_interrupt>
      3e:	00 00       	nop
      40:	8d c0       	rjmp	.+282    	; 0x15c <__bad_interrupt>
      42:	00 00       	nop
      44:	c9 c4       	rjmp	.+2450   	; 0x9d8 <__vector_17>
      46:	00 00       	nop
      48:	f4 c4       	rjmp	.+2536   	; 0xa32 <__vector_18>
      4a:	00 00       	nop
      4c:	1f c5       	rjmp	.+2622   	; 0xa8c <__vector_19>
      4e:	00 00       	nop
      50:	96 c4       	rjmp	.+2348   	; 0x97e <__vector_20>
      52:	00 00       	nop
      54:	83 c0       	rjmp	.+262    	; 0x15c <__bad_interrupt>
      56:	00 00       	nop
      58:	81 c0       	rjmp	.+258    	; 0x15c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7f c0       	rjmp	.+254    	; 0x15c <__bad_interrupt>
      5e:	00 00       	nop
      60:	7d c0       	rjmp	.+250    	; 0x15c <__bad_interrupt>
      62:	00 00       	nop
      64:	7b c0       	rjmp	.+246    	; 0x15c <__bad_interrupt>
      66:	00 00       	nop
      68:	79 c0       	rjmp	.+242    	; 0x15c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	77 c0       	rjmp	.+238    	; 0x15c <__bad_interrupt>
      6e:	00 00       	nop
      70:	75 c0       	rjmp	.+234    	; 0x15c <__bad_interrupt>
      72:	00 00       	nop
      74:	73 c0       	rjmp	.+230    	; 0x15c <__bad_interrupt>
      76:	00 00       	nop
      78:	71 c0       	rjmp	.+226    	; 0x15c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6f c0       	rjmp	.+222    	; 0x15c <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c5       	rjmp	.+2750   	; 0xb40 <__vector_32>
      82:	00 00       	nop
      84:	8a c5       	rjmp	.+2836   	; 0xb9a <__vector_33>
      86:	00 00       	nop
      88:	b5 c5       	rjmp	.+2922   	; 0xbf4 <__vector_34>
      8a:	00 00       	nop
      8c:	2c c5       	rjmp	.+2648   	; 0xae6 <__vector_35>
      8e:	00 00       	nop
      90:	65 c0       	rjmp	.+202    	; 0x15c <__bad_interrupt>
      92:	00 00       	nop
      94:	63 c0       	rjmp	.+198    	; 0x15c <__bad_interrupt>
      96:	00 00       	nop
      98:	61 c0       	rjmp	.+194    	; 0x15c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5f c0       	rjmp	.+190    	; 0x15c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	5d c0       	rjmp	.+186    	; 0x15c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5b c0       	rjmp	.+182    	; 0x15c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ff c5       	rjmp	.+3070   	; 0xca8 <__vector_42>
      aa:	00 00       	nop
      ac:	2a c6       	rjmp	.+3156   	; 0xd02 <__vector_43>
      ae:	00 00       	nop
      b0:	55 c6       	rjmp	.+3242   	; 0xd5c <__vector_44>
      b2:	00 00       	nop
      b4:	cc c5       	rjmp	.+2968   	; 0xc4e <__vector_45>
      b6:	00 00       	nop
      b8:	51 c0       	rjmp	.+162    	; 0x15c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a9 c6       	rjmp	.+3410   	; 0xe10 <__vector_47>
      be:	00 00       	nop
      c0:	d4 c6       	rjmp	.+3496   	; 0xe6a <__vector_48>
      c2:	00 00       	nop
      c4:	ff c6       	rjmp	.+3582   	; 0xec4 <__vector_49>
      c6:	00 00       	nop
      c8:	76 c6       	rjmp	.+3308   	; 0xdb6 <__vector_50>
      ca:	00 00       	nop
      cc:	47 c0       	rjmp	.+142    	; 0x15c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	45 c0       	rjmp	.+138    	; 0x15c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	43 c0       	rjmp	.+134    	; 0x15c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	41 c0       	rjmp	.+130    	; 0x15c <__bad_interrupt>
      da:	00 00       	nop
      dc:	3f c0       	rjmp	.+126    	; 0x15c <__bad_interrupt>
      de:	00 00       	nop
      e0:	3d c0       	rjmp	.+122    	; 0x15c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3b c0       	rjmp	.+118    	; 0x15c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	39 c0       	rjmp	.+114    	; 0x15c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	37 c0       	rjmp	.+110    	; 0x15c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	35 c0       	rjmp	.+106    	; 0x15c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	33 c0       	rjmp	.+102    	; 0x15c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	31 c0       	rjmp	.+98     	; 0x15c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	2f c0       	rjmp	.+94     	; 0x15c <__bad_interrupt>
      fe:	00 00       	nop
     100:	2d c0       	rjmp	.+90     	; 0x15c <__bad_interrupt>
     102:	00 00       	nop
     104:	2b c0       	rjmp	.+86     	; 0x15c <__bad_interrupt>
     106:	00 00       	nop
     108:	29 c0       	rjmp	.+82     	; 0x15c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	27 c0       	rjmp	.+78     	; 0x15c <__bad_interrupt>
     10e:	00 00       	nop
     110:	25 c0       	rjmp	.+74     	; 0x15c <__bad_interrupt>
     112:	00 00       	nop
     114:	23 c0       	rjmp	.+70     	; 0x15c <__bad_interrupt>
     116:	00 00       	nop
     118:	21 c0       	rjmp	.+66     	; 0x15c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	1f c0       	rjmp	.+62     	; 0x15c <__bad_interrupt>
	...

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d1 e4       	ldi	r29, 0x41	; 65
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	12 e0       	ldi	r17, 0x02	; 2
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b2 e0       	ldi	r27, 0x02	; 2
     132:	e2 eb       	ldi	r30, 0xB2	; 178
     134:	f7 e2       	ldi	r31, 0x27	; 39
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0b bf       	out	0x3b, r16	; 59
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x14>
     13c:	07 90       	elpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	ac 30       	cpi	r26, 0x0C	; 12
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x10>

00000146 <__do_clear_bss>:
     146:	2a e0       	ldi	r18, 0x0A	; 10
     148:	ac e0       	ldi	r26, 0x0C	; 12
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	ac 38       	cpi	r26, 0x8C	; 140
     152:	b2 07       	cpc	r27, r18
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	03 d1       	rcall	.+518    	; 0x35e <main>
     158:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <_exit>

0000015c <__bad_interrupt>:
     15c:	51 cf       	rjmp	.-350    	; 0x0 <__vectors>

0000015e <common_tc_read_count>:
     15e:	f8 d7       	rcall	.+4080   	; 0x1150 <tmr_read_count>
     160:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <timer_mul_var>
     164:	22 23       	and	r18, r18
     166:	c9 f0       	breq	.+50     	; 0x19a <common_tc_read_count+0x3c>
     168:	e0 91 8b 0a 	lds	r30, 0x0A8B	; 0x800a8b <timer_multiplier>
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <timer_mul_var>
     172:	6e 2f       	mov	r22, r30
     174:	74 2f       	mov	r23, r20
     176:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__udivmodhi4>
     17a:	9b 01       	movw	r18, r22
     17c:	8f ef       	ldi	r24, 0xFF	; 255
     17e:	9f ef       	ldi	r25, 0xFF	; 255
     180:	6e 2f       	mov	r22, r30
     182:	74 2f       	mov	r23, r20
     184:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__udivmodhi4>
     188:	f6 9f       	mul	r31, r22
     18a:	c0 01       	movw	r24, r0
     18c:	f7 9f       	mul	r31, r23
     18e:	90 0d       	add	r25, r0
     190:	11 24       	eor	r1, r1
     192:	b9 01       	movw	r22, r18
     194:	68 0f       	add	r22, r24
     196:	79 1f       	adc	r23, r25
     198:	05 c0       	rjmp	.+10     	; 0x1a4 <common_tc_read_count+0x46>
     19a:	60 91 8b 0a 	lds	r22, 0x0A8B	; 0x800a8b <timer_multiplier>
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__udivmodhi4>
     1a4:	86 2f       	mov	r24, r22
     1a6:	97 2f       	mov	r25, r23
     1a8:	08 95       	ret

000001aa <common_tc_compare_stop>:
     1aa:	d7 d7       	rcall	.+4014   	; 0x115a <tmr_disable_cc_interrupt>
     1ac:	fa d7       	rcall	.+4084   	; 0x11a2 <save_cpu_interrupt>
     1ae:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
     1b2:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__data_end+0x1>
     1b6:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__data_end+0x2>
     1ba:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <__data_end+0x3>
     1be:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <compare_value+0x1>
     1c2:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <compare_value>
     1c6:	fa c7       	rjmp	.+4084   	; 0x11bc <restore_cpu_interrupt>
     1c8:	08 95       	ret

000001ca <common_tc_overflow_stop>:
     1ca:	d5 d7       	rcall	.+4010   	; 0x1176 <tmr_disable_ovf_interrupt>
     1cc:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <timer_mul_var>
     1d0:	08 95       	ret

000001d2 <common_tc_stop>:
     1d2:	eb df       	rcall	.-42     	; 0x1aa <common_tc_compare_stop>
     1d4:	fa df       	rcall	.-12     	; 0x1ca <common_tc_overflow_stop>
     1d6:	d6 c7       	rjmp	.+4012   	; 0x1184 <tmr_stop>
     1d8:	08 95       	ret

000001da <common_tc_delay>:
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	8c 01       	movw	r16, r24
     1e0:	b7 d7       	rcall	.+3950   	; 0x1150 <tmr_read_count>
     1e2:	ac 01       	movw	r20, r24
     1e4:	a0 91 8b 0a 	lds	r26, 0x0A8B	; 0x800a8b <timer_multiplier>
     1e8:	98 01       	movw	r18, r16
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	0e 94 8f 12 	call	0x251e	; 0x251e <__umulhisi3>
     1f0:	8b 01       	movw	r16, r22
     1f2:	9c 01       	movw	r18, r24
     1f4:	04 0f       	add	r16, r20
     1f6:	15 1f       	adc	r17, r21
     1f8:	21 1d       	adc	r18, r1
     1fa:	31 1d       	adc	r19, r1
     1fc:	00 93 0c 02 	sts	0x020C, r16	; 0x80020c <__data_end>
     200:	10 93 0d 02 	sts	0x020D, r17	; 0x80020d <__data_end+0x1>
     204:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <__data_end+0x2>
     208:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <__data_end+0x3>
     20c:	00 91 0c 02 	lds	r16, 0x020C	; 0x80020c <__data_end>
     210:	10 91 0d 02 	lds	r17, 0x020D	; 0x80020d <__data_end+0x1>
     214:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <__data_end+0x2>
     218:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <__data_end+0x3>
     21c:	89 01       	movw	r16, r18
     21e:	22 27       	eor	r18, r18
     220:	33 27       	eor	r19, r19
     222:	00 93 0c 02 	sts	0x020C, r16	; 0x80020c <__data_end>
     226:	10 93 0d 02 	sts	0x020D, r17	; 0x80020d <__data_end+0x1>
     22a:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <__data_end+0x2>
     22e:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <__data_end+0x3>
     232:	00 91 0c 02 	lds	r16, 0x020C	; 0x80020c <__data_end>
     236:	10 91 0d 02 	lds	r17, 0x020D	; 0x80020d <__data_end+0x1>
     23a:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <__data_end+0x2>
     23e:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <__data_end+0x3>
     242:	01 2b       	or	r16, r17
     244:	02 2b       	or	r16, r18
     246:	03 2b       	or	r16, r19
     248:	91 f0       	breq	.+36     	; 0x26e <common_tc_delay+0x94>
     24a:	00 91 0c 02 	lds	r16, 0x020C	; 0x80020c <__data_end>
     24e:	10 91 0d 02 	lds	r17, 0x020D	; 0x80020d <__data_end+0x1>
     252:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <__data_end+0x2>
     256:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <__data_end+0x3>
     25a:	6f 5f       	subi	r22, 0xFF	; 255
     25c:	7f 4f       	sbci	r23, 0xFF	; 255
     25e:	46 0f       	add	r20, r22
     260:	57 1f       	adc	r21, r23
     262:	50 93 12 02 	sts	0x0212, r21	; 0x800212 <compare_value+0x1>
     266:	40 93 11 02 	sts	0x0211, r20	; 0x800211 <compare_value>
     26a:	77 d7       	rcall	.+3822   	; 0x115a <tmr_disable_cc_interrupt>
     26c:	07 c0       	rjmp	.+14     	; 0x27c <common_tc_delay+0xa2>
     26e:	64 0f       	add	r22, r20
     270:	75 1f       	adc	r23, r21
     272:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <compare_value+0x1>
     276:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <compare_value>
     27a:	76 d7       	rcall	.+3820   	; 0x1168 <tmr_enable_cc_interrupt>
     27c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <compare_value>
     280:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <compare_value+0x1>
     284:	84 36       	cpi	r24, 0x64	; 100
     286:	91 05       	cpc	r25, r1
     288:	30 f4       	brcc	.+12     	; 0x296 <common_tc_delay+0xbc>
     28a:	8c 59       	subi	r24, 0x9C	; 156
     28c:	9f 4f       	sbci	r25, 0xFF	; 255
     28e:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <compare_value+0x1>
     292:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <compare_value>
     296:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <compare_value>
     29a:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <compare_value+0x1>
     29e:	76 d7       	rcall	.+3820   	; 0x118c <tmr_write_cmpreg>
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	08 95       	ret

000002a6 <common_tc_init>:
     2a6:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <timer_mul_var>
     2aa:	8a d7       	rcall	.+3860   	; 0x11c0 <tmr_init>
     2ac:	80 93 8b 0a 	sts	0x0A8B, r24	; 0x800a8b <timer_multiplier>
     2b0:	08 95       	ret

000002b2 <tmr_ovf_callback>:
     2b2:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     2b6:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
     2ba:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <__data_end+0x2>
     2be:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <__data_end+0x3>
     2c2:	89 2b       	or	r24, r25
     2c4:	8a 2b       	or	r24, r26
     2c6:	8b 2b       	or	r24, r27
     2c8:	c1 f0       	breq	.+48     	; 0x2fa <tmr_ovf_callback+0x48>
     2ca:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
     2ce:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
     2d2:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <__data_end+0x2>
     2d6:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <__data_end+0x3>
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	a1 09       	sbc	r26, r1
     2de:	b1 09       	sbc	r27, r1
     2e0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
     2e4:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
     2e8:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <__data_end+0x2>
     2ec:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <__data_end+0x3>
     2f0:	89 2b       	or	r24, r25
     2f2:	8a 2b       	or	r24, r26
     2f4:	8b 2b       	or	r24, r27
     2f6:	09 f4       	brne	.+2      	; 0x2fa <tmr_ovf_callback+0x48>
     2f8:	37 d7       	rcall	.+3694   	; 0x1168 <tmr_enable_cc_interrupt>
     2fa:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <timer_mul_var>
     2fe:	8f 5f       	subi	r24, 0xFF	; 255
     300:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <timer_mul_var>
     304:	90 91 8b 0a 	lds	r25, 0x0A8B	; 0x800a8b <timer_multiplier>
     308:	89 17       	cp	r24, r25
     30a:	48 f0       	brcs	.+18     	; 0x31e <tmr_ovf_callback+0x6c>
     30c:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <timer_mul_var>
     310:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <common_tc_ovf_callback>
     314:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <common_tc_ovf_callback+0x1>
     318:	30 97       	sbiw	r30, 0x00	; 0
     31a:	09 f0       	breq	.+2      	; 0x31e <tmr_ovf_callback+0x6c>
     31c:	09 95       	icall
     31e:	08 95       	ret

00000320 <tmr_cca_callback>:
     320:	1c d7       	rcall	.+3640   	; 0x115a <tmr_disable_cc_interrupt>
     322:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <common_tc_cca_callback>
     326:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <common_tc_cca_callback+0x1>
     32a:	30 97       	sbiw	r30, 0x00	; 0
     32c:	09 f0       	breq	.+2      	; 0x330 <tmr_cca_callback+0x10>
     32e:	09 95       	icall
     330:	08 95       	ret

00000332 <set_common_tc_overflow_callback>:
     332:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <common_tc_ovf_callback+0x1>
     336:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <common_tc_ovf_callback>
     33a:	08 95       	ret

0000033c <set_common_tc_expiry_callback>:
     33c:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <common_tc_cca_callback+0x1>
     340:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <common_tc_cca_callback>
     344:	08 95       	ret

00000346 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     346:	04 c0       	rjmp	.+8      	; 0x350 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     348:	61 50       	subi	r22, 0x01	; 1
     34a:	71 09       	sbc	r23, r1
     34c:	81 09       	sbc	r24, r1
     34e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     350:	61 15       	cp	r22, r1
     352:	71 05       	cpc	r23, r1
     354:	81 05       	cpc	r24, r1
     356:	91 05       	cpc	r25, r1
     358:	b9 f7       	brne	.-18     	; 0x348 <__portable_avr_delay_cycles+0x2>
     35a:	08 95       	ret

0000035c <sendTimerHandler>:
#include "serial_comms.h"

static SYS_Timer_t sendTimer;
static uint8_t payload = 0x4;

static void sendTimerHandler(SYS_Timer_t *timer) {
     35c:	08 95       	ret

0000035e <main>:
     35e:	0e 94 35 11 	call	0x226a	; 0x226a <board_init>
     362:	41 d0       	rcall	.+130    	; 0x3e6 <sysclk_init>
    
  	irq_initialize_vectors();

    // TODO switch clock source to external oscillator?
	board_init();
    sysclk_init();
     364:	4d d7       	rcall	.+3738   	; 0x1200 <SYS_Init>
     366:	9a d1       	rcall	.+820    	; 0x69c <appInit>
     368:	6d e6       	ldi	r22, 0x6D	; 109
     36a:	73 e0       	ldi	r23, 0x03	; 3
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 47 0b 	call	0x168e	; 0x168e <NWK_OpenEndpoint>
     372:	84 b1       	in	r24, 0x04	; 4
     374:	95 b1       	in	r25, 0x05	; 5
     376:	9f 73       	andi	r25, 0x3F	; 63
     378:	95 b9       	out	0x05, r25	; 5
     37a:	80 6c       	ori	r24, 0xC0	; 192
     37c:	84 b9       	out	0x04, r24	; 4
     37e:	83 b3       	in	r24, 0x13	; 19
     380:	94 b3       	in	r25, 0x14	; 20
     382:	99 7f       	andi	r25, 0xF9	; 249
     384:	94 bb       	out	0x14, r25	; 20
     386:	86 60       	ori	r24, 0x06	; 6
     388:	83 bb       	out	0x13, r24	; 19
     38a:	2f 9a       	sbi	0x05, 7	; 5
     38c:	2e 9a       	sbi	0x05, 6	; 5
     38e:	a1 9a       	sbi	0x14, 1	; 20
     390:	a2 9a       	sbi	0x14, 2	; 20
     392:	63 ec       	ldi	r22, 0xC3	; 195
     394:	72 ea       	ldi	r23, 0xA2	; 162
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	d5 df       	rcall	.-86     	; 0x346 <__portable_avr_delay_cycles>
     39c:	2f 98       	cbi	0x05, 7	; 5
     39e:	2e 98       	cbi	0x05, 6	; 5
     3a0:	a1 98       	cbi	0x14, 1	; 20
     3a2:	a2 98       	cbi	0x14, 2	; 20
     3a4:	6b e0       	ldi	r22, 0x0B	; 11
     3a6:	7b e8       	ldi	r23, 0x8B	; 139
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	cc df       	rcall	.-104    	; 0x346 <__portable_avr_delay_cycles>
     3ae:	cb d1       	rcall	.+918    	; 0x746 <serial_init>
     3b0:	78 94       	sei
     3b2:	e7 e1       	ldi	r30, 0x17	; 23
     3b4:	f2 e0       	ldi	r31, 0x02	; 2
     3b6:	84 ef       	ldi	r24, 0xF4	; 244
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	a0 e0       	ldi	r26, 0x00	; 0
     3bc:	b0 e0       	ldi	r27, 0x00	; 0
     3be:	86 83       	std	Z+6, r24	; 0x06
     3c0:	97 83       	std	Z+7, r25	; 0x07
     3c2:	a0 87       	std	Z+8, r26	; 0x08
     3c4:	b1 87       	std	Z+9, r27	; 0x09
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	82 87       	std	Z+10, r24	; 0x0a
     3ca:	8e ea       	ldi	r24, 0xAE	; 174
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	94 87       	std	Z+12, r25	; 0x0c
     3d0:	83 87       	std	Z+11, r24	; 0x0b
     3d2:	cf 01       	movw	r24, r30
     3d4:	b6 d7       	rcall	.+3948   	; 0x1342 <SYS_TimerStart>
     3d6:	19 d7       	rcall	.+3634   	; 0x120a <SYS_TaskHandler>
     3d8:	d3 d1       	rcall	.+934    	; 0x780 <serial_update_rx_buffer>
     3da:	01 c0       	rjmp	.+2      	; 0x3de <main+0x80>
     3dc:	cc d1       	rcall	.+920    	; 0x776 <serial_write_byte>
     3de:	ba d1       	rcall	.+884    	; 0x754 <serial_read_byte_from_rx_buffer>
     3e0:	81 11       	cpse	r24, r1
     3e2:	fc cf       	rjmp	.-8      	; 0x3dc <main+0x7e>
     3e4:	f8 cf       	rjmp	.-16     	; 0x3d6 <main+0x78>

000003e6 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	1f 92       	push	r1
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
     3f0:	8f ef       	ldi	r24, 0xFF	; 255
     3f2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
     3f6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
     3fa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
     3fe:	83 30       	cpi	r24, 0x03	; 3
     400:	69 f0       	breq	.+26     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     402:	8f b7       	in	r24, 0x3f	; 63
     404:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     406:	f8 94       	cli
	return flags;
     408:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
     40a:	5f 93       	push	r21
     40c:	50 e8       	ldi	r21, 0x80	; 128
     40e:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     412:	53 e0       	ldi	r21, 0x03	; 3
     414:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     418:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     41a:	8f bf       	out	0x3f, r24	; 63
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
     41c:	0f 90       	pop	r0
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	1f 92       	push	r1
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     42e:	9f b7       	in	r25, 0x3f	; 63
     430:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     432:	f8 94       	cli
	return flags;
     434:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     436:	82 30       	cpi	r24, 0x02	; 2
     438:	40 f4       	brcc	.+16     	; 0x44a <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     43a:	e8 2f       	mov	r30, r24
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	ec 59       	subi	r30, 0x9C	; 156
     440:	ff 4f       	sbci	r31, 0xFF	; 255
     442:	60 95       	com	r22
     444:	80 81       	ld	r24, Z
     446:	68 23       	and	r22, r24
     448:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     44a:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     44c:	0f 90       	pop	r0
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	1f 92       	push	r1
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     45e:	9f b7       	in	r25, 0x3f	; 63
     460:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     462:	f8 94       	cli
	return flags;
     464:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	38 f4       	brcc	.+14     	; 0x478 <sysclk_disable_module+0x24>
		*(reg + port) |= id;
     46a:	e8 2f       	mov	r30, r24
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	ec 59       	subi	r30, 0x9C	; 156
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	80 81       	ld	r24, Z
     474:	68 2b       	or	r22, r24
     476:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     478:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     47a:	0f 90       	pop	r0
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	08 95       	ret

00000482 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     482:	04 c0       	rjmp	.+8      	; 0x48c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     484:	61 50       	subi	r22, 0x01	; 1
     486:	71 09       	sbc	r23, r1
     488:	81 09       	sbc	r24, r1
     48a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     48c:	61 15       	cp	r22, r1
     48e:	71 05       	cpc	r23, r1
     490:	81 05       	cpc	r24, r1
     492:	91 05       	cpc	r25, r1
     494:	b9 f7       	brne	.-18     	; 0x484 <__portable_avr_delay_cycles+0x2>
     496:	08 95       	ret

00000498 <blinkGPIO>:

// Transmit frame
static NWK_DataReq_t txMsg;


static void blinkGPIO(port_pin_t pin, uint16_t delay, uint8_t repeats){
     498:	2f 92       	push	r2
     49a:	3f 92       	push	r3
     49c:	4f 92       	push	r4
     49e:	5f 92       	push	r5
     4a0:	6f 92       	push	r6
     4a2:	7f 92       	push	r7
     4a4:	8f 92       	push	r8
     4a6:	9f 92       	push	r9
     4a8:	af 92       	push	r10
     4aa:	bf 92       	push	r11
     4ac:	cf 92       	push	r12
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	00 d0       	rcall	.+0      	; 0x4be <blinkGPIO+0x26>
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <blinkGPIO+0x28>
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <blinkGPIO+0x2a>
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
    
    for(uint8_t i = 0; i < repeats;  i++) {
     4c6:	44 23       	and	r20, r20
     4c8:	09 f4       	brne	.+2      	; 0x4cc <blinkGPIO+0x34>
     4ca:	8f c0       	rjmp	.+286    	; 0x5ea <blinkGPIO+0x152>
     4cc:	94 2e       	mov	r9, r20
     4ce:	3b 01       	movw	r6, r22
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     4d0:	28 2f       	mov	r18, r24
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	36 95       	lsr	r19
     4d6:	27 95       	ror	r18
     4d8:	36 95       	lsr	r19
     4da:	27 95       	ror	r18
     4dc:	36 95       	lsr	r19
     4de:	27 95       	ror	r18
     4e0:	3c 83       	std	Y+4, r19	; 0x04
     4e2:	2b 83       	std	Y+3, r18	; 0x03
     4e4:	22 0f       	add	r18, r18
     4e6:	33 1f       	adc	r19, r19
     4e8:	4b 81       	ldd	r20, Y+3	; 0x03
     4ea:	5c 81       	ldd	r21, Y+4	; 0x04
     4ec:	42 0f       	add	r20, r18
     4ee:	53 1f       	adc	r21, r19
     4f0:	40 5e       	subi	r20, 0xE0	; 224
     4f2:	5f 4f       	sbci	r21, 0xFF	; 255
     4f4:	5e 83       	std	Y+6, r21	; 0x06
     4f6:	4d 83       	std	Y+5, r20	; 0x05
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     4f8:	87 70       	andi	r24, 0x07	; 7
     4fa:	01 e0       	ldi	r16, 0x01	; 1
     4fc:	10 e0       	ldi	r17, 0x00	; 0
     4fe:	f8 01       	movw	r30, r16
     500:	02 c0       	rjmp	.+4      	; 0x506 <blinkGPIO+0x6e>
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	8a 95       	dec	r24
     508:	e2 f7       	brpl	.-8      	; 0x502 <blinkGPIO+0x6a>
     50a:	fc 83       	std	Y+4, r31	; 0x04
     50c:	eb 83       	std	Y+3, r30	; 0x03
     50e:	8b 80       	ldd	r8, Y+3	; 0x03
        gpio_set_pin_high(pin);
        delay_ms(delay);
     510:	ab 01       	movw	r20, r22
     512:	68 94       	set
     514:	aa 24       	eor	r10, r10
     516:	a6 f8       	bld	r10, 6
     518:	0f 2e       	mov	r0, r31
     51a:	f2 e4       	ldi	r31, 0x42	; 66
     51c:	bf 2e       	mov	r11, r31
     51e:	f0 2d       	mov	r31, r0
     520:	0f 2e       	mov	r0, r31
     522:	ff e0       	ldi	r31, 0x0F	; 15
     524:	cf 2e       	mov	r12, r31
     526:	f0 2d       	mov	r31, r0
     528:	d1 2c       	mov	r13, r1
     52a:	e1 2c       	mov	r14, r1
     52c:	f1 2c       	mov	r15, r1
     52e:	00 e0       	ldi	r16, 0x00	; 0
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	26 2d       	mov	r18, r6
     534:	35 2f       	mov	r19, r21
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 9e 12 	call	0x253c	; 0x253c <__muldi3>
     546:	0f 2e       	mov	r0, r31
     548:	f6 e0       	ldi	r31, 0x06	; 6
     54a:	af 2e       	mov	r10, r31
     54c:	f0 2d       	mov	r31, r0
     54e:	b1 2c       	mov	r11, r1
     550:	c1 2c       	mov	r12, r1
     552:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivdi3>
     556:	29 51       	subi	r18, 0x19	; 25
     558:	3c 4f       	sbci	r19, 0xFC	; 252
     55a:	4f 4f       	sbci	r20, 0xFF	; 255
     55c:	5f 4f       	sbci	r21, 0xFF	; 255
     55e:	6f 4f       	sbci	r22, 0xFF	; 255
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	8f 4f       	sbci	r24, 0xFF	; 255
     564:	9f 4f       	sbci	r25, 0xFF	; 255
     566:	22 2e       	mov	r2, r18
     568:	33 2e       	mov	r3, r19
     56a:	44 2e       	mov	r4, r20
     56c:	55 2e       	mov	r5, r21
     56e:	a6 2e       	mov	r10, r22
     570:	b7 2e       	mov	r11, r23
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	9a 83       	std	Y+2, r25	; 0x02
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     576:	08 2d       	mov	r16, r8
     578:	00 95       	com	r16
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     57a:	ed 81       	ldd	r30, Y+5	; 0x05
     57c:	fe 81       	ldd	r31, Y+6	; 0x06
     57e:	82 81       	ldd	r24, Z+2	; 0x02
     580:	88 29       	or	r24, r8
     582:	82 83       	std	Z+2, r24	; 0x02
     584:	61 14       	cp	r6, r1
     586:	71 04       	cpc	r7, r1
     588:	f1 f0       	breq	.+60     	; 0x5c6 <blinkGPIO+0x12e>
     58a:	22 2d       	mov	r18, r2
     58c:	33 2d       	mov	r19, r3
     58e:	44 2d       	mov	r20, r4
     590:	55 2d       	mov	r21, r5
     592:	6a 2d       	mov	r22, r10
     594:	7b 2d       	mov	r23, r11
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	9a 81       	ldd	r25, Y+2	; 0x02
     59a:	0e 94 ca 11 	call	0x2394	; 0x2394 <__floatundisf>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	4a e7       	ldi	r20, 0x7A	; 122
     5a4:	54 e4       	ldi	r21, 0x44	; 68
     5a6:	0e 94 36 11 	call	0x226c	; 0x226c <__divsf3>
     5aa:	0e 94 9e 11 	call	0x233c	; 0x233c <__fixunssfsi>
     5ae:	6b 01       	movw	r12, r22
     5b0:	7c 01       	movw	r14, r24
     5b2:	67 df       	rcall	.-306    	; 0x482 <__portable_avr_delay_cycles>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     5b4:	ed 81       	ldd	r30, Y+5	; 0x05
     5b6:	fe 81       	ldd	r31, Y+6	; 0x06
     5b8:	82 81       	ldd	r24, Z+2	; 0x02
     5ba:	80 23       	and	r24, r16
     5bc:	82 83       	std	Z+2, r24	; 0x02
        gpio_set_pin_low(pin);
        delay_ms(delay);
     5be:	c7 01       	movw	r24, r14
     5c0:	b6 01       	movw	r22, r12
     5c2:	5f df       	rcall	.-322    	; 0x482 <__portable_avr_delay_cycles>
     5c4:	0f c0       	rjmp	.+30     	; 0x5e4 <blinkGPIO+0x14c>

static void blinkGPIO(port_pin_t pin, uint16_t delay, uint8_t repeats){
    
    for(uint8_t i = 0; i < repeats;  i++) {
        gpio_set_pin_high(pin);
        delay_ms(delay);
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 df       	rcall	.-334    	; 0x482 <__portable_avr_delay_cycles>
     5d0:	ed 81       	ldd	r30, Y+5	; 0x05
     5d2:	fe 81       	ldd	r31, Y+6	; 0x06
     5d4:	82 81       	ldd	r24, Z+2	; 0x02
     5d6:	80 23       	and	r24, r16
     5d8:	82 83       	std	Z+2, r24	; 0x02
        gpio_set_pin_low(pin);
        delay_ms(delay);
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	4f df       	rcall	.-354    	; 0x482 <__portable_avr_delay_cycles>
static NWK_DataReq_t txMsg;


static void blinkGPIO(port_pin_t pin, uint16_t delay, uint8_t repeats){
    
    for(uint8_t i = 0; i < repeats;  i++) {
     5e4:	1f 5f       	subi	r17, 0xFF	; 255
     5e6:	91 12       	cpse	r9, r17
     5e8:	c8 cf       	rjmp	.-112    	; 0x57a <blinkGPIO+0xe2>
        gpio_set_pin_high(pin);
        delay_ms(delay);
        gpio_set_pin_low(pin);
        delay_ms(delay);
    }
}
     5ea:	26 96       	adiw	r28, 0x06	; 6
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	bf 90       	pop	r11
     608:	af 90       	pop	r10
     60a:	9f 90       	pop	r9
     60c:	8f 90       	pop	r8
     60e:	7f 90       	pop	r7
     610:	6f 90       	pop	r6
     612:	5f 90       	pop	r5
     614:	4f 90       	pop	r4
     616:	3f 90       	pop	r3
     618:	2f 90       	pop	r2
     61a:	08 95       	ret

0000061c <txConfirm>:

// Call back function for sending a packet
// Blinks error LEDs to convey error type
static void txConfirm(NWK_DataReq_t *req){
    
    if(req->status == NWK_SUCCESS_STATUS) {
     61c:	fc 01       	movw	r30, r24
     61e:	87 85       	ldd	r24, Z+15	; 0x0f
     620:	81 11       	cpse	r24, r1
     622:	06 c0       	rjmp	.+12     	; 0x630 <txConfirm+0x14>
        // Blink LED to confirm transmission
        blinkGPIO(TX_LED, 100, 1);
     624:	41 e0       	ldi	r20, 0x01	; 1
     626:	64 e6       	ldi	r22, 0x64	; 100
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	8e e0       	ldi	r24, 0x0E	; 14
     62c:	35 cf       	rjmp	.-406    	; 0x498 <blinkGPIO>
     62e:	08 95       	ret
        } else if(req->status == NWK_ERROR_STATUS) {
     630:	81 30       	cpi	r24, 0x01	; 1
     632:	31 f4       	brne	.+12     	; 0x640 <txConfirm+0x24>
        // ERROR: transmission failed
        blinkGPIO(ERROR_LED, 100, 1);
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	64 e6       	ldi	r22, 0x64	; 100
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	82 e3       	ldi	r24, 0x32	; 50
     63c:	2d cf       	rjmp	.-422    	; 0x498 <blinkGPIO>
     63e:	08 95       	ret
        } else if(req->status == NWK_OUT_OF_MEMORY_STATUS) {
     640:	82 30       	cpi	r24, 0x02	; 2
     642:	31 f4       	brne	.+12     	; 0x650 <txConfirm+0x34>
        // ERROR: transmission failed
        blinkGPIO(ERROR_LED, 100, 2);
     644:	42 e0       	ldi	r20, 0x02	; 2
     646:	64 e6       	ldi	r22, 0x64	; 100
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	82 e3       	ldi	r24, 0x32	; 50
     64c:	25 cf       	rjmp	.-438    	; 0x498 <blinkGPIO>
     64e:	08 95       	ret
        } else if(req->status == NWK_NO_ACK_STATUS) {
     650:	80 31       	cpi	r24, 0x10	; 16
     652:	31 f4       	brne	.+12     	; 0x660 <txConfirm+0x44>
        // ERROR: transmission failed
        blinkGPIO(ERROR_LED, 100, 3);
     654:	43 e0       	ldi	r20, 0x03	; 3
     656:	64 e6       	ldi	r22, 0x64	; 100
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	82 e3       	ldi	r24, 0x32	; 50
     65c:	1d cf       	rjmp	.-454    	; 0x498 <blinkGPIO>
     65e:	08 95       	ret
        } else if(req->status == NWK_NO_ROUTE_STATUS) {
     660:	81 31       	cpi	r24, 0x11	; 17
        // ERROR: transmission failed
        blinkGPIO(ERROR_LED, 100, 4);
     662:	31 f4       	brne	.+12     	; 0x670 <txConfirm+0x54>
     664:	44 e0       	ldi	r20, 0x04	; 4
     666:	64 e6       	ldi	r22, 0x64	; 100
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	82 e3       	ldi	r24, 0x32	; 50
     66c:	15 cf       	rjmp	.-470    	; 0x498 <blinkGPIO>
        } else if(req->status == NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS) {
     66e:	08 95       	ret
        // ERROR: transmission failed
        blinkGPIO(ERROR_LED, 100, 5);
     670:	80 32       	cpi	r24, 0x20	; 32
     672:	31 f4       	brne	.+12     	; 0x680 <txConfirm+0x64>
     674:	45 e0       	ldi	r20, 0x05	; 5
     676:	64 e6       	ldi	r22, 0x64	; 100
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	82 e3       	ldi	r24, 0x32	; 50
        } else if(req->status == NWK_PHY_NO_ACK_STATUS) {
     67c:	0d cf       	rjmp	.-486    	; 0x498 <blinkGPIO>
        // ERROR: transmission failed
        blinkGPIO(ERROR_LED, 100, 6);
     67e:	08 95       	ret
     680:	81 32       	cpi	r24, 0x21	; 33
     682:	31 f4       	brne	.+12     	; 0x690 <txConfirm+0x74>
     684:	46 e0       	ldi	r20, 0x06	; 6
     686:	64 e6       	ldi	r22, 0x64	; 100
     688:	70 e0       	ldi	r23, 0x00	; 0
        } else {
        // ERROR: transmission failed
        blinkGPIO(ERROR_LED, 100, 7);
     68a:	82 e3       	ldi	r24, 0x32	; 50
     68c:	05 cf       	rjmp	.-502    	; 0x498 <blinkGPIO>
     68e:	08 95       	ret
     690:	47 e0       	ldi	r20, 0x07	; 7
     692:	64 e6       	ldi	r22, 0x64	; 100
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	82 e3       	ldi	r24, 0x32	; 50
     698:	ff ce       	rjmp	.-514    	; 0x498 <blinkGPIO>
     69a:	08 95       	ret

0000069c <appInit>:
}

// Application in initialization function stolen from the example project
// Most content not relevant to our application, only nwk and phy setup.
void appInit(void) {
    NWK_SetAddr(APP_ADDR);
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	ea d7       	rcall	.+4052   	; 0x1676 <NWK_SetAddr>
    NWK_SetPanId(APP_PANID);
     6a2:	89 e3       	ldi	r24, 0x39	; 57
     6a4:	92 e1       	ldi	r25, 0x12	; 18
     6a6:	ed d7       	rcall	.+4058   	; 0x1682 <NWK_SetPanId>
    PHY_SetChannel(APP_CHANNEL);
     6a8:	87 e1       	ldi	r24, 0x17	; 23
    PHY_SetRxState(true);
     6aa:	fd d6       	rcall	.+3578   	; 0x14a6 <PHY_SetChannel>
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	f7 c6       	rjmp	.+3566   	; 0x149e <PHY_SetRxState>
     6b0:	08 95       	ret

000006b2 <sendPacket>:
}

// Transmit a packet
void sendPacket(uint16_t destAddr, uint8_t *payload, uint8_t size) {

    txMsg.dstAddr = destAddr;
     6b2:	e4 e2       	ldi	r30, 0x24	; 36
     6b4:	f2 e0       	ldi	r31, 0x02	; 2
     6b6:	96 83       	std	Z+6, r25	; 0x06
     6b8:	85 83       	std	Z+5, r24	; 0x05
    txMsg.dstEndpoint = APP_ENDPOINT;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	87 83       	std	Z+7, r24	; 0x07
    txMsg.srcEndpoint = APP_ENDPOINT;
     6be:	80 87       	std	Z+8, r24	; 0x08
    txMsg.options = NWK_OPT_BROADCAST_PAN_ID;
     6c0:	84 e0       	ldi	r24, 0x04	; 4
     6c2:	81 87       	std	Z+9, r24	; 0x09
    txMsg.data = payload;
     6c4:	73 87       	std	Z+11, r23	; 0x0b
     6c6:	62 87       	std	Z+10, r22	; 0x0a
    txMsg.size = size;
     6c8:	44 87       	std	Z+12, r20	; 0x0c
    txMsg.confirm = txConfirm;
     6ca:	8e e0       	ldi	r24, 0x0E	; 14
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	96 87       	std	Z+14, r25	; 0x0e
     6d0:	85 87       	std	Z+13, r24	; 0x0d
    NWK_DataReq(&txMsg);
     6d2:	cf 01       	movw	r24, r30
     6d4:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <NWK_DataReq>
     6d8:	08 95       	ret

000006da <receivePacket>:
    PHY_SetRxState(true);
}

// Reception callback function
bool receivePacket(NWK_DataInd_t *ind)
{
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	ec 01       	movw	r28, r24
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     6e0:	2f 9a       	sbi	0x05, 7	; 5
    // process the frame
    // Blink RX LED
    gpio_set_pin_high(RX_LED);
    delay_ms(100);
     6e2:	6b e1       	ldi	r22, 0x1B	; 27
     6e4:	71 e4       	ldi	r23, 0x41	; 65
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	cb de       	rcall	.-618    	; 0x482 <__portable_avr_delay_cycles>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     6ec:	2f 98       	cbi	0x05, 7	; 5
    
    //uint8_t rxPayload = ind->data[0];
    //uint8_t rxRSSI = ind->rssi;
    //blinkGPIO(STATUS_LED, 1, (rxRSSI));
    
    if(ind->size == sizeof(bikeMessage)) {
     6ee:	89 85       	ldd	r24, Y+9	; 0x09
     6f0:	84 30       	cpi	r24, 0x04	; 4
     6f2:	c1 f4       	brne	.+48     	; 0x724 <receivePacket+0x4a>
        // We received a packet from a bike node!
        // Send a message to the master with its details.
        cornerMessage.bikeAddress = ind->srcAddr;
     6f4:	88 81       	ld	r24, Y
     6f6:	99 81       	ldd	r25, Y+1	; 0x01
     6f8:	e5 e3       	ldi	r30, 0x35	; 53
     6fa:	f2 e0       	ldi	r31, 0x02	; 2
     6fc:	91 83       	std	Z+1, r25	; 0x01
     6fe:	80 83       	st	Z, r24
        cornerMessage.bikeRssi = ind->rssi;
     700:	8b 85       	ldd	r24, Y+11	; 0x0b
     702:	82 83       	std	Z+2, r24	; 0x02
        memcpy(&cornerMessage.bikePayload, ind->data, sizeof(bikeMessage));
     704:	af 81       	ldd	r26, Y+7	; 0x07
     706:	b8 85       	ldd	r27, Y+8	; 0x08
     708:	8d 91       	ld	r24, X+
     70a:	9d 91       	ld	r25, X+
     70c:	0d 90       	ld	r0, X+
     70e:	bc 91       	ld	r27, X
     710:	a0 2d       	mov	r26, r0
     712:	83 83       	std	Z+3, r24	; 0x03
     714:	94 83       	std	Z+4, r25	; 0x04
     716:	a5 83       	std	Z+5, r26	; 0x05
     718:	b6 83       	std	Z+6, r27	; 0x06

        // Send the message to the master. This could be hoisted out of the callback
        sendPacket(MASTER_ADDR, &cornerMessage, sizeof(cornerMessage));
     71a:	47 e0       	ldi	r20, 0x07	; 7
     71c:	bf 01       	movw	r22, r30
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	c7 df       	rcall	.-114    	; 0x6b2 <sendPacket>
    }
    
    // Do not send ACK frame
    return false;
}
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <serial_clear_rx_buffer>:
	usart_init_rs232(USART_SERIAL, &USART_SERIAL_OPTIONS);
	serial_clear_rx_buffer();
}

void serial_clear_rx_buffer(void){
	rx_buf_write_idx = 0;
     72c:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <rx_buf_write_idx>
	rx_buf_read_idx = 0;
     730:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <rx_buf_read_idx>
     734:	ec e3       	ldi	r30, 0x3C	; 60
     736:	f2 e0       	ldi	r31, 0x02	; 2
     738:	8c e3       	ldi	r24, 0x3C	; 60
     73a:	93 e0       	ldi	r25, 0x03	; 3
	for(int i = 0; i < BUF_SIZE; i++){
		RX_BUF[i] = 0;
     73c:	11 92       	st	Z+, r1
}

void serial_clear_rx_buffer(void){
	rx_buf_write_idx = 0;
	rx_buf_read_idx = 0;
	for(int i = 0; i < BUF_SIZE; i++){
     73e:	e8 17       	cp	r30, r24
     740:	f9 07       	cpc	r31, r25
     742:	e1 f7       	brne	.-8      	; 0x73c <serial_clear_rx_buffer+0x10>
		RX_BUF[i] = 0;
	}
}
     744:	08 95       	ret

00000746 <serial_init>:
	.paritytype = USART_SERIAL_PARITY,
	.stopbits = USART_SERIAL_STOP_BIT
};

void serial_init(void){
	usart_init_rs232(USART_SERIAL, &USART_SERIAL_OPTIONS);
     746:	64 e0       	ldi	r22, 0x04	; 4
     748:	72 e0       	ldi	r23, 0x02	; 2
     74a:	88 ec       	ldi	r24, 0xC8	; 200
     74c:	90 e0       	ldi	r25, 0x00	; 0
	serial_clear_rx_buffer();
     74e:	ce d0       	rcall	.+412    	; 0x8ec <usart_init_rs232>
     750:	ed cf       	rjmp	.-38     	; 0x72c <serial_clear_rx_buffer>
     752:	08 95       	ret

00000754 <serial_read_byte_from_rx_buffer>:
		RX_BUF[i] = 0;
	}
}

char serial_read_byte_from_rx_buffer(void){
	if(rx_buf_write_idx == rx_buf_read_idx){
     754:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <rx_buf_read_idx>
     758:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <rx_buf_write_idx>
     75c:	89 17       	cp	r24, r25
     75e:	49 f0       	breq	.+18     	; 0x772 <serial_read_byte_from_rx_buffer+0x1e>
		return '\0';
	}
	char ret_val = RX_BUF[rx_buf_read_idx];
     760:	e9 2f       	mov	r30, r25
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	e4 5c       	subi	r30, 0xC4	; 196
     766:	fd 4f       	sbci	r31, 0xFD	; 253
     768:	80 81       	ld	r24, Z
	rx_buf_read_idx++;
     76a:	9f 5f       	subi	r25, 0xFF	; 255
     76c:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <rx_buf_read_idx>
	if(rx_buf_read_idx > BUF_SIZE){
		rx_buf_read_idx = 0;
	}
	return ret_val;
     770:	08 95       	ret
	}
}

char serial_read_byte_from_rx_buffer(void){
	if(rx_buf_write_idx == rx_buf_read_idx){
		return '\0';
     772:	80 e0       	ldi	r24, 0x00	; 0
	rx_buf_read_idx++;
	if(rx_buf_read_idx > BUF_SIZE){
		rx_buf_read_idx = 0;
	}
	return ret_val;
}
     774:	08 95       	ret

00000776 <serial_write_byte>:
 *
 * \return Status code
 */
static inline status_code_t usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     776:	68 2f       	mov	r22, r24
     778:	88 ec       	ldi	r24, 0xC8	; 200
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	1e c0       	rjmp	.+60     	; 0x7ba <usart_putchar>
     77e:	08 95       	ret

00000780 <serial_update_rx_buffer>:
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
     780:	88 ec       	ldi	r24, 0xC8	; 200
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	21 d0       	rcall	.+66     	; 0x7c8 <usart_getchar>
int32_t serial_update_rx_buffer(){
	//get a byte
	uint8_t received_byte;
	int32_t ret_val = 0;
	usart_serial_getchar(USART_SERIAL, &received_byte);
	while(received_byte != '\0') {
     786:	88 23       	and	r24, r24
     788:	a1 f0       	breq	.+40     	; 0x7b2 <serial_update_rx_buffer+0x32>
		ret_val = 1;
		RX_BUF[rx_buf_write_idx] = received_byte;
     78a:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <rx_buf_write_idx>
     78e:	e9 2f       	mov	r30, r25
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	e4 5c       	subi	r30, 0xC4	; 196
     794:	fd 4f       	sbci	r31, 0xFD	; 253
     796:	80 83       	st	Z, r24
		rx_buf_write_idx++;
     798:	9f 5f       	subi	r25, 0xFF	; 255
     79a:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <rx_buf_write_idx>
     79e:	88 ec       	ldi	r24, 0xC8	; 200
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	12 d0       	rcall	.+36     	; 0x7c8 <usart_getchar>
int32_t serial_update_rx_buffer(){
	//get a byte
	uint8_t received_byte;
	int32_t ret_val = 0;
	usart_serial_getchar(USART_SERIAL, &received_byte);
	while(received_byte != '\0') {
     7a4:	81 11       	cpse	r24, r1
     7a6:	f1 cf       	rjmp	.-30     	; 0x78a <serial_update_rx_buffer+0xa>
		ret_val = 1;
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	08 95       	ret
//returns 1 if there has been a byte read
//returns 0 of no update to the buffer
int32_t serial_update_rx_buffer(){
	//get a byte
	uint8_t received_byte;
	int32_t ret_val = 0;
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	cb 01       	movw	r24, r22
		}
		usart_serial_getchar(USART_SERIAL, &received_byte);
	}
	
	return ret_val;
}
     7b8:	08 95       	ret

000007ba <usart_putchar>:
	}

	if (baud_offset != USART_BAUD_UNDEFINED) {
		usart->UBRR = baudctrl;
	}
}
     7ba:	fc 01       	movw	r30, r24
     7bc:	90 81       	ld	r25, Z
     7be:	95 ff       	sbrs	r25, 5
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <usart_putchar+0x2>
     7c2:	66 83       	std	Z+6, r22	; 0x06
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	08 95       	ret

000007c8 <usart_getchar>:
     7c8:	fc 01       	movw	r30, r24
     7ca:	90 81       	ld	r25, Z
     7cc:	89 2f       	mov	r24, r25
     7ce:	80 78       	andi	r24, 0x80	; 128
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <usart_getchar+0xc>
     7d2:	86 81       	ldd	r24, Z+6	; 0x06
     7d4:	08 95       	ret

000007d6 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     7d6:	4f 92       	push	r4
     7d8:	5f 92       	push	r5
     7da:	6f 92       	push	r6
     7dc:	7f 92       	push	r7
     7de:	8f 92       	push	r8
     7e0:	9f 92       	push	r9
     7e2:	af 92       	push	r10
     7e4:	bf 92       	push	r11
     7e6:	cf 92       	push	r12
     7e8:	df 92       	push	r13
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	ec 01       	movw	r28, r24
     7f8:	6a 01       	movw	r12, r20
     7fa:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     7fc:	28 01       	movw	r4, r16
     7fe:	39 01       	movw	r6, r18
     800:	68 94       	set
     802:	12 f8       	bld	r1, 2
     804:	76 94       	lsr	r7
     806:	67 94       	ror	r6
     808:	57 94       	ror	r5
     80a:	47 94       	ror	r4
     80c:	16 94       	lsr	r1
     80e:	d1 f7       	brne	.-12     	; 0x804 <usart_set_baudrate+0x2e>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
     810:	88 81       	ld	r24, Y
     812:	81 fd       	sbrc	r24, 1
     814:	0e c0       	rjmp	.+28     	; 0x832 <usart_set_baudrate+0x5c>
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
     816:	48 01       	movw	r8, r16
     818:	59 01       	movw	r10, r18
     81a:	07 2e       	mov	r0, r23
     81c:	73 e1       	ldi	r23, 0x13	; 19
     81e:	b6 94       	lsr	r11
     820:	a7 94       	ror	r10
     822:	97 94       	ror	r9
     824:	87 94       	ror	r8
     826:	7a 95       	dec	r23
     828:	d1 f7       	brne	.-12     	; 0x81e <usart_set_baudrate+0x48>
     82a:	70 2d       	mov	r23, r0

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
     82c:	d3 01       	movw	r26, r6
     82e:	c2 01       	movw	r24, r4
     830:	15 c0       	rjmp	.+42     	; 0x85c <usart_set_baudrate+0x86>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;

	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
     832:	d9 01       	movw	r26, r18
     834:	c8 01       	movw	r24, r16
     836:	68 94       	set
     838:	13 f8       	bld	r1, 3
     83a:	b6 95       	lsr	r27
     83c:	a7 95       	ror	r26
     83e:	97 95       	ror	r25
     840:	87 95       	ror	r24
     842:	16 94       	lsr	r1
     844:	d1 f7       	brne	.-12     	; 0x83a <usart_set_baudrate+0x64>
		min_rate /= 2;
     846:	48 01       	movw	r8, r16
     848:	59 01       	movw	r10, r18
     84a:	07 2e       	mov	r0, r23
     84c:	74 e1       	ldi	r23, 0x14	; 20
     84e:	b6 94       	lsr	r11
     850:	a7 94       	ror	r10
     852:	97 94       	ror	r9
     854:	87 94       	ror	r8
     856:	7a 95       	dec	r23
     858:	d1 f7       	brne	.-12     	; 0x84e <usart_set_baudrate+0x78>
     85a:	70 2d       	mov	r23, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     85c:	8c 15       	cp	r24, r12
     85e:	9d 05       	cpc	r25, r13
     860:	ae 05       	cpc	r26, r14
     862:	bf 05       	cpc	r27, r15
     864:	78 f1       	brcs	.+94     	; 0x8c4 <usart_set_baudrate+0xee>
     866:	c8 14       	cp	r12, r8
     868:	d9 04       	cpc	r13, r9
     86a:	ea 04       	cpc	r14, r10
     86c:	fb 04       	cpc	r15, r11
     86e:	60 f1       	brcs	.+88     	; 0x8c8 <usart_set_baudrate+0xf2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
     870:	88 81       	ld	r24, Y
     872:	81 ff       	sbrs	r24, 1
     874:	10 c0       	rjmp	.+32     	; 0x896 <usart_set_baudrate+0xc0>
		baud *= 2;
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
     876:	a7 01       	movw	r20, r14
     878:	96 01       	movw	r18, r12
     87a:	22 0f       	add	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	44 1f       	adc	r20, r20
     880:	55 1f       	adc	r21, r21
     882:	c3 01       	movw	r24, r6
     884:	b2 01       	movw	r22, r4
     886:	0e 94 6d 12 	call	0x24da	; 0x24da <__udivmodsi4>
     88a:	da 01       	movw	r26, r20
     88c:	c9 01       	movw	r24, r18
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	a1 09       	sbc	r26, r1
     892:	b1 09       	sbc	r27, r1
     894:	13 c0       	rjmp	.+38     	; 0x8bc <usart_set_baudrate+0xe6>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
     896:	c9 01       	movw	r24, r18
     898:	b8 01       	movw	r22, r16
     89a:	68 94       	set
     89c:	13 f8       	bld	r1, 3
     89e:	96 95       	lsr	r25
     8a0:	87 95       	ror	r24
     8a2:	77 95       	ror	r23
     8a4:	67 95       	ror	r22
     8a6:	16 94       	lsr	r1
     8a8:	d1 f7       	brne	.-12     	; 0x89e <usart_set_baudrate+0xc8>
     8aa:	a7 01       	movw	r20, r14
     8ac:	96 01       	movw	r18, r12
     8ae:	0e 94 6d 12 	call	0x24da	; 0x24da <__udivmodsi4>
     8b2:	da 01       	movw	r26, r20
     8b4:	c9 01       	movw	r24, r18
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	a1 09       	sbc	r26, r1
     8ba:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
     8bc:	9d 83       	std	Y+5, r25	; 0x05
     8be:	8c 83       	std	Y+4, r24	; 0x04
	return true;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <usart_set_baudrate+0xf4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <usart_set_baudrate+0xf4>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	1f 91       	pop	r17
     8d0:	0f 91       	pop	r16
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	df 90       	pop	r13
     8d8:	cf 90       	pop	r12
     8da:	bf 90       	pop	r11
     8dc:	af 90       	pop	r10
     8de:	9f 90       	pop	r9
     8e0:	8f 90       	pop	r8
     8e2:	7f 90       	pop	r7
     8e4:	6f 90       	pop	r6
     8e6:	5f 90       	pop	r5
     8e8:	4f 90       	pop	r4
     8ea:	08 95       	ret

000008ec <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	ec 01       	movw	r28, r24
     8f6:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USARTA0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
     8f8:	80 3c       	cpi	r24, 0xC0	; 192
     8fa:	91 05       	cpc	r25, r1
     8fc:	21 f4       	brne	.+8      	; 0x906 <usart_init_rs232+0x1a>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     8fe:	62 e0       	ldi	r22, 0x02	; 2
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 dd       	rcall	.-1248   	; 0x424 <sysclk_enable_module>
     904:	06 c0       	rjmp	.+12     	; 0x912 <usart_init_rs232+0x26>
	}
#endif
#ifdef USARTA1
	if ((uintptr_t)usart == (uintptr_t)&UCSR1A) {
     906:	88 3c       	cpi	r24, 0xC8	; 200
     908:	91 05       	cpc	r25, r1
     90a:	19 f4       	brne	.+6      	; 0x912 <usart_init_rs232+0x26>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	89 dd       	rcall	.-1262   	; 0x424 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
     912:	8a 81       	ldd	r24, Y+2	; 0x02
     914:	8f 73       	andi	r24, 0x3F	; 63
     916:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
     918:	f8 01       	movw	r30, r16
     91a:	26 81       	ldd	r18, Z+6	; 0x06
     91c:	35 81       	ldd	r19, Z+5	; 0x05
     91e:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
     920:	9a 81       	ldd	r25, Y+2	; 0x02
     922:	48 2f       	mov	r20, r24
     924:	43 70       	andi	r20, 0x03	; 3
     926:	44 0f       	add	r20, r20
     928:	99 7f       	andi	r25, 0xF9	; 249
     92a:	94 2b       	or	r25, r20
     92c:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
     92e:	99 81       	ldd	r25, Y+1	; 0x01
     930:	84 70       	andi	r24, 0x04	; 4
     932:	88 0f       	add	r24, r24
     934:	88 0f       	add	r24, r24
     936:	9b 7f       	andi	r25, 0xFB	; 251
     938:	89 2b       	or	r24, r25
     93a:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	8f 7c       	andi	r24, 0xCF	; 207
     940:	83 2b       	or	r24, r19
     942:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
     944:	9a 81       	ldd	r25, Y+2	; 0x02
     946:	97 7f       	andi	r25, 0xF7	; 247
     948:	82 2f       	mov	r24, r18
     94a:	88 0f       	add	r24, r24
     94c:	88 0f       	add	r24, r24
     94e:	88 0f       	add	r24, r24
     950:	89 2b       	or	r24, r25
     952:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
     954:	40 81       	ld	r20, Z
     956:	51 81       	ldd	r21, Z+1	; 0x01
     958:	62 81       	ldd	r22, Z+2	; 0x02
     95a:	73 81       	ldd	r23, Z+3	; 0x03
     95c:	00 e4       	ldi	r16, 0x40	; 64
     95e:	12 e4       	ldi	r17, 0x42	; 66
     960:	2f e0       	ldi	r18, 0x0F	; 15
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	ce 01       	movw	r24, r28
     966:	37 df       	rcall	.-402    	; 0x7d6 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
     968:	99 81       	ldd	r25, Y+1	; 0x01
     96a:	98 60       	ori	r25, 0x08	; 8
     96c:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
     96e:	99 81       	ldd	r25, Y+1	; 0x01
     970:	90 61       	ori	r25, 0x10	; 16
     972:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	08 95       	ret

0000097e <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
     97e:	1f 92       	push	r1
     980:	0f 92       	push	r0
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	0f 92       	push	r0
     986:	11 24       	eor	r1, r1
     988:	0b b6       	in	r0, 0x3b	; 59
     98a:	0f 92       	push	r0
     98c:	2f 93       	push	r18
     98e:	3f 93       	push	r19
     990:	4f 93       	push	r20
     992:	5f 93       	push	r21
     994:	6f 93       	push	r22
     996:	7f 93       	push	r23
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
     99c:	af 93       	push	r26
     99e:	bf 93       	push	r27
     9a0:	ef 93       	push	r30
     9a2:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
     9a4:	e0 91 5c 03 	lds	r30, 0x035C	; 0x80035c <tc_tccr1_ovf_callback>
     9a8:	f0 91 5d 03 	lds	r31, 0x035D	; 0x80035d <tc_tccr1_ovf_callback+0x1>
     9ac:	30 97       	sbiw	r30, 0x00	; 0
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
     9b0:	09 95       	icall
	}
}
     9b2:	ff 91       	pop	r31
     9b4:	ef 91       	pop	r30
     9b6:	bf 91       	pop	r27
     9b8:	af 91       	pop	r26
     9ba:	9f 91       	pop	r25
     9bc:	8f 91       	pop	r24
     9be:	7f 91       	pop	r23
     9c0:	6f 91       	pop	r22
     9c2:	5f 91       	pop	r21
     9c4:	4f 91       	pop	r20
     9c6:	3f 91       	pop	r19
     9c8:	2f 91       	pop	r18
     9ca:	0f 90       	pop	r0
     9cc:	0b be       	out	0x3b, r0	; 59
     9ce:	0f 90       	pop	r0
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	0f 90       	pop	r0
     9d4:	1f 90       	pop	r1
     9d6:	18 95       	reti

000009d8 <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	0f 92       	push	r0
     9e0:	11 24       	eor	r1, r1
     9e2:	0b b6       	in	r0, 0x3b	; 59
     9e4:	0f 92       	push	r0
     9e6:	2f 93       	push	r18
     9e8:	3f 93       	push	r19
     9ea:	4f 93       	push	r20
     9ec:	5f 93       	push	r21
     9ee:	6f 93       	push	r22
     9f0:	7f 93       	push	r23
     9f2:	8f 93       	push	r24
     9f4:	9f 93       	push	r25
     9f6:	af 93       	push	r26
     9f8:	bf 93       	push	r27
     9fa:	ef 93       	push	r30
     9fc:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
     9fe:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <tc_tccr1_compa_callback>
     a02:	f0 91 5b 03 	lds	r31, 0x035B	; 0x80035b <tc_tccr1_compa_callback+0x1>
     a06:	30 97       	sbiw	r30, 0x00	; 0
     a08:	09 f0       	breq	.+2      	; 0xa0c <__vector_17+0x34>
		tc_tccr1_compa_callback();
     a0a:	09 95       	icall
	}
}
     a0c:	ff 91       	pop	r31
     a0e:	ef 91       	pop	r30
     a10:	bf 91       	pop	r27
     a12:	af 91       	pop	r26
     a14:	9f 91       	pop	r25
     a16:	8f 91       	pop	r24
     a18:	7f 91       	pop	r23
     a1a:	6f 91       	pop	r22
     a1c:	5f 91       	pop	r21
     a1e:	4f 91       	pop	r20
     a20:	3f 91       	pop	r19
     a22:	2f 91       	pop	r18
     a24:	0f 90       	pop	r0
     a26:	0b be       	out	0x3b, r0	; 59
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	0f 90       	pop	r0
     a2e:	1f 90       	pop	r1
     a30:	18 95       	reti

00000a32 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
     a32:	1f 92       	push	r1
     a34:	0f 92       	push	r0
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	0f 92       	push	r0
     a3a:	11 24       	eor	r1, r1
     a3c:	0b b6       	in	r0, 0x3b	; 59
     a3e:	0f 92       	push	r0
     a40:	2f 93       	push	r18
     a42:	3f 93       	push	r19
     a44:	4f 93       	push	r20
     a46:	5f 93       	push	r21
     a48:	6f 93       	push	r22
     a4a:	7f 93       	push	r23
     a4c:	8f 93       	push	r24
     a4e:	9f 93       	push	r25
     a50:	af 93       	push	r26
     a52:	bf 93       	push	r27
     a54:	ef 93       	push	r30
     a56:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
     a58:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <tc_tccr1_compb_callback>
     a5c:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <tc_tccr1_compb_callback+0x1>
     a60:	30 97       	sbiw	r30, 0x00	; 0
     a62:	09 f0       	breq	.+2      	; 0xa66 <__vector_18+0x34>
		tc_tccr1_compb_callback();
     a64:	09 95       	icall
	}
}
     a66:	ff 91       	pop	r31
     a68:	ef 91       	pop	r30
     a6a:	bf 91       	pop	r27
     a6c:	af 91       	pop	r26
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	7f 91       	pop	r23
     a74:	6f 91       	pop	r22
     a76:	5f 91       	pop	r21
     a78:	4f 91       	pop	r20
     a7a:	3f 91       	pop	r19
     a7c:	2f 91       	pop	r18
     a7e:	0f 90       	pop	r0
     a80:	0b be       	out	0x3b, r0	; 59
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	0f 90       	pop	r0
     a88:	1f 90       	pop	r1
     a8a:	18 95       	reti

00000a8c <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
     a96:	0b b6       	in	r0, 0x3b	; 59
     a98:	0f 92       	push	r0
     a9a:	2f 93       	push	r18
     a9c:	3f 93       	push	r19
     a9e:	4f 93       	push	r20
     aa0:	5f 93       	push	r21
     aa2:	6f 93       	push	r22
     aa4:	7f 93       	push	r23
     aa6:	8f 93       	push	r24
     aa8:	9f 93       	push	r25
     aaa:	af 93       	push	r26
     aac:	bf 93       	push	r27
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
     ab2:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <tc_tccr1_compc_callback>
     ab6:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <tc_tccr1_compc_callback+0x1>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	09 f0       	breq	.+2      	; 0xac0 <__vector_19+0x34>
		tc_tccr1_compc_callback();
     abe:	09 95       	icall
	}
}
     ac0:	ff 91       	pop	r31
     ac2:	ef 91       	pop	r30
     ac4:	bf 91       	pop	r27
     ac6:	af 91       	pop	r26
     ac8:	9f 91       	pop	r25
     aca:	8f 91       	pop	r24
     acc:	7f 91       	pop	r23
     ace:	6f 91       	pop	r22
     ad0:	5f 91       	pop	r21
     ad2:	4f 91       	pop	r20
     ad4:	3f 91       	pop	r19
     ad6:	2f 91       	pop	r18
     ad8:	0f 90       	pop	r0
     ada:	0b be       	out	0x3b, r0	; 59
     adc:	0f 90       	pop	r0
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	0f 90       	pop	r0
     ae2:	1f 90       	pop	r1
     ae4:	18 95       	reti

00000ae6 <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	0b b6       	in	r0, 0x3b	; 59
     af2:	0f 92       	push	r0
     af4:	2f 93       	push	r18
     af6:	3f 93       	push	r19
     af8:	4f 93       	push	r20
     afa:	5f 93       	push	r21
     afc:	6f 93       	push	r22
     afe:	7f 93       	push	r23
     b00:	8f 93       	push	r24
     b02:	9f 93       	push	r25
     b04:	af 93       	push	r26
     b06:	bf 93       	push	r27
     b08:	ef 93       	push	r30
     b0a:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
     b0c:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <tc_tccr3_ovf_callback>
     b10:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <tc_tccr3_ovf_callback+0x1>
     b14:	30 97       	sbiw	r30, 0x00	; 0
     b16:	09 f0       	breq	.+2      	; 0xb1a <__vector_35+0x34>
		tc_tccr3_ovf_callback();
     b18:	09 95       	icall
	}
}
     b1a:	ff 91       	pop	r31
     b1c:	ef 91       	pop	r30
     b1e:	bf 91       	pop	r27
     b20:	af 91       	pop	r26
     b22:	9f 91       	pop	r25
     b24:	8f 91       	pop	r24
     b26:	7f 91       	pop	r23
     b28:	6f 91       	pop	r22
     b2a:	5f 91       	pop	r21
     b2c:	4f 91       	pop	r20
     b2e:	3f 91       	pop	r19
     b30:	2f 91       	pop	r18
     b32:	0f 90       	pop	r0
     b34:	0b be       	out	0x3b, r0	; 59
     b36:	0f 90       	pop	r0
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	0f 90       	pop	r0
     b3c:	1f 90       	pop	r1
     b3e:	18 95       	reti

00000b40 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     b40:	1f 92       	push	r1
     b42:	0f 92       	push	r0
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	0f 92       	push	r0
     b48:	11 24       	eor	r1, r1
     b4a:	0b b6       	in	r0, 0x3b	; 59
     b4c:	0f 92       	push	r0
     b4e:	2f 93       	push	r18
     b50:	3f 93       	push	r19
     b52:	4f 93       	push	r20
     b54:	5f 93       	push	r21
     b56:	6f 93       	push	r22
     b58:	7f 93       	push	r23
     b5a:	8f 93       	push	r24
     b5c:	9f 93       	push	r25
     b5e:	af 93       	push	r26
     b60:	bf 93       	push	r27
     b62:	ef 93       	push	r30
     b64:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
     b66:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <tc_tccr3_compa_callback>
     b6a:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <tc_tccr3_compa_callback+0x1>
     b6e:	30 97       	sbiw	r30, 0x00	; 0
     b70:	09 f0       	breq	.+2      	; 0xb74 <__vector_32+0x34>
		tc_tccr3_compa_callback();
     b72:	09 95       	icall
	}
}
     b74:	ff 91       	pop	r31
     b76:	ef 91       	pop	r30
     b78:	bf 91       	pop	r27
     b7a:	af 91       	pop	r26
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	7f 91       	pop	r23
     b82:	6f 91       	pop	r22
     b84:	5f 91       	pop	r21
     b86:	4f 91       	pop	r20
     b88:	3f 91       	pop	r19
     b8a:	2f 91       	pop	r18
     b8c:	0f 90       	pop	r0
     b8e:	0b be       	out	0x3b, r0	; 59
     b90:	0f 90       	pop	r0
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	0f 90       	pop	r0
     b96:	1f 90       	pop	r1
     b98:	18 95       	reti

00000b9a <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	0b b6       	in	r0, 0x3b	; 59
     ba6:	0f 92       	push	r0
     ba8:	2f 93       	push	r18
     baa:	3f 93       	push	r19
     bac:	4f 93       	push	r20
     bae:	5f 93       	push	r21
     bb0:	6f 93       	push	r22
     bb2:	7f 93       	push	r23
     bb4:	8f 93       	push	r24
     bb6:	9f 93       	push	r25
     bb8:	af 93       	push	r26
     bba:	bf 93       	push	r27
     bbc:	ef 93       	push	r30
     bbe:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
     bc0:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <tc_tccr3_compb_callback>
     bc4:	f0 91 51 03 	lds	r31, 0x0351	; 0x800351 <tc_tccr3_compb_callback+0x1>
     bc8:	30 97       	sbiw	r30, 0x00	; 0
     bca:	09 f0       	breq	.+2      	; 0xbce <__vector_33+0x34>
		tc_tccr3_compb_callback();
     bcc:	09 95       	icall
	}
}
     bce:	ff 91       	pop	r31
     bd0:	ef 91       	pop	r30
     bd2:	bf 91       	pop	r27
     bd4:	af 91       	pop	r26
     bd6:	9f 91       	pop	r25
     bd8:	8f 91       	pop	r24
     bda:	7f 91       	pop	r23
     bdc:	6f 91       	pop	r22
     bde:	5f 91       	pop	r21
     be0:	4f 91       	pop	r20
     be2:	3f 91       	pop	r19
     be4:	2f 91       	pop	r18
     be6:	0f 90       	pop	r0
     be8:	0b be       	out	0x3b, r0	; 59
     bea:	0f 90       	pop	r0
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	0f 90       	pop	r0
     bf0:	1f 90       	pop	r1
     bf2:	18 95       	reti

00000bf4 <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
     bf4:	1f 92       	push	r1
     bf6:	0f 92       	push	r0
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	0f 92       	push	r0
     bfc:	11 24       	eor	r1, r1
     bfe:	0b b6       	in	r0, 0x3b	; 59
     c00:	0f 92       	push	r0
     c02:	2f 93       	push	r18
     c04:	3f 93       	push	r19
     c06:	4f 93       	push	r20
     c08:	5f 93       	push	r21
     c0a:	6f 93       	push	r22
     c0c:	7f 93       	push	r23
     c0e:	8f 93       	push	r24
     c10:	9f 93       	push	r25
     c12:	af 93       	push	r26
     c14:	bf 93       	push	r27
     c16:	ef 93       	push	r30
     c18:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
     c1a:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <tc_tccr3_compc_callback>
     c1e:	f0 91 4f 03 	lds	r31, 0x034F	; 0x80034f <tc_tccr3_compc_callback+0x1>
     c22:	30 97       	sbiw	r30, 0x00	; 0
     c24:	09 f0       	breq	.+2      	; 0xc28 <__vector_34+0x34>
		tc_tccr3_compc_callback();
     c26:	09 95       	icall
	}
}
     c28:	ff 91       	pop	r31
     c2a:	ef 91       	pop	r30
     c2c:	bf 91       	pop	r27
     c2e:	af 91       	pop	r26
     c30:	9f 91       	pop	r25
     c32:	8f 91       	pop	r24
     c34:	7f 91       	pop	r23
     c36:	6f 91       	pop	r22
     c38:	5f 91       	pop	r21
     c3a:	4f 91       	pop	r20
     c3c:	3f 91       	pop	r19
     c3e:	2f 91       	pop	r18
     c40:	0f 90       	pop	r0
     c42:	0b be       	out	0x3b, r0	; 59
     c44:	0f 90       	pop	r0
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	0f 90       	pop	r0
     c4a:	1f 90       	pop	r1
     c4c:	18 95       	reti

00000c4e <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
     c4e:	1f 92       	push	r1
     c50:	0f 92       	push	r0
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	0f 92       	push	r0
     c56:	11 24       	eor	r1, r1
     c58:	0b b6       	in	r0, 0x3b	; 59
     c5a:	0f 92       	push	r0
     c5c:	2f 93       	push	r18
     c5e:	3f 93       	push	r19
     c60:	4f 93       	push	r20
     c62:	5f 93       	push	r21
     c64:	6f 93       	push	r22
     c66:	7f 93       	push	r23
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	af 93       	push	r26
     c6e:	bf 93       	push	r27
     c70:	ef 93       	push	r30
     c72:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
     c74:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <tc_tccr4_ovf_callback>
     c78:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <tc_tccr4_ovf_callback+0x1>
     c7c:	30 97       	sbiw	r30, 0x00	; 0
     c7e:	09 f0       	breq	.+2      	; 0xc82 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
     c80:	09 95       	icall
	}
}
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	0f 90       	pop	r0
     c9c:	0b be       	out	0x3b, r0	; 59
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	0b b6       	in	r0, 0x3b	; 59
     cb4:	0f 92       	push	r0
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
     cce:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <tc_tccr4_compa_callback>
     cd2:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <tc_tccr4_compa_callback+0x1>
     cd6:	30 97       	sbiw	r30, 0x00	; 0
     cd8:	09 f0       	breq	.+2      	; 0xcdc <__vector_42+0x34>
		tc_tccr4_compa_callback();
     cda:	09 95       	icall
	}
}
     cdc:	ff 91       	pop	r31
     cde:	ef 91       	pop	r30
     ce0:	bf 91       	pop	r27
     ce2:	af 91       	pop	r26
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	7f 91       	pop	r23
     cea:	6f 91       	pop	r22
     cec:	5f 91       	pop	r21
     cee:	4f 91       	pop	r20
     cf0:	3f 91       	pop	r19
     cf2:	2f 91       	pop	r18
     cf4:	0f 90       	pop	r0
     cf6:	0b be       	out	0x3b, r0	; 59
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	0f 92       	push	r0
     d0a:	11 24       	eor	r1, r1
     d0c:	0b b6       	in	r0, 0x3b	; 59
     d0e:	0f 92       	push	r0
     d10:	2f 93       	push	r18
     d12:	3f 93       	push	r19
     d14:	4f 93       	push	r20
     d16:	5f 93       	push	r21
     d18:	6f 93       	push	r22
     d1a:	7f 93       	push	r23
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	af 93       	push	r26
     d22:	bf 93       	push	r27
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
     d28:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <tc_tccr4_compb_callback>
     d2c:	f0 91 49 03 	lds	r31, 0x0349	; 0x800349 <tc_tccr4_compb_callback+0x1>
     d30:	30 97       	sbiw	r30, 0x00	; 0
     d32:	09 f0       	breq	.+2      	; 0xd36 <__vector_43+0x34>
		tc_tccr4_compb_callback();
     d34:	09 95       	icall
	}
}
     d36:	ff 91       	pop	r31
     d38:	ef 91       	pop	r30
     d3a:	bf 91       	pop	r27
     d3c:	af 91       	pop	r26
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	7f 91       	pop	r23
     d44:	6f 91       	pop	r22
     d46:	5f 91       	pop	r21
     d48:	4f 91       	pop	r20
     d4a:	3f 91       	pop	r19
     d4c:	2f 91       	pop	r18
     d4e:	0f 90       	pop	r0
     d50:	0b be       	out	0x3b, r0	; 59
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	0f 90       	pop	r0
     d58:	1f 90       	pop	r1
     d5a:	18 95       	reti

00000d5c <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	0b b6       	in	r0, 0x3b	; 59
     d68:	0f 92       	push	r0
     d6a:	2f 93       	push	r18
     d6c:	3f 93       	push	r19
     d6e:	4f 93       	push	r20
     d70:	5f 93       	push	r21
     d72:	6f 93       	push	r22
     d74:	7f 93       	push	r23
     d76:	8f 93       	push	r24
     d78:	9f 93       	push	r25
     d7a:	af 93       	push	r26
     d7c:	bf 93       	push	r27
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
     d82:	e0 91 46 03 	lds	r30, 0x0346	; 0x800346 <tc_tccr4_compc_callback>
     d86:	f0 91 47 03 	lds	r31, 0x0347	; 0x800347 <tc_tccr4_compc_callback+0x1>
     d8a:	30 97       	sbiw	r30, 0x00	; 0
     d8c:	09 f0       	breq	.+2      	; 0xd90 <__vector_44+0x34>
		tc_tccr4_compc_callback();
     d8e:	09 95       	icall
	}
}
     d90:	ff 91       	pop	r31
     d92:	ef 91       	pop	r30
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	0f 90       	pop	r0
     daa:	0b be       	out	0x3b, r0	; 59
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	0f 90       	pop	r0
     db2:	1f 90       	pop	r1
     db4:	18 95       	reti

00000db6 <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
     dc0:	0b b6       	in	r0, 0x3b	; 59
     dc2:	0f 92       	push	r0
     dc4:	2f 93       	push	r18
     dc6:	3f 93       	push	r19
     dc8:	4f 93       	push	r20
     dca:	5f 93       	push	r21
     dcc:	6f 93       	push	r22
     dce:	7f 93       	push	r23
     dd0:	8f 93       	push	r24
     dd2:	9f 93       	push	r25
     dd4:	af 93       	push	r26
     dd6:	bf 93       	push	r27
     dd8:	ef 93       	push	r30
     dda:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
     ddc:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <tc_tccr5_ovf_callback>
     de0:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <tc_tccr5_ovf_callback+0x1>
     de4:	30 97       	sbiw	r30, 0x00	; 0
     de6:	09 f0       	breq	.+2      	; 0xdea <__vector_50+0x34>
		tc_tccr5_ovf_callback();
     de8:	09 95       	icall
	}
}
     dea:	ff 91       	pop	r31
     dec:	ef 91       	pop	r30
     dee:	bf 91       	pop	r27
     df0:	af 91       	pop	r26
     df2:	9f 91       	pop	r25
     df4:	8f 91       	pop	r24
     df6:	7f 91       	pop	r23
     df8:	6f 91       	pop	r22
     dfa:	5f 91       	pop	r21
     dfc:	4f 91       	pop	r20
     dfe:	3f 91       	pop	r19
     e00:	2f 91       	pop	r18
     e02:	0f 90       	pop	r0
     e04:	0b be       	out	0x3b, r0	; 59
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
     e10:	1f 92       	push	r1
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	0f 92       	push	r0
     e18:	11 24       	eor	r1, r1
     e1a:	0b b6       	in	r0, 0x3b	; 59
     e1c:	0f 92       	push	r0
     e1e:	2f 93       	push	r18
     e20:	3f 93       	push	r19
     e22:	4f 93       	push	r20
     e24:	5f 93       	push	r21
     e26:	6f 93       	push	r22
     e28:	7f 93       	push	r23
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
     e2e:	af 93       	push	r26
     e30:	bf 93       	push	r27
     e32:	ef 93       	push	r30
     e34:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
     e36:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <tc_tccr5_compa_callback>
     e3a:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <tc_tccr5_compa_callback+0x1>
     e3e:	30 97       	sbiw	r30, 0x00	; 0
     e40:	09 f0       	breq	.+2      	; 0xe44 <__vector_47+0x34>
		tc_tccr5_compa_callback();
     e42:	09 95       	icall
	}
}
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	bf 91       	pop	r27
     e4a:	af 91       	pop	r26
     e4c:	9f 91       	pop	r25
     e4e:	8f 91       	pop	r24
     e50:	7f 91       	pop	r23
     e52:	6f 91       	pop	r22
     e54:	5f 91       	pop	r21
     e56:	4f 91       	pop	r20
     e58:	3f 91       	pop	r19
     e5a:	2f 91       	pop	r18
     e5c:	0f 90       	pop	r0
     e5e:	0b be       	out	0x3b, r0	; 59
     e60:	0f 90       	pop	r0
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	0f 90       	pop	r0
     e66:	1f 90       	pop	r1
     e68:	18 95       	reti

00000e6a <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
     e6a:	1f 92       	push	r1
     e6c:	0f 92       	push	r0
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	0f 92       	push	r0
     e72:	11 24       	eor	r1, r1
     e74:	0b b6       	in	r0, 0x3b	; 59
     e76:	0f 92       	push	r0
     e78:	2f 93       	push	r18
     e7a:	3f 93       	push	r19
     e7c:	4f 93       	push	r20
     e7e:	5f 93       	push	r21
     e80:	6f 93       	push	r22
     e82:	7f 93       	push	r23
     e84:	8f 93       	push	r24
     e86:	9f 93       	push	r25
     e88:	af 93       	push	r26
     e8a:	bf 93       	push	r27
     e8c:	ef 93       	push	r30
     e8e:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
     e90:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <tc_tccr5_compb_callback>
     e94:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <tc_tccr5_compb_callback+0x1>
     e98:	30 97       	sbiw	r30, 0x00	; 0
     e9a:	09 f0       	breq	.+2      	; 0xe9e <__vector_48+0x34>
		tc_tccr5_compb_callback();
     e9c:	09 95       	icall
	}
}
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	0b be       	out	0x3b, r0	; 59
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	0f 90       	pop	r0
     ec0:	1f 90       	pop	r1
     ec2:	18 95       	reti

00000ec4 <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
     ec4:	1f 92       	push	r1
     ec6:	0f 92       	push	r0
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	0f 92       	push	r0
     ecc:	11 24       	eor	r1, r1
     ece:	0b b6       	in	r0, 0x3b	; 59
     ed0:	0f 92       	push	r0
     ed2:	2f 93       	push	r18
     ed4:	3f 93       	push	r19
     ed6:	4f 93       	push	r20
     ed8:	5f 93       	push	r21
     eda:	6f 93       	push	r22
     edc:	7f 93       	push	r23
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
     ee2:	af 93       	push	r26
     ee4:	bf 93       	push	r27
     ee6:	ef 93       	push	r30
     ee8:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
     eea:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <tc_tccr5_compc_callback>
     eee:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <tc_tccr5_compc_callback+0x1>
     ef2:	30 97       	sbiw	r30, 0x00	; 0
     ef4:	09 f0       	breq	.+2      	; 0xef8 <__vector_49+0x34>
		tc_tccr5_compc_callback();
     ef6:	09 95       	icall
	}
}
     ef8:	ff 91       	pop	r31
     efa:	ef 91       	pop	r30
     efc:	bf 91       	pop	r27
     efe:	af 91       	pop	r26
     f00:	9f 91       	pop	r25
     f02:	8f 91       	pop	r24
     f04:	7f 91       	pop	r23
     f06:	6f 91       	pop	r22
     f08:	5f 91       	pop	r21
     f0a:	4f 91       	pop	r20
     f0c:	3f 91       	pop	r19
     f0e:	2f 91       	pop	r18
     f10:	0f 90       	pop	r0
     f12:	0b be       	out	0x3b, r0	; 59
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <tc_enable>:

void tc_enable(volatile void *tc)
{
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	1f 92       	push	r1
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f2a:	2f b7       	in	r18, 0x3f	; 63
     f2c:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     f2e:	f8 94       	cli
	return flags;
     f30:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	09 f4       	brne	.+2      	; 0xf38 <tc_enable+0x1a>
     f36:	57 c0       	rjmp	.+174    	; 0xfe6 <tc_enable+0xc8>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
     f38:	88 37       	cpi	r24, 0x78	; 120
     f3a:	91 05       	cpc	r25, r1
     f3c:	39 f4       	brne	.+14     	; 0xf4c <tc_enable+0x2e>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	70 da       	rcall	.-2848   	; 0x424 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
     f44:	60 e1       	ldi	r22, 0x10	; 16
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	6d da       	rcall	.-2854   	; 0x424 <sysclk_enable_module>
     f4a:	4d c0       	rjmp	.+154    	; 0xfe6 <tc_enable+0xc8>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
     f4c:	80 3c       	cpi	r24, 0xC0	; 192
     f4e:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     f50:	21 f4       	brne	.+8      	; 0xf5a <tc_enable+0x3c>
     f52:	62 e0       	ldi	r22, 0x02	; 2
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	66 da       	rcall	.-2868   	; 0x424 <sysclk_enable_module>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
     f58:	46 c0       	rjmp	.+140    	; 0xfe6 <tc_enable+0xc8>
     f5a:	8c 34       	cpi	r24, 0x4C	; 76
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
     f5c:	91 05       	cpc	r25, r1
     f5e:	21 f4       	brne	.+8      	; 0xf68 <tc_enable+0x4a>
     f60:	64 e0       	ldi	r22, 0x04	; 4
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	5f da       	rcall	.-2882   	; 0x424 <sysclk_enable_module>
	}
#endif

	else if (module == &TCCR1A) {
     f66:	3f c0       	rjmp	.+126    	; 0xfe6 <tc_enable+0xc8>
     f68:	80 38       	cpi	r24, 0x80	; 128
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
     f6a:	91 05       	cpc	r25, r1
     f6c:	21 f4       	brne	.+8      	; 0xf76 <tc_enable+0x58>
     f6e:	68 e0       	ldi	r22, 0x08	; 8
     f70:	80 e0       	ldi	r24, 0x00	; 0
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
     f72:	58 da       	rcall	.-2896   	; 0x424 <sysclk_enable_module>
     f74:	38 c0       	rjmp	.+112    	; 0xfe6 <tc_enable+0xc8>
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
     f76:	84 34       	cpi	r24, 0x44	; 68
     f78:	91 05       	cpc	r25, r1
     f7a:	21 f4       	brne	.+8      	; 0xf84 <tc_enable+0x66>
     f7c:	60 e2       	ldi	r22, 0x20	; 32
	} else if (module == &TCCR2A) {
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	51 da       	rcall	.-2910   	; 0x424 <sysclk_enable_module>
     f82:	31 c0       	rjmp	.+98     	; 0xfe6 <tc_enable+0xc8>
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
     f84:	80 3b       	cpi	r24, 0xB0	; 176
     f86:	91 05       	cpc	r25, r1
     f88:	21 f4       	brne	.+8      	; 0xf92 <tc_enable+0x74>
     f8a:	60 e4       	ldi	r22, 0x40	; 64
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	4a da       	rcall	.-2924   	; 0x424 <sysclk_enable_module>
     f90:	2a c0       	rjmp	.+84     	; 0xfe6 <tc_enable+0xc8>
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
     f92:	88 3b       	cpi	r24, 0xB8	; 184
     f94:	91 05       	cpc	r25, r1
     f96:	21 f4       	brne	.+8      	; 0xfa0 <tc_enable+0x82>
     f98:	60 e8       	ldi	r22, 0x80	; 128
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	43 da       	rcall	.-2938   	; 0x424 <sysclk_enable_module>
     f9e:	23 c0       	rjmp	.+70     	; 0xfe6 <tc_enable+0xc8>
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
     fa0:	88 3c       	cpi	r24, 0xC8	; 200
     fa2:	91 05       	cpc	r25, r1
     fa4:	21 f4       	brne	.+8      	; 0xfae <tc_enable+0x90>
     fa6:	61 e0       	ldi	r22, 0x01	; 1
	} else if (module == &TCCR3A) {
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	3c da       	rcall	.-2952   	; 0x424 <sysclk_enable_module>
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
     fac:	1c c0       	rjmp	.+56     	; 0xfe6 <tc_enable+0xc8>
     fae:	80 39       	cpi	r24, 0x90	; 144
     fb0:	91 05       	cpc	r25, r1
     fb2:	21 f4       	brne	.+8      	; 0xfbc <tc_enable+0x9e>
	} else if (module == &TCCR4A) {
     fb4:	68 e0       	ldi	r22, 0x08	; 8
     fb6:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
     fb8:	35 da       	rcall	.-2966   	; 0x424 <sysclk_enable_module>
     fba:	15 c0       	rjmp	.+42     	; 0xfe6 <tc_enable+0xc8>
     fbc:	80 3a       	cpi	r24, 0xA0	; 160
     fbe:	91 05       	cpc	r25, r1
	} else if (module == &TCCR5A) {
     fc0:	21 f4       	brne	.+8      	; 0xfca <tc_enable+0xac>
     fc2:	60 e1       	ldi	r22, 0x10	; 16
     fc4:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
     fc6:	2e da       	rcall	.-2980   	; 0x424 <sysclk_enable_module>
     fc8:	0e c0       	rjmp	.+28     	; 0xfe6 <tc_enable+0xc8>
     fca:	80 32       	cpi	r24, 0x20	; 32
     fcc:	21 e0       	ldi	r18, 0x01	; 1
     fce:	92 07       	cpc	r25, r18
	} else if (module == &TRX_CTRL_0) {
     fd0:	21 f4       	brne	.+8      	; 0xfda <tc_enable+0xbc>
     fd2:	60 e2       	ldi	r22, 0x20	; 32
     fd4:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
     fd6:	26 da       	rcall	.-2996   	; 0x424 <sysclk_enable_module>
     fd8:	06 c0       	rjmp	.+12     	; 0xfe6 <tc_enable+0xc8>
     fda:	83 34       	cpi	r24, 0x43	; 67
     fdc:	91 40       	sbci	r25, 0x01	; 1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fde:	19 f4       	brne	.+6      	; 0xfe6 <tc_enable+0xc8>
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
     fe0:	60 e4       	ldi	r22, 0x40	; 64
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	1f da       	rcall	.-3010   	; 0x424 <sysclk_enable_module>
     fe6:	1f bf       	out	0x3f, r17	; 63
     fe8:	0f 90       	pop	r0
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	08 95       	ret

00000ff2 <tc_disable>:

void tc_disable(volatile void *tc)
{
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	1f 92       	push	r1
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ffe:	2f b7       	in	r18, 0x3f	; 63
    1000:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    1002:	f8 94       	cli
	return flags;
    1004:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	09 f4       	brne	.+2      	; 0x100c <tc_disable+0x1a>
    100a:	57 c0       	rjmp	.+174    	; 0x10ba <tc_disable+0xc8>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
    100c:	88 37       	cpi	r24, 0x78	; 120
    100e:	91 05       	cpc	r25, r1
    1010:	39 f4       	brne	.+14     	; 0x1020 <tc_disable+0x2e>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	1e da       	rcall	.-3012   	; 0x454 <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
    1018:	60 e1       	ldi	r22, 0x10	; 16
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	1b da       	rcall	.-3018   	; 0x454 <sysclk_disable_module>
    101e:	4d c0       	rjmp	.+154    	; 0x10ba <tc_disable+0xc8>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
    1020:	80 3c       	cpi	r24, 0xC0	; 192
    1022:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
    1024:	21 f4       	brne	.+8      	; 0x102e <tc_disable+0x3c>
    1026:	62 e0       	ldi	r22, 0x02	; 2
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	14 da       	rcall	.-3032   	; 0x454 <sysclk_disable_module>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
    102c:	46 c0       	rjmp	.+140    	; 0x10ba <tc_disable+0xc8>
    102e:	8c 34       	cpi	r24, 0x4C	; 76
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
    1030:	91 05       	cpc	r25, r1
    1032:	21 f4       	brne	.+8      	; 0x103c <tc_disable+0x4a>
    1034:	64 e0       	ldi	r22, 0x04	; 4
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	0d da       	rcall	.-3046   	; 0x454 <sysclk_disable_module>
	}
#endif
	else if (module == &TCCR1A) {
    103a:	3f c0       	rjmp	.+126    	; 0x10ba <tc_disable+0xc8>
    103c:	80 38       	cpi	r24, 0x80	; 128
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
    103e:	91 05       	cpc	r25, r1
    1040:	21 f4       	brne	.+8      	; 0x104a <tc_disable+0x58>
    1042:	68 e0       	ldi	r22, 0x08	; 8
    1044:	80 e0       	ldi	r24, 0x00	; 0
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
    1046:	06 da       	rcall	.-3060   	; 0x454 <sysclk_disable_module>
    1048:	38 c0       	rjmp	.+112    	; 0x10ba <tc_disable+0xc8>
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
    104a:	84 34       	cpi	r24, 0x44	; 68
    104c:	91 05       	cpc	r25, r1
    104e:	21 f4       	brne	.+8      	; 0x1058 <tc_disable+0x66>
    1050:	60 e2       	ldi	r22, 0x20	; 32
	} else if (module == &TCCR2A) {
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	ff d9       	rcall	.-3074   	; 0x454 <sysclk_disable_module>
    1056:	31 c0       	rjmp	.+98     	; 0x10ba <tc_disable+0xc8>
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
    1058:	80 3b       	cpi	r24, 0xB0	; 176
    105a:	91 05       	cpc	r25, r1
    105c:	21 f4       	brne	.+8      	; 0x1066 <tc_disable+0x74>
    105e:	60 e4       	ldi	r22, 0x40	; 64
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	f8 d9       	rcall	.-3088   	; 0x454 <sysclk_disable_module>
    1064:	2a c0       	rjmp	.+84     	; 0x10ba <tc_disable+0xc8>
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
    1066:	88 3b       	cpi	r24, 0xB8	; 184
    1068:	91 05       	cpc	r25, r1
    106a:	21 f4       	brne	.+8      	; 0x1074 <tc_disable+0x82>
    106c:	60 e8       	ldi	r22, 0x80	; 128
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	f1 d9       	rcall	.-3102   	; 0x454 <sysclk_disable_module>
    1072:	23 c0       	rjmp	.+70     	; 0x10ba <tc_disable+0xc8>
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
    1074:	88 3c       	cpi	r24, 0xC8	; 200
    1076:	91 05       	cpc	r25, r1
    1078:	21 f4       	brne	.+8      	; 0x1082 <tc_disable+0x90>
    107a:	61 e0       	ldi	r22, 0x01	; 1
	} else if (module == &TCCR3A) {
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	ea d9       	rcall	.-3116   	; 0x454 <sysclk_disable_module>
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
    1080:	1c c0       	rjmp	.+56     	; 0x10ba <tc_disable+0xc8>
    1082:	80 39       	cpi	r24, 0x90	; 144
    1084:	91 05       	cpc	r25, r1
    1086:	21 f4       	brne	.+8      	; 0x1090 <tc_disable+0x9e>
	} else if (module == &TCCR4A) {
    1088:	68 e0       	ldi	r22, 0x08	; 8
    108a:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
    108c:	e3 d9       	rcall	.-3130   	; 0x454 <sysclk_disable_module>
    108e:	15 c0       	rjmp	.+42     	; 0x10ba <tc_disable+0xc8>
    1090:	80 3a       	cpi	r24, 0xA0	; 160
    1092:	91 05       	cpc	r25, r1
	} else if (module == &TCCR5A) {
    1094:	21 f4       	brne	.+8      	; 0x109e <tc_disable+0xac>
    1096:	60 e1       	ldi	r22, 0x10	; 16
    1098:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
    109a:	dc d9       	rcall	.-3144   	; 0x454 <sysclk_disable_module>
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <tc_disable+0xc8>
    109e:	80 32       	cpi	r24, 0x20	; 32
    10a0:	21 e0       	ldi	r18, 0x01	; 1
    10a2:	92 07       	cpc	r25, r18
	} else if (module == &TRX_CTRL_0) {
    10a4:	21 f4       	brne	.+8      	; 0x10ae <tc_disable+0xbc>
    10a6:	60 e2       	ldi	r22, 0x20	; 32
    10a8:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
    10aa:	d4 d9       	rcall	.-3160   	; 0x454 <sysclk_disable_module>
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <tc_disable+0xc8>
    10ae:	83 34       	cpi	r24, 0x43	; 67
    10b0:	91 40       	sbci	r25, 0x01	; 1
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10b2:	19 f4       	brne	.+6      	; 0x10ba <tc_disable+0xc8>
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
    10b4:	60 e4       	ldi	r22, 0x40	; 64
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	cd d9       	rcall	.-3174   	; 0x454 <sysclk_disable_module>
    10ba:	1f bf       	out	0x3f, r17	; 63
    10bc:	0f 90       	pop	r0
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	08 95       	ret

000010c6 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    10c6:	80 38       	cpi	r24, 0x80	; 128
    10c8:	91 05       	cpc	r25, r1
    10ca:	29 f4       	brne	.+10     	; 0x10d6 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
    10cc:	70 93 5d 03 	sts	0x035D, r23	; 0x80035d <tc_tccr1_ovf_callback+0x1>
    10d0:	60 93 5c 03 	sts	0x035C, r22	; 0x80035c <tc_tccr1_ovf_callback>
    10d4:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    10d6:	80 39       	cpi	r24, 0x90	; 144
    10d8:	91 05       	cpc	r25, r1
    10da:	29 f4       	brne	.+10     	; 0x10e6 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
    10dc:	70 93 55 03 	sts	0x0355, r23	; 0x800355 <tc_tccr3_ovf_callback+0x1>
    10e0:	60 93 54 03 	sts	0x0354, r22	; 0x800354 <tc_tccr3_ovf_callback>
    10e4:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    10e6:	80 3a       	cpi	r24, 0xA0	; 160
    10e8:	91 05       	cpc	r25, r1
    10ea:	29 f4       	brne	.+10     	; 0x10f6 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
    10ec:	70 93 4d 03 	sts	0x034D, r23	; 0x80034d <tc_tccr4_ovf_callback+0x1>
    10f0:	60 93 4c 03 	sts	0x034C, r22	; 0x80034c <tc_tccr4_ovf_callback>
    10f4:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    10f6:	80 32       	cpi	r24, 0x20	; 32
    10f8:	91 40       	sbci	r25, 0x01	; 1
    10fa:	21 f4       	brne	.+8      	; 0x1104 <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
    10fc:	70 93 45 03 	sts	0x0345, r23	; 0x800345 <tc_tccr5_ovf_callback+0x1>
    1100:	60 93 44 03 	sts	0x0344, r22	; 0x800344 <tc_tccr5_ovf_callback>
    1104:	08 95       	ret

00001106 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
    1106:	80 38       	cpi	r24, 0x80	; 128
    1108:	91 05       	cpc	r25, r1
    110a:	29 f4       	brne	.+10     	; 0x1116 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
    110c:	70 93 5b 03 	sts	0x035B, r23	; 0x80035b <tc_tccr1_compa_callback+0x1>
    1110:	60 93 5a 03 	sts	0x035A, r22	; 0x80035a <tc_tccr1_compa_callback>
    1114:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
    1116:	80 39       	cpi	r24, 0x90	; 144
    1118:	91 05       	cpc	r25, r1
    111a:	29 f4       	brne	.+10     	; 0x1126 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
    111c:	70 93 53 03 	sts	0x0353, r23	; 0x800353 <tc_tccr3_compa_callback+0x1>
    1120:	60 93 52 03 	sts	0x0352, r22	; 0x800352 <tc_tccr3_compa_callback>
    1124:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
    1126:	80 3a       	cpi	r24, 0xA0	; 160
    1128:	91 05       	cpc	r25, r1
    112a:	29 f4       	brne	.+10     	; 0x1136 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
    112c:	70 93 4b 03 	sts	0x034B, r23	; 0x80034b <tc_tccr4_compa_callback+0x1>
    1130:	60 93 4a 03 	sts	0x034A, r22	; 0x80034a <tc_tccr4_compa_callback>
    1134:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
    1136:	80 32       	cpi	r24, 0x20	; 32
    1138:	91 40       	sbci	r25, 0x01	; 1
    113a:	21 f4       	brne	.+8      	; 0x1144 <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
    113c:	70 93 43 03 	sts	0x0343, r23	; 0x800343 <tc_tccr5_compa_callback+0x1>
    1140:	60 93 42 03 	sts	0x0342, r22	; 0x800342 <tc_tccr5_compa_callback>
    1144:	08 95       	ret

00001146 <sal_init>:
 * @brief Initialization of SAL.
 *
 * This functions initializes the SAL.
 */
void sal_init(void)
{
    1146:	08 95       	ret

00001148 <tc_ovf_callback>:
}

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
    1148:	b4 c8       	rjmp	.-3736   	; 0x2b2 <tmr_ovf_callback>
    114a:	08 95       	ret

0000114c <tc_cca_callback>:
    114c:	e9 c8       	rjmp	.-3630   	; 0x320 <tmr_cca_callback>
    114e:	08 95       	ret

00001150 <tmr_read_count>:
    1150:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1154:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1158:	08 95       	ret

0000115a <tmr_disable_cc_interrupt>:
    115a:	ef e6       	ldi	r30, 0x6F	; 111
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	8d 7f       	andi	r24, 0xFD	; 253
    1162:	80 83       	st	Z, r24
    1164:	b1 9a       	sbi	0x16, 1	; 22
    1166:	08 95       	ret

00001168 <tmr_enable_cc_interrupt>:
    1168:	b1 9a       	sbi	0x16, 1	; 22
    116a:	ef e6       	ldi	r30, 0x6F	; 111
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	82 60       	ori	r24, 0x02	; 2
    1172:	80 83       	st	Z, r24
    1174:	08 95       	ret

00001176 <tmr_disable_ovf_interrupt>:
    1176:	ef e6       	ldi	r30, 0x6F	; 111
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	81 60       	ori	r24, 0x01	; 1
    117e:	80 83       	st	Z, r24
    1180:	b0 9a       	sbi	0x16, 0	; 22
    1182:	08 95       	ret

00001184 <tmr_stop>:
    1184:	80 e8       	ldi	r24, 0x80	; 128
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	34 cf       	rjmp	.-408    	; 0xff2 <tc_disable>
    118a:	08 95       	ret

0000118c <tmr_write_cmpreg>:
    118c:	e9 e8       	ldi	r30, 0x89	; 137
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	20 81       	ld	r18, Z
    1192:	92 2b       	or	r25, r18
    1194:	90 83       	st	Z, r25
    1196:	e8 e8       	ldi	r30, 0x88	; 136
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	90 81       	ld	r25, Z
    119c:	89 2b       	or	r24, r25
    119e:	80 83       	st	Z, r24
    11a0:	08 95       	ret

000011a2 <save_cpu_interrupt>:
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	1f 92       	push	r1
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	8f b7       	in	r24, 0x3f	; 63
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	f8 94       	cli
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	0f 90       	pop	r0
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <restore_cpu_interrupt>:
    11bc:	8f bf       	out	0x3f, r24	; 63
    11be:	08 95       	ret

000011c0 <tmr_init>:
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	80 e8       	ldi	r24, 0x80	; 128
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	aa de       	rcall	.-684    	; 0xf1e <tc_enable>
    11ca:	64 ea       	ldi	r22, 0xA4	; 164
    11cc:	78 e0       	ldi	r23, 0x08	; 8
    11ce:	80 e8       	ldi	r24, 0x80	; 128
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	79 df       	rcall	.-270    	; 0x10c6 <tc_set_overflow_interrupt_callback>
    11d4:	cf e6       	ldi	r28, 0x6F	; 111
    11d6:	d0 e0       	ldi	r29, 0x00	; 0
    11d8:	88 81       	ld	r24, Y
    11da:	81 60       	ori	r24, 0x01	; 1
    11dc:	88 83       	st	Y, r24
    11de:	66 ea       	ldi	r22, 0xA6	; 166
    11e0:	78 e0       	ldi	r23, 0x08	; 8
    11e2:	80 e8       	ldi	r24, 0x80	; 128
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	8f df       	rcall	.-226    	; 0x1106 <tc_set_compa_interrupt_callback>
    11e8:	88 81       	ld	r24, Y
    11ea:	8d 7f       	andi	r24, 0xFD	; 253
    11ec:	88 83       	st	Y, r24
    11ee:	e1 e8       	ldi	r30, 0x81	; 129
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	80 83       	st	Z, r24
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <SYS_Init>:
{
	SYS_TimerInit();
#if SYS_SECURITY_MODE == 0
	sal_init();
#endif
	PHY_Init();
    1200:	76 d0       	rcall	.+236    	; 0x12ee <SYS_TimerInit>
    1202:	a1 df       	rcall	.-190    	; 0x1146 <sal_init>
	NWK_Init();
    1204:	36 d1       	rcall	.+620    	; 0x1472 <PHY_Init>
    1206:	21 c2       	rjmp	.+1090   	; 0x164a <NWK_Init>
    1208:	08 95       	ret

0000120a <SYS_TaskHandler>:
    120a:	a4 d1       	rcall	.+840    	; 0x1554 <PHY_TaskHandler>
    120c:	49 d2       	rcall	.+1170   	; 0x16a0 <NWK_TaskHandler>
    120e:	a4 c0       	rjmp	.+328    	; 0x1358 <SYS_TimerTaskHandler>
    1210:	08 95       	ret

00001212 <placeTimer>:
			break;
		}

		prev = t;
	}
}
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	ec 01       	movw	r28, r24
    121c:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <timers>
    1220:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <timers+0x1>
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	09 f4       	brne	.+2      	; 0x122a <placeTimer+0x18>
    1228:	45 c0       	rjmp	.+138    	; 0x12b4 <placeTimer+0xa2>
    122a:	4e 81       	ldd	r20, Y+6	; 0x06
    122c:	5f 81       	ldd	r21, Y+7	; 0x07
    122e:	68 85       	ldd	r22, Y+8	; 0x08
    1230:	79 85       	ldd	r23, Y+9	; 0x09
    1232:	fc 01       	movw	r30, r24
    1234:	02 81       	ldd	r16, Z+2	; 0x02
    1236:	13 81       	ldd	r17, Z+3	; 0x03
    1238:	24 81       	ldd	r18, Z+4	; 0x04
    123a:	35 81       	ldd	r19, Z+5	; 0x05
    123c:	40 17       	cp	r20, r16
    123e:	51 07       	cpc	r21, r17
    1240:	62 07       	cpc	r22, r18
    1242:	73 07       	cpc	r23, r19
    1244:	60 f0       	brcs	.+24     	; 0x125e <placeTimer+0x4c>
    1246:	dc 01       	movw	r26, r24
    1248:	17 c0       	rjmp	.+46     	; 0x1278 <placeTimer+0x66>
    124a:	02 81       	ldd	r16, Z+2	; 0x02
    124c:	13 81       	ldd	r17, Z+3	; 0x03
    124e:	24 81       	ldd	r18, Z+4	; 0x04
    1250:	35 81       	ldd	r19, Z+5	; 0x05
    1252:	40 17       	cp	r20, r16
    1254:	51 07       	cpc	r21, r17
    1256:	62 07       	cpc	r22, r18
    1258:	73 07       	cpc	r23, r19
    125a:	68 f4       	brcc	.+26     	; 0x1276 <placeTimer+0x64>
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <placeTimer+0x52>
    125e:	fc 01       	movw	r30, r24
    1260:	a0 e0       	ldi	r26, 0x00	; 0
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	04 1b       	sub	r16, r20
    1266:	15 0b       	sbc	r17, r21
    1268:	26 0b       	sbc	r18, r22
    126a:	37 0b       	sbc	r19, r23
    126c:	02 83       	std	Z+2, r16	; 0x02
    126e:	13 83       	std	Z+3, r17	; 0x03
    1270:	24 83       	std	Z+4, r18	; 0x04
    1272:	35 83       	std	Z+5, r19	; 0x05
    1274:	0a c0       	rjmp	.+20     	; 0x128a <placeTimer+0x78>
    1276:	df 01       	movw	r26, r30
    1278:	40 1b       	sub	r20, r16
    127a:	51 0b       	sbc	r21, r17
    127c:	62 0b       	sbc	r22, r18
    127e:	73 0b       	sbc	r23, r19
    1280:	ed 91       	ld	r30, X+
    1282:	fc 91       	ld	r31, X
    1284:	11 97       	sbiw	r26, 0x01	; 1
    1286:	30 97       	sbiw	r30, 0x00	; 0
    1288:	01 f7       	brne	.-64     	; 0x124a <placeTimer+0x38>
    128a:	4a 83       	std	Y+2, r20	; 0x02
    128c:	5b 83       	std	Y+3, r21	; 0x03
    128e:	6c 83       	std	Y+4, r22	; 0x04
    1290:	7d 83       	std	Y+5, r23	; 0x05
    1292:	10 97       	sbiw	r26, 0x00	; 0
    1294:	41 f0       	breq	.+16     	; 0x12a6 <placeTimer+0x94>
    1296:	8d 91       	ld	r24, X+
    1298:	9c 91       	ld	r25, X
    129a:	11 97       	sbiw	r26, 0x01	; 1
    129c:	99 83       	std	Y+1, r25	; 0x01
    129e:	88 83       	st	Y, r24
    12a0:	cd 93       	st	X+, r28
    12a2:	dc 93       	st	X, r29
    12a4:	15 c0       	rjmp	.+42     	; 0x12d0 <placeTimer+0xbe>
    12a6:	99 83       	std	Y+1, r25	; 0x01
    12a8:	88 83       	st	Y, r24
    12aa:	d0 93 5f 03 	sts	0x035F, r29	; 0x80035f <timers+0x1>
    12ae:	c0 93 5e 03 	sts	0x035E, r28	; 0x80035e <timers>
    12b2:	0e c0       	rjmp	.+28     	; 0x12d0 <placeTimer+0xbe>
    12b4:	19 82       	std	Y+1, r1	; 0x01
    12b6:	18 82       	st	Y, r1
    12b8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ba:	9f 81       	ldd	r25, Y+7	; 0x07
    12bc:	a8 85       	ldd	r26, Y+8	; 0x08
    12be:	b9 85       	ldd	r27, Y+9	; 0x09
    12c0:	8a 83       	std	Y+2, r24	; 0x02
    12c2:	9b 83       	std	Y+3, r25	; 0x03
    12c4:	ac 83       	std	Y+4, r26	; 0x04
    12c6:	bd 83       	std	Y+5, r27	; 0x05
    12c8:	d0 93 5f 03 	sts	0x035F, r29	; 0x80035f <timers+0x1>
    12cc:	c0 93 5e 03 	sts	0x035E, r28	; 0x80035e <timers>
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <SYS_HwExpiry_Cb>:
    12da:	80 91 62 0a 	lds	r24, 0x0A62	; 0x800a62 <SysTimerIrqCount>
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	80 93 62 0a 	sts	0x0A62, r24	; 0x800a62 <SysTimerIrqCount>
    12e4:	80 e1       	ldi	r24, 0x10	; 16
    12e6:	97 e2       	ldi	r25, 0x27	; 39
    12e8:	0c 94 ed 00 	jmp	0x1da	; 0x1da <common_tc_delay>
    12ec:	08 95       	ret

000012ee <SYS_TimerInit>:
    12ee:	10 92 62 0a 	sts	0x0A62, r1	; 0x800a62 <SysTimerIrqCount>
    12f2:	8d e6       	ldi	r24, 0x6D	; 109
    12f4:	99 e0       	ldi	r25, 0x09	; 9
    12f6:	22 d8       	rcall	.-4028   	; 0x33c <set_common_tc_expiry_callback>
    12f8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <common_tc_init>
    12fc:	80 e1       	ldi	r24, 0x10	; 16
    12fe:	97 e2       	ldi	r25, 0x27	; 39
    1300:	0e 94 ed 00 	call	0x1da	; 0x1da <common_tc_delay>
    1304:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <timers+0x1>
    1308:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <timers>
    130c:	08 95       	ret

0000130e <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    130e:	e0 91 5e 03 	lds	r30, 0x035E	; 0x80035e <timers>
    1312:	f0 91 5f 03 	lds	r31, 0x035F	; 0x80035f <timers+0x1>
    1316:	30 97       	sbiw	r30, 0x00	; 0
    1318:	71 f0       	breq	.+28     	; 0x1336 <SYS_TimerStarted+0x28>
		if (t == timer) {
    131a:	e8 17       	cp	r30, r24
    131c:	f9 07       	cpc	r31, r25
    131e:	21 f4       	brne	.+8      	; 0x1328 <SYS_TimerStarted+0x1a>
    1320:	0c c0       	rjmp	.+24     	; 0x133a <SYS_TimerStarted+0x2c>
    1322:	8e 17       	cp	r24, r30
    1324:	9f 07       	cpc	r25, r31
    1326:	59 f0       	breq	.+22     	; 0x133e <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    1328:	01 90       	ld	r0, Z+
    132a:	f0 81       	ld	r31, Z
    132c:	e0 2d       	mov	r30, r0
    132e:	30 97       	sbiw	r30, 0x00	; 0
    1330:	c1 f7       	brne	.-16     	; 0x1322 <SYS_TimerStarted+0x14>
		if (t == timer) {
			return true;
		}
	}
	return false;
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	08 95       	ret
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	08 95       	ret
    133e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return false;
}
    1340:	08 95       	ret

00001342 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
	if (!SYS_TimerStarted(timer)) {
    1346:	ec 01       	movw	r28, r24
    1348:	e2 df       	rcall	.-60     	; 0x130e <SYS_TimerStarted>
		placeTimer(timer);
    134a:	81 11       	cpse	r24, r1
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <SYS_TimerStart+0x10>
	}
}
    134e:	ce 01       	movw	r24, r28
    1350:	60 df       	rcall	.-320    	; 0x1212 <placeTimer>
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	08 95       	ret

00001358 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
    1368:	1f 92       	push	r1
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
    136e:	80 91 62 0a 	lds	r24, 0x0A62	; 0x800a62 <SysTimerIrqCount>
    1372:	88 23       	and	r24, r24
    1374:	09 f4       	brne	.+2      	; 0x1378 <SYS_TimerTaskHandler+0x20>
    1376:	53 c0       	rjmp	.+166    	; 0x141e <SYS_TimerTaskHandler+0xc6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1378:	8f b7       	in	r24, 0x3f	; 63
    137a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    137c:	f8 94       	cli
	return flags;
    137e:	89 81       	ldd	r24, Y+1	; 0x01
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
    1380:	c0 90 62 0a 	lds	r12, 0x0A62	; 0x800a62 <SysTimerIrqCount>
	SysTimerIrqCount = 0;
    1384:	10 92 62 0a 	sts	0x0A62, r1	; 0x800a62 <SysTimerIrqCount>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1388:	8f bf       	out	0x3f, r24	; 63
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
    138a:	d1 2c       	mov	r13, r1
    138c:	e1 2c       	mov	r14, r1
    138e:	f1 2c       	mov	r15, r1
    1390:	cc 0c       	add	r12, r12
    1392:	dd 1c       	adc	r13, r13
    1394:	ee 1c       	adc	r14, r14
    1396:	ff 1c       	adc	r15, r15
    1398:	d7 01       	movw	r26, r14
    139a:	c6 01       	movw	r24, r12
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	aa 1f       	adc	r26, r26
    13a2:	bb 1f       	adc	r27, r27
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	aa 1f       	adc	r26, r26
    13aa:	bb 1f       	adc	r27, r27
    13ac:	c8 0e       	add	r12, r24
    13ae:	d9 1e       	adc	r13, r25
    13b0:	ea 1e       	adc	r14, r26
    13b2:	fb 1e       	adc	r15, r27

	while (timers && (timers->timeout <= elapsed)) {
    13b4:	1b c0       	rjmp	.+54     	; 0x13ec <SYS_TimerTaskHandler+0x94>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    13b6:	c8 1a       	sub	r12, r24
    13b8:	d9 0a       	sbc	r13, r25
    13ba:	ea 0a       	sbc	r14, r26
    13bc:	fb 0a       	sbc	r15, r27
		timers = timers->next;
    13be:	d8 01       	movw	r26, r16
    13c0:	8d 91       	ld	r24, X+
    13c2:	9c 91       	ld	r25, X
    13c4:	11 97       	sbiw	r26, 0x01	; 1
    13c6:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <timers+0x1>
    13ca:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <timers>
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    13ce:	1a 96       	adiw	r26, 0x0a	; 10
    13d0:	8c 91       	ld	r24, X
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	11 f4       	brne	.+4      	; 0x13da <SYS_TimerTaskHandler+0x82>
			placeTimer(timer);
    13d6:	c8 01       	movw	r24, r16
    13d8:	1c df       	rcall	.-456    	; 0x1212 <placeTimer>
		}

		if (timer->handler) {
    13da:	d8 01       	movw	r26, r16
    13dc:	1b 96       	adiw	r26, 0x0b	; 11
    13de:	ed 91       	ld	r30, X+
    13e0:	fc 91       	ld	r31, X
    13e2:	1c 97       	sbiw	r26, 0x0c	; 12
    13e4:	30 97       	sbiw	r30, 0x00	; 0
    13e6:	11 f0       	breq	.+4      	; 0x13ec <SYS_TimerTaskHandler+0x94>
			timer->handler(timer);
    13e8:	c8 01       	movw	r24, r16
    13ea:	09 95       	icall
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    13ec:	00 91 5e 03 	lds	r16, 0x035E	; 0x80035e <timers>
    13f0:	10 91 5f 03 	lds	r17, 0x035F	; 0x80035f <timers+0x1>
    13f4:	01 15       	cp	r16, r1
    13f6:	11 05       	cpc	r17, r1
    13f8:	91 f0       	breq	.+36     	; 0x141e <SYS_TimerTaskHandler+0xc6>
    13fa:	f8 01       	movw	r30, r16
    13fc:	82 81       	ldd	r24, Z+2	; 0x02
    13fe:	93 81       	ldd	r25, Z+3	; 0x03
    1400:	a4 81       	ldd	r26, Z+4	; 0x04
    1402:	b5 81       	ldd	r27, Z+5	; 0x05
    1404:	c8 16       	cp	r12, r24
    1406:	d9 06       	cpc	r13, r25
    1408:	ea 06       	cpc	r14, r26
    140a:	fb 06       	cpc	r15, r27
    140c:	a0 f6       	brcc	.-88     	; 0x13b6 <SYS_TimerTaskHandler+0x5e>
			timer->handler(timer);
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    140e:	8c 19       	sub	r24, r12
    1410:	9d 09       	sbc	r25, r13
    1412:	ae 09       	sbc	r26, r14
    1414:	bf 09       	sbc	r27, r15
    1416:	82 83       	std	Z+2, r24	; 0x02
    1418:	93 83       	std	Z+3, r25	; 0x03
    141a:	a4 83       	std	Z+4, r26	; 0x04
    141c:	b5 83       	std	Z+5, r27	; 0x05
	}
}
    141e:	0f 90       	pop	r0
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	cf 90       	pop	r12
    1430:	08 95       	ret

00001432 <phyTrxSetState>:
	IEEE_ADDR_2_REG = *ptr_to_reg++;
	IEEE_ADDR_3_REG = *ptr_to_reg++;
	IEEE_ADDR_4_REG = *ptr_to_reg++;
	IEEE_ADDR_5_REG = *ptr_to_reg++;
	IEEE_ADDR_6_REG = *ptr_to_reg++;
	IEEE_ADDR_7_REG = *ptr_to_reg;
    1432:	a2 e4       	ldi	r26, 0x42	; 66
    1434:	b1 e0       	ldi	r27, 0x01	; 1
    1436:	23 e0       	ldi	r18, 0x03	; 3
    1438:	e1 e4       	ldi	r30, 0x41	; 65
    143a:	f1 e0       	ldi	r31, 0x01	; 1
    143c:	2c 93       	st	X, r18
    143e:	90 81       	ld	r25, Z
    1440:	9f 71       	andi	r25, 0x1F	; 31
    1442:	98 30       	cpi	r25, 0x08	; 8
    1444:	d9 f7       	brne	.-10     	; 0x143c <phyTrxSetState+0xa>
    1446:	a2 e4       	ldi	r26, 0x42	; 66
    1448:	b1 e0       	ldi	r27, 0x01	; 1
    144a:	e1 e4       	ldi	r30, 0x41	; 65
    144c:	f1 e0       	ldi	r31, 0x01	; 1
    144e:	8c 93       	st	X, r24
    1450:	90 81       	ld	r25, Z
    1452:	9f 71       	andi	r25, 0x1F	; 31
    1454:	89 13       	cpse	r24, r25
    1456:	fb cf       	rjmp	.-10     	; 0x144e <phyTrxSetState+0x1c>
    1458:	08 95       	ret

0000145a <phySetRxState>:
    145a:	88 e0       	ldi	r24, 0x08	; 8
    145c:	ea df       	rcall	.-44     	; 0x1432 <phyTrxSetState>
    145e:	8f ef       	ldi	r24, 0xFF	; 255
    1460:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7e014f>
    1464:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <phyRxState>
    1468:	88 23       	and	r24, r24
    146a:	11 f0       	breq	.+4      	; 0x1470 <phySetRxState+0x16>
    146c:	86 e1       	ldi	r24, 0x16	; 22
    146e:	e1 cf       	rjmp	.-62     	; 0x1432 <phyTrxSetState>
    1470:	08 95       	ret

00001472 <PHY_Init>:
    1472:	60 e4       	ldi	r22, 0x40	; 64
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	0e 94 12 02 	call	0x424	; 0x424 <sysclk_enable_module>
    147a:	e9 e3       	ldi	r30, 0x39	; 57
    147c:	f1 e0       	ldi	r31, 0x01	; 1
    147e:	80 81       	ld	r24, Z
    1480:	81 60       	ori	r24, 0x01	; 1
    1482:	80 83       	st	Z, r24
    1484:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <phyRxState>
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <phyState>
    148e:	88 e0       	ldi	r24, 0x08	; 8
    1490:	d0 df       	rcall	.-96     	; 0x1432 <phyTrxSetState>
    1492:	ec e4       	ldi	r30, 0x4C	; 76
    1494:	f1 e0       	ldi	r31, 0x01	; 1
    1496:	80 81       	ld	r24, Z
    1498:	80 68       	ori	r24, 0x80	; 128
    149a:	80 83       	st	Z, r24
    149c:	08 95       	ret

0000149e <PHY_SetRxState>:
    149e:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <phyRxState>
    14a2:	db cf       	rjmp	.-74     	; 0x145a <phySetRxState>
    14a4:	08 95       	ret

000014a6 <PHY_SetChannel>:
    14a6:	8f 71       	andi	r24, 0x1F	; 31
    14a8:	e8 e4       	ldi	r30, 0x48	; 72
    14aa:	f1 e0       	ldi	r31, 0x01	; 1
    14ac:	90 81       	ld	r25, Z
    14ae:	90 7e       	andi	r25, 0xE0	; 224
    14b0:	89 2b       	or	r24, r25
    14b2:	80 83       	st	Z, r24
    14b4:	08 95       	ret

000014b6 <PHY_SetPanId>:
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <PHY_SetPanId+0x6>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7e0162>
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7e0163>
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <PHY_SetShortAddr>:
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	00 d0       	rcall	.+0      	; 0x14de <PHY_SetShortAddr+0x6>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7e0160>
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7e0161>
    14f0:	99 81       	ldd	r25, Y+1	; 0x01
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	89 0f       	add	r24, r25
    14f6:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7e016d>
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	08 95       	ret

00001504 <PHY_DataReq>:
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	ec 01       	movw	r28, r24
    150a:	89 e1       	ldi	r24, 0x19	; 25
    150c:	92 df       	rcall	.-220    	; 0x1432 <phyTrxSetState>
    150e:	8f ef       	ldi	r24, 0xFF	; 255
    1510:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7e014f>
    1514:	88 81       	ld	r24, Y
    1516:	8e 5f       	subi	r24, 0xFE	; 254
    1518:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7e0180>
    151c:	88 81       	ld	r24, Y
    151e:	88 23       	and	r24, r24
    1520:	81 f0       	breq	.+32     	; 0x1542 <PHY_DataReq+0x3e>
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	82 2f       	mov	r24, r18
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	fc 01       	movw	r30, r24
    152a:	ef 57       	subi	r30, 0x7F	; 127
    152c:	fe 4f       	sbci	r31, 0xFE	; 254
    152e:	de 01       	movw	r26, r28
    1530:	a8 0f       	add	r26, r24
    1532:	b9 1f       	adc	r27, r25
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	8c 91       	ld	r24, X
    1538:	80 83       	st	Z, r24
    153a:	2f 5f       	subi	r18, 0xFF	; 255
    153c:	88 81       	ld	r24, Y
    153e:	28 17       	cp	r18, r24
    1540:	88 f3       	brcs	.-30     	; 0x1524 <PHY_DataReq+0x20>
    1542:	83 e0       	ldi	r24, 0x03	; 3
    1544:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <phyState>
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	00 d0       	rcall	.+0      	; 0x155c <PHY_TaskHandler+0x8>
    155c:	00 d0       	rcall	.+0      	; 0x155e <PHY_TaskHandler+0xa>
    155e:	1f 92       	push	r1
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
	if (PHY_STATE_SLEEP == phyState) {
    1564:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <phyState>
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	09 f4       	brne	.+2      	; 0x156e <PHY_TaskHandler+0x1a>
    156c:	65 c0       	rjmp	.+202    	; 0x1638 <PHY_TaskHandler+0xe4>
		return;
	}

	if (IRQ_STATUS_REG_s.rxEnd) {
    156e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7e014f>
    1572:	83 ff       	sbrs	r24, 3
    1574:	3e c0       	rjmp	.+124    	; 0x15f2 <PHY_TaskHandler+0x9e>
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;
    1576:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    157a:	6a 2f       	mov	r22, r26
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	ab 01       	movw	r20, r22
    1580:	4f 5f       	subi	r20, 0xFF	; 255
    1582:	5f 4f       	sbci	r21, 0xFF	; 255
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	20 e0       	ldi	r18, 0x00	; 0
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    158a:	fc 01       	movw	r30, r24
    158c:	e0 58       	subi	r30, 0x80	; 128
    158e:	fe 4f       	sbci	r31, 0xFE	; 254
    1590:	30 81       	ld	r19, Z
    1592:	fc 01       	movw	r30, r24
    1594:	ef 59       	subi	r30, 0x9F	; 159
    1596:	fc 4f       	sbci	r31, 0xFC	; 252
    1598:	30 83       	st	Z, r19

	if (IRQ_STATUS_REG_s.rxEnd) {
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    159a:	2f 5f       	subi	r18, 0xFF	; 255
    159c:	82 2f       	mov	r24, r18
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	84 17       	cp	r24, r20
    15a2:	95 07       	cpc	r25, r21
    15a4:	94 f3       	brlt	.-28     	; 0x158a <PHY_TaskHandler+0x36>
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
		}

		ind.data = phyRxBuffer;
    15a6:	81 e6       	ldi	r24, 0x61	; 97
    15a8:	93 e0       	ldi	r25, 0x03	; 3
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
		ind.size = size - PHY_CRC_SIZE;
    15ae:	a2 50       	subi	r26, 0x02	; 2
    15b0:	ab 83       	std	Y+3, r26	; 0x03
		ind.lqi  = phyRxBuffer[size];
    15b2:	fb 01       	movw	r30, r22
    15b4:	ef 59       	subi	r30, 0x9F	; 159
    15b6:	fc 4f       	sbci	r31, 0xFC	; 252
    15b8:	80 81       	ld	r24, Z
    15ba:	8c 83       	std	Y+4, r24	; 0x04
		ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    15bc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7e0147>
    15c0:	8a 55       	subi	r24, 0x5A	; 90
    15c2:	8d 83       	std	Y+5, r24	; 0x05
		PHY_DataInd(&ind);
    15c4:	ce 01       	movw	r24, r28
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	28 d2       	rcall	.+1104   	; 0x1a1a <PHY_DataInd>

		while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus) {
    15ca:	e1 e4       	ldi	r30, 0x41	; 65
    15cc:	f1 e0       	ldi	r31, 0x01	; 1
    15ce:	80 81       	ld	r24, Z
    15d0:	8f 71       	andi	r24, 0x1F	; 31
    15d2:	86 31       	cpi	r24, 0x16	; 22
    15d4:	e1 f7       	brne	.-8      	; 0x15ce <PHY_TaskHandler+0x7a>
		}

		IRQ_STATUS_REG_s.rxEnd = 1;
    15d6:	ef e4       	ldi	r30, 0x4F	; 79
    15d8:	f1 e0       	ldi	r31, 0x01	; 1
    15da:	80 81       	ld	r24, Z
    15dc:	88 60       	ori	r24, 0x08	; 8
    15de:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 0;
    15e0:	ec e4       	ldi	r30, 0x4C	; 76
    15e2:	f1 e0       	ldi	r31, 0x01	; 1
    15e4:	80 81       	ld	r24, Z
    15e6:	8f 77       	andi	r24, 0x7F	; 127
    15e8:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 1;
    15ea:	80 81       	ld	r24, Z
    15ec:	80 68       	ori	r24, 0x80	; 128
    15ee:	80 83       	st	Z, r24
    15f0:	23 c0       	rjmp	.+70     	; 0x1638 <PHY_TaskHandler+0xe4>
	} else if (IRQ_STATUS_REG_s.txEnd) {
    15f2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7e014f>
    15f6:	86 ff       	sbrs	r24, 6
    15f8:	1f c0       	rjmp	.+62     	; 0x1638 <PHY_TaskHandler+0xe4>
		if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus) {
    15fa:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    15fe:	8f 71       	andi	r24, 0x1F	; 31
    1600:	89 31       	cpi	r24, 0x19	; 25
    1602:	a9 f4       	brne	.+42     	; 0x162e <PHY_TaskHandler+0xda>
			uint8_t status = TRX_STATE_REG_s.tracStatus;
    1604:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    1608:	12 95       	swap	r17
    160a:	16 95       	lsr	r17
    160c:	17 70       	andi	r17, 0x07	; 7

			if (TRAC_STATUS_SUCCESS == status) {
    160e:	49 f0       	breq	.+18     	; 0x1622 <PHY_TaskHandler+0xce>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    1610:	13 30       	cpi	r17, 0x03	; 3
    1612:	21 f0       	breq	.+8      	; 0x161c <PHY_TaskHandler+0xc8>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
    1614:	15 30       	cpi	r17, 0x05	; 5
    1616:	21 f0       	breq	.+8      	; 0x1620 <PHY_TaskHandler+0xcc>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
    1618:	13 e0       	ldi	r17, 0x03	; 3
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <PHY_TaskHandler+0xce>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    161c:	11 e0       	ldi	r17, 0x01	; 1
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <PHY_TaskHandler+0xce>
    1620:	12 e0       	ldi	r17, 0x02	; 2
			phyState = PHY_STATE_IDLE;
    1622:	1b df       	rcall	.-458    	; 0x145a <phySetRxState>
    1624:	81 e0       	ldi	r24, 0x01	; 1

			PHY_DataConf(status);
    1626:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <phyState>
    162a:	81 2f       	mov	r24, r17
		}

		IRQ_STATUS_REG_s.txEnd = 1;
    162c:	64 d5       	rcall	.+2760   	; 0x20f6 <PHY_DataConf>
    162e:	ef e4       	ldi	r30, 0x4F	; 79
    1630:	f1 e0       	ldi	r31, 0x01	; 1
    1632:	80 81       	ld	r24, Z
    1634:	80 64       	ori	r24, 0x40	; 64
	}
}
    1636:	80 83       	st	Z, r24
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	08 95       	ret

0000164a <NWK_Init>:
    164a:	e3 e6       	ldi	r30, 0x63	; 99
    164c:	fa e0       	ldi	r31, 0x0A	; 10
    164e:	14 82       	std	Z+4, r1	; 0x04
    1650:	15 82       	std	Z+5, r1	; 0x05
    1652:	11 82       	std	Z+1, r1	; 0x01
    1654:	10 82       	st	Z, r1
    1656:	17 a2       	std	Z+39, r1	; 0x27
    1658:	16 a2       	std	Z+38, r1	; 0x26
    165a:	e9 e6       	ldi	r30, 0x69	; 105
    165c:	fa e0       	ldi	r31, 0x0A	; 10
    165e:	89 e8       	ldi	r24, 0x89	; 137
    1660:	9a e0       	ldi	r25, 0x0A	; 10
    1662:	11 92       	st	Z+, r1
    1664:	11 92       	st	Z+, r1
    1666:	e8 17       	cp	r30, r24
    1668:	f9 07       	cpc	r31, r25
    166a:	d9 f7       	brne	.-10     	; 0x1662 <NWK_Init+0x18>
    166c:	6b d4       	rcall	.+2262   	; 0x1f44 <nwkTxInit>
    166e:	b8 d1       	rcall	.+880    	; 0x19e0 <nwkRxInit>
    1670:	09 d1       	rcall	.+530    	; 0x1884 <nwkFrameInit>
    1672:	3d c0       	rjmp	.+122    	; 0x16ee <nwkDataReqInit>
    1674:	08 95       	ret

00001676 <NWK_SetAddr>:
    1676:	90 93 64 0a 	sts	0x0A64, r25	; 0x800a64 <nwkIb+0x1>
    167a:	80 93 63 0a 	sts	0x0A63, r24	; 0x800a63 <nwkIb>
    167e:	2c cf       	rjmp	.-424    	; 0x14d8 <PHY_SetShortAddr>
    1680:	08 95       	ret

00001682 <NWK_SetPanId>:
    1682:	90 93 66 0a 	sts	0x0A66, r25	; 0x800a66 <nwkIb+0x3>
    1686:	80 93 65 0a 	sts	0x0A65, r24	; 0x800a65 <nwkIb+0x2>
    168a:	15 cf       	rjmp	.-470    	; 0x14b6 <PHY_SetPanId>
    168c:	08 95       	ret

0000168e <NWK_OpenEndpoint>:
    168e:	e8 2f       	mov	r30, r24
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	ee 0f       	add	r30, r30
    1694:	ff 1f       	adc	r31, r31
    1696:	e7 59       	subi	r30, 0x97	; 151
    1698:	f5 4f       	sbci	r31, 0xF5	; 245
    169a:	71 83       	std	Z+1, r23	; 0x01
    169c:	60 83       	st	Z, r22
    169e:	08 95       	ret

000016a0 <NWK_TaskHandler>:
    16a0:	e6 d1       	rcall	.+972    	; 0x1a6e <nwkRxTaskHandler>
    16a2:	4c d5       	rcall	.+2712   	; 0x213c <nwkTxTaskHandler>
    16a4:	4d c0       	rjmp	.+154    	; 0x1740 <nwkDataReqTaskHandler>
    16a6:	08 95       	ret

000016a8 <nwkDataReqTxConf>:
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    16a8:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <nwkDataReqQueue>
    16ac:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <nwkDataReqQueue+0x1>
    16b0:	30 97       	sbiw	r30, 0x00	; 0
    16b2:	d9 f0       	breq	.+54     	; 0x16ea <nwkDataReqTxConf+0x42>
		if (req->frame == frame) {
    16b4:	22 81       	ldd	r18, Z+2	; 0x02
    16b6:	33 81       	ldd	r19, Z+3	; 0x03
    16b8:	82 17       	cp	r24, r18
    16ba:	93 07       	cpc	r25, r19
    16bc:	89 f4       	brne	.+34     	; 0x16e0 <nwkDataReqTxConf+0x38>
    16be:	05 c0       	rjmp	.+10     	; 0x16ca <nwkDataReqTxConf+0x22>
    16c0:	22 81       	ldd	r18, Z+2	; 0x02
    16c2:	33 81       	ldd	r19, Z+3	; 0x03
    16c4:	28 17       	cp	r18, r24
    16c6:	39 07       	cpc	r19, r25
    16c8:	59 f4       	brne	.+22     	; 0x16e0 <nwkDataReqTxConf+0x38>
			req->status = frame->tx.status;
    16ca:	dc 01       	movw	r26, r24
    16cc:	ad 57       	subi	r26, 0x7D	; 125
    16ce:	bf 4f       	sbci	r27, 0xFF	; 255
    16d0:	2c 91       	ld	r18, X
    16d2:	27 87       	std	Z+15, r18	; 0x0f
			req->control = frame->tx.control;
    16d4:	13 96       	adiw	r26, 0x03	; 3
    16d6:	2c 91       	ld	r18, X
    16d8:	20 8b       	std	Z+16, r18	; 0x10
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    16da:	22 e0       	ldi	r18, 0x02	; 2
    16dc:	24 83       	std	Z+4, r18	; 0x04
			break;
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <nwkDataReqTxConf+0x42>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    16e0:	01 90       	ld	r0, Z+
    16e2:	f0 81       	ld	r31, Z
    16e4:	e0 2d       	mov	r30, r0
    16e6:	30 97       	sbiw	r30, 0x00	; 0
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    16e8:	59 f7       	brne	.-42     	; 0x16c0 <nwkDataReqTxConf+0x18>
    16ea:	0e c1       	rjmp	.+540    	; 0x1908 <nwkFrameFree>
    16ec:	08 95       	ret

000016ee <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    16ee:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <nwkDataReqQueue+0x1>
    16f2:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <nwkDataReqQueue>
    16f6:	08 95       	ret

000016f8 <NWK_DataReq>:
/*************************************************************************//**
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    16f8:	fc 01       	movw	r30, r24
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    16fa:	14 82       	std	Z+4, r1	; 0x04
	req->status = NWK_SUCCESS_STATUS;
    16fc:	17 86       	std	Z+15, r1	; 0x0f
	req->frame = NULL;
    16fe:	13 82       	std	Z+3, r1	; 0x03
    1700:	12 82       	std	Z+2, r1	; 0x02

	nwkIb.lock++;
    1702:	a3 e6       	ldi	r26, 0x63	; 99
    1704:	ba e0       	ldi	r27, 0x0A	; 10
    1706:	96 96       	adiw	r26, 0x26	; 38
    1708:	8d 91       	ld	r24, X+
    170a:	9c 91       	ld	r25, X
    170c:	97 97       	sbiw	r26, 0x27	; 39
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	97 96       	adiw	r26, 0x27	; 39
    1712:	9c 93       	st	X, r25
    1714:	8e 93       	st	-X, r24
    1716:	96 97       	sbiw	r26, 0x26	; 38

	if (NULL == nwkDataReqQueue) {
    1718:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <nwkDataReqQueue>
    171c:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <nwkDataReqQueue+0x1>
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	39 f4       	brne	.+14     	; 0x1732 <NWK_DataReq+0x3a>
		req->next = NULL;
    1724:	11 82       	std	Z+1, r1	; 0x01
    1726:	10 82       	st	Z, r1
		nwkDataReqQueue = req;
    1728:	f0 93 e3 03 	sts	0x03E3, r31	; 0x8003e3 <nwkDataReqQueue+0x1>
    172c:	e0 93 e2 03 	sts	0x03E2, r30	; 0x8003e2 <nwkDataReqQueue>
    1730:	08 95       	ret
	} else {
		req->next = nwkDataReqQueue;
    1732:	91 83       	std	Z+1, r25	; 0x01
    1734:	80 83       	st	Z, r24
		nwkDataReqQueue = req;
    1736:	f0 93 e3 03 	sts	0x03E3, r31	; 0x8003e3 <nwkDataReqQueue+0x1>
    173a:	e0 93 e2 03 	sts	0x03E2, r30	; 0x8003e2 <nwkDataReqQueue>
    173e:	08 95       	ret

00001740 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1748:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <nwkDataReqQueue>
    174c:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <nwkDataReqQueue+0x1>
    1750:	30 97       	sbiw	r30, 0x00	; 0
    1752:	09 f4       	brne	.+2      	; 0x1756 <nwkDataReqTaskHandler+0x16>
    1754:	92 c0       	rjmp	.+292    	; 0x187a <nwkDataReqTaskHandler+0x13a>
    1756:	ef 01       	movw	r28, r30
		switch (req->state) {
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	88 23       	and	r24, r24
    175c:	21 f0       	breq	.+8      	; 0x1766 <nwkDataReqTaskHandler+0x26>
    175e:	82 30       	cpi	r24, 0x02	; 2
    1760:	09 f4       	brne	.+2      	; 0x1764 <nwkDataReqTaskHandler+0x24>
    1762:	65 c0       	rjmp	.+202    	; 0x182e <nwkDataReqTaskHandler+0xee>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    1764:	84 c0       	rjmp	.+264    	; 0x186e <nwkDataReqTaskHandler+0x12e>
    1766:	99 d0       	rcall	.+306    	; 0x189a <nwkFrameAlloc>
    1768:	8c 01       	movw	r16, r24
    176a:	00 97       	sbiw	r24, 0x00	; 0
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    176c:	21 f4       	brne	.+8      	; 0x1776 <nwkDataReqTaskHandler+0x36>
    176e:	82 e0       	ldi	r24, 0x02	; 2
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    1770:	8c 83       	std	Y+4, r24	; 0x04
    1772:	8f 87       	std	Y+15, r24	; 0x0f
		return;
	}

	req->frame = frame;
    1774:	82 c0       	rjmp	.+260    	; 0x187a <nwkDataReqTaskHandler+0x13a>
    1776:	9b 83       	std	Y+3, r25	; 0x03
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    1778:	8a 83       	std	Y+2, r24	; 0x02
    177a:	81 e0       	ldi	r24, 0x01	; 1

	frame->tx.confirm = nwkDataReqTxConf;
    177c:	8c 83       	std	Y+4, r24	; 0x04
    177e:	f8 01       	movw	r30, r16
    1780:	e9 57       	subi	r30, 0x79	; 121
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	84 e5       	ldi	r24, 0x54	; 84
    1786:	9b e0       	ldi	r25, 0x0B	; 11
    1788:	91 83       	std	Z+1, r25	; 0x01
	frame->tx.control = req->options &
    178a:	80 83       	st	Z, r24
    178c:	31 97       	sbiw	r30, 0x01	; 1
    178e:	89 85       	ldd	r24, Y+9	; 0x09
    1790:	82 fb       	bst	r24, 2
    1792:	88 27       	eor	r24, r24
    1794:	80 f9       	bld	r24, 0
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    1796:	80 83       	st	Z, r24
    1798:	99 85       	ldd	r25, Y+9	; 0x09
    179a:	d8 01       	movw	r26, r16
    179c:	1b 96       	adiw	r26, 0x0b	; 11
    179e:	8c 91       	ld	r24, X
    17a0:	1b 97       	sbiw	r26, 0x0b	; 11
    17a2:	90 fb       	bst	r25, 0
    17a4:	80 f9       	bld	r24, 0
    17a6:	1b 96       	adiw	r26, 0x0b	; 11
    17a8:	8c 93       	st	X, r24
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    17aa:	1b 97       	sbiw	r26, 0x0b	; 11
    17ac:	99 85       	ldd	r25, Y+9	; 0x09
    17ae:	93 fb       	bst	r25, 3
    17b0:	99 27       	eor	r25, r25
    17b2:	90 f9       	bld	r25, 0
    17b4:	90 fb       	bst	r25, 0
    17b6:	82 f9       	bld	r24, 2
    17b8:	1b 96       	adiw	r26, 0x0b	; 11
    17ba:	8c 93       	st	X, r24
		frame->payload += sizeof(NwkFrameMulticastHeader_t);
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}
#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    17bc:	1b 97       	sbiw	r26, 0x0b	; 11
    17be:	e3 e6       	ldi	r30, 0x63	; 99
    17c0:	fa e0       	ldi	r31, 0x0A	; 10
    17c2:	84 81       	ldd	r24, Z+4	; 0x04
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	84 83       	std	Z+4, r24	; 0x04
    17c8:	1c 96       	adiw	r26, 0x0c	; 12
    17ca:	8c 93       	st	X, r24
	frame->header.nwkSrcAddr = nwkIb.addr;
    17cc:	1c 97       	sbiw	r26, 0x0c	; 12
    17ce:	80 81       	ld	r24, Z
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	1e 96       	adiw	r26, 0x0e	; 14
    17d4:	9c 93       	st	X, r25
    17d6:	8e 93       	st	-X, r24
	frame->header.nwkDstAddr = req->dstAddr;
    17d8:	1d 97       	sbiw	r26, 0x0d	; 13
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	50 96       	adiw	r26, 0x10	; 16
    17e0:	9c 93       	st	X, r25
    17e2:	8e 93       	st	-X, r24
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    17e4:	1f 97       	sbiw	r26, 0x0f	; 15
    17e6:	88 85       	ldd	r24, Y+8	; 0x08
    17e8:	98 2f       	mov	r25, r24
    17ea:	9f 70       	andi	r25, 0x0F	; 15
    17ec:	51 96       	adiw	r26, 0x11	; 17
    17ee:	8c 91       	ld	r24, X
    17f0:	51 97       	sbiw	r26, 0x11	; 17
    17f2:	80 7f       	andi	r24, 0xF0	; 240
    17f4:	89 2b       	or	r24, r25
    17f6:	51 96       	adiw	r26, 0x11	; 17
    17f8:	8c 93       	st	X, r24
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    17fa:	51 97       	sbiw	r26, 0x11	; 17
    17fc:	9f 81       	ldd	r25, Y+7	; 0x07
    17fe:	92 95       	swap	r25
    1800:	90 7f       	andi	r25, 0xF0	; 240
    1802:	8f 70       	andi	r24, 0x0F	; 15
    1804:	89 2b       	or	r24, r25
    1806:	51 96       	adiw	r26, 0x11	; 17

	memcpy(frame->payload, req->data, req->size);
    1808:	8c 93       	st	X, r24
    180a:	f8 01       	movw	r30, r16
    180c:	ef 57       	subi	r30, 0x7F	; 127
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	4c 85       	ldd	r20, Y+12	; 0x0c
    1812:	50 e0       	ldi	r21, 0x00	; 0
    1814:	6a 85       	ldd	r22, Y+10	; 0x0a
    1816:	7b 85       	ldd	r23, Y+11	; 0x0b
    1818:	80 81       	ld	r24, Z
    181a:	91 81       	ldd	r25, Z+1	; 0x01
	frame->size += req->size;
    181c:	93 d7       	rcall	.+3878   	; 0x2744 <memcpy>
    181e:	f8 01       	movw	r30, r16
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	8c 85       	ldd	r24, Y+12	; 0x0c

	nwkTxFrame(frame);
    1824:	89 0f       	add	r24, r25
    1826:	81 83       	std	Z+1, r24	; 0x01
    1828:	c8 01       	movw	r24, r16
    182a:	af d3       	rcall	.+1886   	; 0x1f8a <nwkTxFrame>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    182c:	26 c0       	rjmp	.+76     	; 0x187a <nwkDataReqTaskHandler+0x13a>
    182e:	ec 17       	cp	r30, r28
    1830:	fd 07       	cpc	r31, r29
		nwkDataReqQueue = nwkDataReqQueue->next;
    1832:	41 f4       	brne	.+16     	; 0x1844 <nwkDataReqTaskHandler+0x104>
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <nwkDataReqQueue+0x1>
    183c:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <nwkDataReqQueue>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
			prev = prev->next;
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <nwkDataReqTaskHandler+0x116>
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    1842:	fc 01       	movw	r30, r24
    1844:	80 81       	ld	r24, Z
    1846:	91 81       	ldd	r25, Z+1	; 0x01
    1848:	8c 17       	cp	r24, r28
    184a:	9d 07       	cpc	r25, r29
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    184c:	d1 f7       	brne	.-12     	; 0x1842 <nwkDataReqTaskHandler+0x102>
    184e:	88 81       	ld	r24, Y
    1850:	99 81       	ldd	r25, Y+1	; 0x01
    1852:	91 83       	std	Z+1, r25	; 0x01
	}

	nwkIb.lock--;
    1854:	80 83       	st	Z, r24
    1856:	e3 e6       	ldi	r30, 0x63	; 99
    1858:	fa e0       	ldi	r31, 0x0A	; 10
    185a:	86 a1       	ldd	r24, Z+38	; 0x26
    185c:	97 a1       	ldd	r25, Z+39	; 0x27
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	97 a3       	std	Z+39, r25	; 0x27
	req->confirm(req);
    1862:	86 a3       	std	Z+38, r24	; 0x26
    1864:	ed 85       	ldd	r30, Y+13	; 0x0d
    1866:	fe 85       	ldd	r31, Y+14	; 0x0e
    1868:	ce 01       	movw	r24, r28
    186a:	09 95       	icall
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    186c:	06 c0       	rjmp	.+12     	; 0x187a <nwkDataReqTaskHandler+0x13a>
    186e:	09 90       	ld	r0, Y+
    1870:	d8 81       	ld	r29, Y
    1872:	c0 2d       	mov	r28, r0
    1874:	20 97       	sbiw	r28, 0x00	; 0
    1876:	09 f0       	breq	.+2      	; 0x187a <nwkDataReqTaskHandler+0x13a>

		default:
			break;
		}
	}
}
    1878:	6f cf       	rjmp	.-290    	; 0x1758 <nwkDataReqTaskHandler+0x18>
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	08 95       	ret

00001884 <nwkFrameInit>:

/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    1884:	e4 ee       	ldi	r30, 0xE4	; 228
    1886:	f3 e0       	ldi	r31, 0x03	; 3
    1888:	8e e3       	ldi	r24, 0x3E	; 62
    188a:	99 e0       	ldi	r25, 0x09	; 9
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    188c:	10 82       	st	Z, r1
    188e:	e7 57       	subi	r30, 0x77	; 119
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    1892:	e8 17       	cp	r30, r24
    1894:	f9 07       	cpc	r31, r25
    1896:	d1 f7       	brne	.-12     	; 0x188c <nwkFrameInit+0x8>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
	}
}
    1898:	08 95       	ret

0000189a <nwkFrameAlloc>:
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    189a:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <nwkFrameFrames>
    189e:	88 23       	and	r24, r24
    18a0:	49 f0       	breq	.+18     	; 0x18b4 <nwkFrameAlloc+0x1a>
    18a2:	ed e6       	ldi	r30, 0x6D	; 109
    18a4:	f4 e0       	ldi	r31, 0x04	; 4
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	ac 01       	movw	r20, r24
    18ac:	20 81       	ld	r18, Z
    18ae:	21 11       	cpse	r18, r1
    18b0:	22 c0       	rjmp	.+68     	; 0x18f6 <nwkFrameAlloc+0x5c>
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <nwkFrameAlloc+0x1e>
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	50 e0       	ldi	r21, 0x00	; 0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    18b8:	69 e8       	ldi	r22, 0x89	; 137
    18ba:	64 9f       	mul	r22, r20
    18bc:	90 01       	movw	r18, r0
    18be:	65 9f       	mul	r22, r21
    18c0:	30 0d       	add	r19, r0
    18c2:	11 24       	eor	r1, r1
    18c4:	c9 01       	movw	r24, r18
    18c6:	8c 51       	subi	r24, 0x1C	; 28
    18c8:	9c 4f       	sbci	r25, 0xFC	; 252
    18ca:	fc 01       	movw	r30, r24
    18cc:	11 92       	st	Z+, r1
    18ce:	6a 95       	dec	r22
    18d0:	e9 f7       	brne	.-6      	; 0x18cc <nwkFrameAlloc+0x32>
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    18d2:	40 e1       	ldi	r20, 0x10	; 16
    18d4:	fc 01       	movw	r30, r24
    18d6:	41 83       	std	Z+1, r20	; 0x01
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    18d8:	ef 57       	subi	r30, 0x7F	; 127
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	2a 50       	subi	r18, 0x0A	; 10
    18de:	3c 4f       	sbci	r19, 0xFC	; 252
    18e0:	31 83       	std	Z+1, r19	; 0x01
    18e2:	20 83       	st	Z, r18
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    18e4:	e3 e6       	ldi	r30, 0x63	; 99
    18e6:	fa e0       	ldi	r31, 0x0A	; 10
    18e8:	26 a1       	ldd	r18, Z+38	; 0x26
    18ea:	37 a1       	ldd	r19, Z+39	; 0x27
    18ec:	2f 5f       	subi	r18, 0xFF	; 255
    18ee:	3f 4f       	sbci	r19, 0xFF	; 255
    18f0:	37 a3       	std	Z+39, r19	; 0x27
    18f2:	26 a3       	std	Z+38, r18	; 0x26
			return &nwkFrameFrames[i];
    18f4:	08 95       	ret
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	e7 57       	subi	r30, 0x77	; 119
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    18fc:	8a 30       	cpi	r24, 0x0A	; 10
    18fe:	91 05       	cpc	r25, r1
    1900:	a1 f6       	brne	.-88     	; 0x18aa <nwkFrameAlloc+0x10>
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
}
    1906:	08 95       	ret

00001908 <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    1908:	fc 01       	movw	r30, r24
    190a:	10 82       	st	Z, r1
	nwkIb.lock--;
    190c:	e3 e6       	ldi	r30, 0x63	; 99
    190e:	fa e0       	ldi	r31, 0x0A	; 10
    1910:	86 a1       	ldd	r24, Z+38	; 0x26
    1912:	97 a1       	ldd	r25, Z+39	; 0x27
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	97 a3       	std	Z+39, r25	; 0x27
    1918:	86 a3       	std	Z+38, r24	; 0x26
    191a:	08 95       	ret

0000191c <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	41 f0       	breq	.+16     	; 0x1930 <nwkFrameNext+0x14>
		frame = nwkFrameFrames;
	} else {
		frame++;
    1920:	fc 01       	movw	r30, r24
    1922:	e7 57       	subi	r30, 0x77	; 119
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1926:	89 e0       	ldi	r24, 0x09	; 9
    1928:	ee 33       	cpi	r30, 0x3E	; 62
    192a:	f8 07       	cpc	r31, r24
    192c:	18 f0       	brcs	.+6      	; 0x1934 <nwkFrameNext+0x18>
    192e:	12 c0       	rjmp	.+36     	; 0x1954 <nwkFrameNext+0x38>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    1930:	e4 ee       	ldi	r30, 0xE4	; 228
    1932:	f3 e0       	ldi	r31, 0x03	; 3
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    1934:	80 81       	ld	r24, Z
    1936:	88 23       	and	r24, r24
    1938:	21 f0       	breq	.+8      	; 0x1942 <nwkFrameNext+0x26>
    193a:	0f c0       	rjmp	.+30     	; 0x195a <nwkFrameNext+0x3e>
    193c:	80 81       	ld	r24, Z
    193e:	81 11       	cpse	r24, r1
    1940:	0f c0       	rjmp	.+30     	; 0x1960 <nwkFrameNext+0x44>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1942:	e7 57       	subi	r30, 0x77	; 119
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	89 e0       	ldi	r24, 0x09	; 9
    1948:	ee 33       	cpi	r30, 0x3E	; 62
    194a:	f8 07       	cpc	r31, r24
    194c:	b8 f3       	brcs	.-18     	; 0x193c <nwkFrameNext+0x20>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	08 95       	ret
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	08 95       	ret
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    195a:	8e 2f       	mov	r24, r30
    195c:	9f 2f       	mov	r25, r31
    195e:	08 95       	ret
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1960:	8e 2f       	mov	r24, r30
    1962:	9f 2f       	mov	r25, r31
			return frame;
		}
	}

	return NULL;
}
    1964:	08 95       	ret

00001966 <nwkFrameCommandInit>:
/*************************************************************************//**
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    1966:	fc 01       	movw	r30, r24
	frame->tx.status = NWK_SUCCESS_STATUS;
    1968:	dc 01       	movw	r26, r24
    196a:	ad 57       	subi	r26, 0x7D	; 125
    196c:	bf 4f       	sbci	r27, 0xFF	; 255
    196e:	1c 92       	st	X, r1
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1970:	a3 e6       	ldi	r26, 0x63	; 99
    1972:	ba e0       	ldi	r27, 0x0A	; 10
    1974:	14 96       	adiw	r26, 0x04	; 4
    1976:	9c 91       	ld	r25, X
    1978:	14 97       	sbiw	r26, 0x04	; 4
    197a:	9f 5f       	subi	r25, 0xFF	; 255
    197c:	14 96       	adiw	r26, 0x04	; 4
    197e:	9c 93       	st	X, r25
    1980:	14 97       	sbiw	r26, 0x04	; 4
    1982:	94 87       	std	Z+12, r25	; 0x0c
	frame->header.nwkSrcAddr = nwkIb.addr;
    1984:	8d 91       	ld	r24, X+
    1986:	9c 91       	ld	r25, X
    1988:	96 87       	std	Z+14, r25	; 0x0e
    198a:	85 87       	std	Z+13, r24	; 0x0d
    198c:	08 95       	ret

0000198e <nwkRxSeriveDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
	nwkRxAckControl = control;
    198e:	dc 01       	movw	r26, r24
    1990:	19 96       	adiw	r26, 0x09	; 9
    1992:	2c 91       	ld	r18, X
    1994:	19 97       	sbiw	r26, 0x09	; 9
    1996:	22 23       	and	r18, r18
    1998:	49 f0       	breq	.+18     	; 0x19ac <nwkRxSeriveDataInd+0x1e>
    199a:	17 96       	adiw	r26, 0x07	; 7
    199c:	ed 91       	ld	r30, X+
    199e:	fc 91       	ld	r31, X
    19a0:	18 97       	sbiw	r26, 0x08	; 8
    19a2:	20 81       	ld	r18, Z
    19a4:	21 11       	cpse	r18, r1
    19a6:	04 c0       	rjmp	.+8      	; 0x19b0 <nwkRxSeriveDataInd+0x22>
    19a8:	81 c3       	rjmp	.+1794   	; 0x20ac <nwkTxAckReceived>
    19aa:	08 95       	ret
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	08 95       	ret
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	08 95       	ret

000019b4 <nwkRxDuplicateRejectionTimerHandler>:
    19b4:	bc 01       	movw	r22, r24
    19b6:	e0 e5       	ldi	r30, 0x50	; 80
    19b8:	f9 e0       	ldi	r31, 0x09	; 9
    19ba:	2a e4       	ldi	r18, 0x4A	; 74
    19bc:	3a e0       	ldi	r19, 0x0A	; 10
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	51 e0       	ldi	r21, 0x01	; 1
    19c2:	90 81       	ld	r25, Z
    19c4:	99 23       	and	r25, r25
    19c6:	19 f0       	breq	.+6      	; 0x19ce <nwkRxDuplicateRejectionTimerHandler+0x1a>
    19c8:	91 50       	subi	r25, 0x01	; 1
    19ca:	90 83       	st	Z, r25
    19cc:	45 2f       	mov	r20, r21
    19ce:	35 96       	adiw	r30, 0x05	; 5
    19d0:	e2 17       	cp	r30, r18
    19d2:	f3 07       	cpc	r31, r19
    19d4:	b1 f7       	brne	.-20     	; 0x19c2 <nwkRxDuplicateRejectionTimerHandler+0xe>
    19d6:	44 23       	and	r20, r20
    19d8:	11 f0       	breq	.+4      	; 0x19de <nwkRxDuplicateRejectionTimerHandler+0x2a>
    19da:	cb 01       	movw	r24, r22
    19dc:	b2 cc       	rjmp	.-1692   	; 0x1342 <SYS_TimerStart>
    19de:	08 95       	ret

000019e0 <nwkRxInit>:
    19e0:	e0 e5       	ldi	r30, 0x50	; 80
    19e2:	f9 e0       	ldi	r31, 0x09	; 9
    19e4:	8a e4       	ldi	r24, 0x4A	; 74
    19e6:	9a e0       	ldi	r25, 0x0A	; 10
    19e8:	10 82       	st	Z, r1
    19ea:	35 96       	adiw	r30, 0x05	; 5
    19ec:	e8 17       	cp	r30, r24
    19ee:	f9 07       	cpc	r31, r25
    19f0:	d9 f7       	brne	.-10     	; 0x19e8 <nwkRxInit+0x8>
    19f2:	ee e3       	ldi	r30, 0x3E	; 62
    19f4:	f9 e0       	ldi	r31, 0x09	; 9
    19f6:	84 e6       	ldi	r24, 0x64	; 100
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a0 e0       	ldi	r26, 0x00	; 0
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	86 83       	std	Z+6, r24	; 0x06
    1a00:	97 83       	std	Z+7, r25	; 0x07
    1a02:	a0 87       	std	Z+8, r26	; 0x08
    1a04:	b1 87       	std	Z+9, r27	; 0x09
    1a06:	12 86       	std	Z+10, r1	; 0x0a
    1a08:	8a ed       	ldi	r24, 0xDA	; 218
    1a0a:	9c e0       	ldi	r25, 0x0C	; 12
    1a0c:	94 87       	std	Z+12, r25	; 0x0c
    1a0e:	83 87       	std	Z+11, r24	; 0x0b
    1a10:	67 ec       	ldi	r22, 0xC7	; 199
    1a12:	7c e0       	ldi	r23, 0x0C	; 12
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	3b ce       	rjmp	.-906    	; 0x168e <NWK_OpenEndpoint>
    1a18:	08 95       	ret

00001a1a <PHY_DataInd>:
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	dc 01       	movw	r26, r24
    1a20:	ed 91       	ld	r30, X+
    1a22:	fc 91       	ld	r31, X
    1a24:	11 97       	sbiw	r26, 0x01	; 1
    1a26:	21 81       	ldd	r18, Z+1	; 0x01
    1a28:	28 38       	cpi	r18, 0x88	; 136
    1a2a:	f1 f4       	brne	.+60     	; 0x1a68 <PHY_DataInd+0x4e>
    1a2c:	20 81       	ld	r18, Z
    1a2e:	2f 7d       	andi	r18, 0xDF	; 223
    1a30:	21 34       	cpi	r18, 0x41	; 65
    1a32:	d1 f4       	brne	.+52     	; 0x1a68 <PHY_DataInd+0x4e>
    1a34:	12 96       	adiw	r26, 0x02	; 2
    1a36:	2c 91       	ld	r18, X
    1a38:	20 31       	cpi	r18, 0x10	; 16
    1a3a:	b0 f0       	brcs	.+44     	; 0x1a68 <PHY_DataInd+0x4e>
    1a3c:	ec 01       	movw	r28, r24
    1a3e:	2d df       	rcall	.-422    	; 0x189a <nwkFrameAlloc>
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	91 f0       	breq	.+36     	; 0x1a68 <PHY_DataInd+0x4e>
    1a44:	20 e2       	ldi	r18, 0x20	; 32
    1a46:	fc 01       	movw	r30, r24
    1a48:	20 83       	st	Z, r18
    1a4a:	2a 81       	ldd	r18, Y+2	; 0x02
    1a4c:	21 83       	std	Z+1, r18	; 0x01
    1a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a50:	ed 57       	subi	r30, 0x7D	; 125
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	20 83       	st	Z, r18
    1a56:	2c 81       	ldd	r18, Y+4	; 0x04
    1a58:	31 96       	adiw	r30, 0x01	; 1
    1a5a:	20 83       	st	Z, r18
    1a5c:	4a 81       	ldd	r20, Y+2	; 0x02
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	68 81       	ld	r22, Y
    1a62:	79 81       	ldd	r23, Y+1	; 0x01
    1a64:	02 96       	adiw	r24, 0x02	; 2
    1a66:	6e d6       	rcall	.+3292   	; 0x2744 <memcpy>
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	08 95       	ret

00001a6e <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1a6e:	2f 92       	push	r2
    1a70:	3f 92       	push	r3
    1a72:	4f 92       	push	r4
    1a74:	5f 92       	push	r5
    1a76:	6f 92       	push	r6
    1a78:	7f 92       	push	r7
    1a7a:	8f 92       	push	r8
    1a7c:	9f 92       	push	r9
    1a7e:	af 92       	push	r10
    1a80:	bf 92       	push	r11
    1a82:	cf 92       	push	r12
    1a84:	df 92       	push	r13
    1a86:	ef 92       	push	r14
    1a88:	ff 92       	push	r15
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	2c 97       	sbiw	r28, 0x0c	; 12
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
	NwkFrame_t *frame = NULL;
    1aa2:	00 e0       	ldi	r16, 0x00	; 0
    1aa4:	10 e0       	ldi	r17, 0x00	; 0

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    1aa6:	0f 2e       	mov	r0, r31
    1aa8:	f4 e2       	ldi	r31, 0x24	; 36
    1aaa:	bf 2e       	mov	r11, r31
    1aac:	f0 2d       	mov	r31, r0

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    1aae:	0f 2e       	mov	r0, r31
    1ab0:	f3 e6       	ldi	r31, 0x63	; 99
    1ab2:	ef 2e       	mov	r14, r31
    1ab4:	fa e0       	ldi	r31, 0x0A	; 10
    1ab6:	ff 2e       	mov	r15, r31
    1ab8:	f0 2d       	mov	r31, r0
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    1aba:	68 94       	set
    1abc:	aa 24       	eor	r10, r10
    1abe:	a4 f8       	bld	r10, 4
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    1ac0:	68 94       	set
    1ac2:	77 24       	eor	r7, r7
    1ac4:	73 f8       	bld	r7, 3
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    1ac6:	68 94       	set
    1ac8:	66 24       	eor	r6, r6
    1aca:	62 f8       	bld	r6, 2
	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    1acc:	21 2c       	mov	r2, r1
    1ace:	31 2c       	mov	r3, r1
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
				frame->state = NWK_RX_STATE_DECRYPT;
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    1ad0:	0f 2e       	mov	r0, r31
    1ad2:	f2 e2       	ldi	r31, 0x22	; 34
    1ad4:	5f 2e       	mov	r5, r31
    1ad6:	f0 2d       	mov	r31, r0
	}

	freeEntry->src = header->nwkSrcAddr;
	freeEntry->seq = header->nwkSeq;
	freeEntry->mask = 1;
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1ad8:	0f 2e       	mov	r0, r31
    1ada:	f5 e1       	ldi	r31, 0x15	; 21
    1adc:	4f 2e       	mov	r4, r31
    1ade:	f0 2d       	mov	r31, r0
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    1ae0:	cc 24       	eor	r12, r12
    1ae2:	c3 94       	inc	r12
    1ae4:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1ae6:	99 c1       	rjmp	.+818    	; 0x1e1a <nwkRxTaskHandler+0x3ac>
		switch (frame->state) {
    1ae8:	d8 01       	movw	r26, r16
    1aea:	8c 91       	ld	r24, X
    1aec:	82 32       	cpi	r24, 0x22	; 34
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <nwkRxTaskHandler+0x84>
    1af0:	c8 c0       	rjmp	.+400    	; 0x1c82 <nwkRxTaskHandler+0x214>
    1af2:	84 32       	cpi	r24, 0x24	; 36
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <nwkRxTaskHandler+0x8a>
    1af6:	8f c1       	rjmp	.+798    	; 0x1e16 <nwkRxTaskHandler+0x3a8>
    1af8:	80 32       	cpi	r24, 0x20	; 32
    1afa:	09 f0       	breq	.+2      	; 0x1afe <nwkRxTaskHandler+0x90>
    1afc:	8e c1       	rjmp	.+796    	; 0x1e1a <nwkRxTaskHandler+0x3ac>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    1afe:	bc 92       	st	X, r11

#ifndef NWK_ENABLE_SECURITY
	if (header->nwkFcf.security) {
    1b00:	1b 96       	adiw	r26, 0x0b	; 11
    1b02:	8c 91       	ld	r24, X
    1b04:	1b 97       	sbiw	r26, 0x0b	; 11
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    1b06:	98 2f       	mov	r25, r24
    1b08:	9a 70       	andi	r25, 0x0A	; 10
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <nwkRxTaskHandler+0xa0>
    1b0c:	86 c1       	rjmp	.+780    	; 0x1e1a <nwkRxTaskHandler+0x3ac>
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    1b0e:	15 96       	adiw	r26, 0x05	; 5
    1b10:	2d 91       	ld	r18, X+
    1b12:	3c 91       	ld	r19, X
    1b14:	16 97       	sbiw	r26, 0x06	; 6
    1b16:	2f 3f       	cpi	r18, 0xFF	; 255
    1b18:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1a:	79 f4       	brne	.+30     	; 0x1b3a <nwkRxTaskHandler+0xcc>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	87 85       	ldd	r24, Z+15	; 0x0f
    1b20:	90 89       	ldd	r25, Z+16	; 0x10
    1b22:	d7 01       	movw	r26, r14
    1b24:	2d 91       	ld	r18, X+
    1b26:	3c 91       	ld	r19, X
    1b28:	28 17       	cp	r18, r24
    1b2a:	39 07       	cpc	r19, r25
    1b2c:	19 f0       	breq	.+6      	; 0x1b34 <nwkRxTaskHandler+0xc6>
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <nwkRxTaskHandler+0xc6>
    1b32:	73 c1       	rjmp	.+742    	; 0x1e1a <nwkRxTaskHandler+0x3ac>
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
				frame->state = NWK_RX_STATE_DECRYPT;
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    1b34:	f8 01       	movw	r30, r16
    1b36:	50 82       	st	Z, r5
    1b38:	70 c1       	rjmp	.+736    	; 0x1e1a <nwkRxTaskHandler+0x3ac>
	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
		return;
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    1b3a:	d8 01       	movw	r26, r16
    1b3c:	1f 96       	adiw	r26, 0x0f	; 15
    1b3e:	2d 91       	ld	r18, X+
    1b40:	3c 91       	ld	r19, X
    1b42:	50 97       	sbiw	r26, 0x10	; 16
    1b44:	2f 3f       	cpi	r18, 0xFF	; 255
    1b46:	3f 4f       	sbci	r19, 0xFF	; 255
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <nwkRxTaskHandler+0xde>
    1b4a:	6e c1       	rjmp	.+732    	; 0x1e28 <nwkRxTaskHandler+0x3ba>
    1b4c:	80 ff       	sbrs	r24, 0
    1b4e:	6c c1       	rjmp	.+728    	; 0x1e28 <nwkRxTaskHandler+0x3ba>
    1b50:	64 c1       	rjmp	.+712    	; 0x1e1a <nwkRxTaskHandler+0x3ac>
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    1b52:	9c 01       	movw	r18, r24

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    1b54:	44 81       	ldd	r20, Z+4	; 0x04
    1b56:	44 23       	and	r20, r20
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <nwkRxTaskHandler+0xee>
    1b5a:	55 c0       	rjmp	.+170    	; 0x1c06 <nwkRxTaskHandler+0x198>
    1b5c:	40 81       	ld	r20, Z
    1b5e:	51 81       	ldd	r21, Z+1	; 0x01
    1b60:	46 17       	cp	r20, r22
    1b62:	57 07       	cpc	r21, r23
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <nwkRxTaskHandler+0xfa>
    1b66:	50 c0       	rjmp	.+160    	; 0x1c08 <nwkRxTaskHandler+0x19a>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    1b68:	f8 01       	movw	r30, r16
    1b6a:	94 85       	ldd	r25, Z+12	; 0x0c
    1b6c:	f9 01       	movw	r30, r18
    1b6e:	ee 0f       	add	r30, r30
    1b70:	ff 1f       	adc	r31, r31
    1b72:	ee 0f       	add	r30, r30
    1b74:	ff 1f       	adc	r31, r31
    1b76:	e2 0f       	add	r30, r18
    1b78:	f3 1f       	adc	r31, r19
    1b7a:	e4 5b       	subi	r30, 0xB4	; 180
    1b7c:	f6 4f       	sbci	r31, 0xF6	; 246
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	89 1b       	sub	r24, r25

			if (diff < 8) {
    1b82:	88 30       	cpi	r24, 0x08	; 8
    1b84:	38 f5       	brcc	.+78     	; 0x1bd4 <nwkRxTaskHandler+0x166>
				if (entry->mask & (1 << diff)) {
    1b86:	f9 01       	movw	r30, r18
    1b88:	ee 0f       	add	r30, r30
    1b8a:	ff 1f       	adc	r31, r31
    1b8c:	ee 0f       	add	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	e2 0f       	add	r30, r18
    1b92:	f3 1f       	adc	r31, r19
    1b94:	e4 5b       	subi	r30, 0xB4	; 180
    1b96:	f6 4f       	sbci	r31, 0xF6	; 246
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	49 2f       	mov	r20, r25
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	08 2e       	mov	r0, r24
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <nwkRxTaskHandler+0x138>
    1ba2:	55 95       	asr	r21
    1ba4:	47 95       	ror	r20
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <nwkRxTaskHandler+0x134>
    1baa:	40 fd       	sbrc	r20, 0
    1bac:	36 c1       	rjmp	.+620    	; 0x1e1a <nwkRxTaskHandler+0x3ac>
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    1bae:	f9 01       	movw	r30, r18
    1bb0:	ee 0f       	add	r30, r30
    1bb2:	ff 1f       	adc	r31, r31
    1bb4:	ee 0f       	add	r30, r30
    1bb6:	ff 1f       	adc	r31, r31
    1bb8:	2e 0f       	add	r18, r30
    1bba:	3f 1f       	adc	r19, r31
    1bbc:	f9 01       	movw	r30, r18
    1bbe:	e4 5b       	subi	r30, 0xB4	; 180
    1bc0:	f6 4f       	sbci	r31, 0xF6	; 246
    1bc2:	96 01       	movw	r18, r12
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <nwkRxTaskHandler+0x15c>
    1bc6:	22 0f       	add	r18, r18
    1bc8:	33 1f       	adc	r19, r19
    1bca:	8a 95       	dec	r24
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <nwkRxTaskHandler+0x158>
    1bce:	92 2b       	or	r25, r18
    1bd0:	93 83       	std	Z+3, r25	; 0x03
    1bd2:	3a c1       	rjmp	.+628    	; 0x1e48 <nwkRxTaskHandler+0x3da>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    1bd4:	f9 01       	movw	r30, r18
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	ff 1f       	adc	r31, r31
    1bda:	ee 0f       	add	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	2e 0f       	add	r18, r30
    1be0:	3f 1f       	adc	r19, r31
    1be2:	f9 01       	movw	r30, r18
    1be4:	e4 5b       	subi	r30, 0xB4	; 180
    1be6:	f6 4f       	sbci	r31, 0xF6	; 246
    1be8:	92 83       	std	Z+2, r25	; 0x02
				entry->mask = (entry->mask << shift) | 1;
    1bea:	23 81       	ldd	r18, Z+3	; 0x03
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 95       	neg	r24
    1bf0:	a9 01       	movw	r20, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <nwkRxTaskHandler+0x18a>
    1bf4:	44 0f       	add	r20, r20
    1bf6:	55 1f       	adc	r21, r21
    1bf8:	8a 95       	dec	r24
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <nwkRxTaskHandler+0x186>
    1bfc:	ca 01       	movw	r24, r20
    1bfe:	81 60       	ori	r24, 0x01	; 1
    1c00:	83 83       	std	Z+3, r24	; 0x03
				entry->ttl = DUPLICATE_REJECTION_TTL;
    1c02:	44 82       	std	Z+4, r4	; 0x04
    1c04:	21 c1       	rjmp	.+578    	; 0x1e48 <nwkRxTaskHandler+0x3da>
				return false;
			}
		}

		if (0 == entry->ttl) {
			freeEntry = entry;
    1c06:	df 01       	movw	r26, r30
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    1c0c:	82 33       	cpi	r24, 0x32	; 50
    1c0e:	91 05       	cpc	r25, r1
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <nwkRxTaskHandler+0x1a6>
    1c12:	9f cf       	rjmp	.-194    	; 0x1b52 <nwkRxTaskHandler+0xe4>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    1c14:	10 97       	sbiw	r26, 0x00	; 0
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <nwkRxTaskHandler+0x1ac>
    1c18:	00 c1       	rjmp	.+512    	; 0x1e1a <nwkRxTaskHandler+0x3ac>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    1c1a:	11 96       	adiw	r26, 0x01	; 1
    1c1c:	7c 93       	st	X, r23
    1c1e:	6e 93       	st	-X, r22
	freeEntry->seq = header->nwkSeq;
    1c20:	f8 01       	movw	r30, r16
    1c22:	84 85       	ldd	r24, Z+12	; 0x0c
    1c24:	12 96       	adiw	r26, 0x02	; 2
    1c26:	8c 93       	st	X, r24
    1c28:	12 97       	sbiw	r26, 0x02	; 2
	freeEntry->mask = 1;
    1c2a:	f1 e0       	ldi	r31, 0x01	; 1
    1c2c:	13 96       	adiw	r26, 0x03	; 3
    1c2e:	fc 93       	st	X, r31
    1c30:	13 97       	sbiw	r26, 0x03	; 3
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1c32:	14 96       	adiw	r26, 0x04	; 4
    1c34:	4c 92       	st	X, r4

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1c36:	8e e3       	ldi	r24, 0x3E	; 62
    1c38:	99 e0       	ldi	r25, 0x09	; 9
    1c3a:	83 db       	rcall	.-2298   	; 0x1342 <SYS_TimerStart>
    1c3c:	05 c1       	rjmp	.+522    	; 0x1e48 <nwkRxTaskHandler+0x3da>
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
				header->nwkDstAddr &&
    1c3e:	d8 01       	movw	r26, r16
    1c40:	1f 96       	adiw	r26, 0x0f	; 15
    1c42:	8d 91       	ld	r24, X+
    1c44:	9c 91       	ld	r25, X
    1c46:	50 97       	sbiw	r26, 0x10	; 16
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    1c48:	f7 01       	movw	r30, r14
    1c4a:	20 81       	ld	r18, Z
    1c4c:	31 81       	ldd	r19, Z+1	; 0x01
    1c4e:	28 17       	cp	r18, r24
    1c50:	39 07       	cpc	r19, r25
    1c52:	a1 f0       	breq	.+40     	; 0x1c7c <nwkRxTaskHandler+0x20e>
				header->nwkDstAddr &&
    1c54:	1b 96       	adiw	r26, 0x0b	; 11
    1c56:	2c 91       	ld	r18, X
    1c58:	22 fd       	sbrc	r18, 2
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    1c5a:	0d c0       	rjmp	.+26     	; 0x1c76 <nwkRxTaskHandler+0x208>
    1c5c:	c8 01       	movw	r24, r16
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    1c5e:	e3 d1       	rcall	.+966    	; 0x2026 <nwkTxBroadcastFrame>
    1c60:	d8 01       	movw	r26, r16
    1c62:	1f 96       	adiw	r26, 0x0f	; 15
    1c64:	8d 91       	ld	r24, X+
    1c66:	9c 91       	ld	r25, X
    1c68:	50 97       	sbiw	r26, 0x10	; 16
    1c6a:	f7 01       	movw	r30, r14
    1c6c:	20 81       	ld	r18, Z
    1c6e:	31 81       	ldd	r19, Z+1	; 0x01
    1c70:	28 17       	cp	r18, r24
    1c72:	39 07       	cpc	r19, r25
    1c74:	19 f0       	breq	.+6      	; 0x1c7c <nwkRxTaskHandler+0x20e>
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <nwkRxTaskHandler+0x20e>
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
				frame->state = NWK_RX_STATE_DECRYPT;
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    1c7a:	cf c0       	rjmp	.+414    	; 0x1e1a <nwkRxTaskHandler+0x3ac>
    1c7c:	d8 01       	movw	r26, r16
    1c7e:	5c 92       	st	X, r5
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    1c80:	cc c0       	rjmp	.+408    	; 0x1e1a <nwkRxTaskHandler+0x3ac>
    1c82:	10 92 4b 09 	sts	0x094B, r1	; 0x80094b <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    1c86:	f8 01       	movw	r30, r16
    1c88:	81 89       	ldd	r24, Z+17	; 0x11
    1c8a:	82 95       	swap	r24
    1c8c:	8f 70       	andi	r24, 0x0F	; 15
    1c8e:	e8 2f       	mov	r30, r24
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	ee 0f       	add	r30, r30
    1c94:	ff 1f       	adc	r31, r31
    1c96:	e7 59       	subi	r30, 0x97	; 151
    1c98:	f5 4f       	sbci	r31, 0xF5	; 245
    1c9a:	01 90       	ld	r0, Z+
    1c9c:	f0 81       	ld	r31, Z
    1c9e:	e0 2d       	mov	r30, r0
    1ca0:	30 97       	sbiw	r30, 0x00	; 0
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <nwkRxTaskHandler+0x238>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    1ca4:	61 c0       	rjmp	.+194    	; 0x1d68 <nwkRxTaskHandler+0x2fa>
    1ca6:	d8 01       	movw	r26, r16
    1ca8:	1d 96       	adiw	r26, 0x0d	; 13
    1caa:	2d 91       	ld	r18, X+
    1cac:	3c 91       	ld	r19, X
    1cae:	1e 97       	sbiw	r26, 0x0e	; 14
    1cb0:	3a 83       	std	Y+2, r19	; 0x02
	ind.dstAddr = header->nwkDstAddr;
    1cb2:	29 83       	std	Y+1, r18	; 0x01
    1cb4:	1f 96       	adiw	r26, 0x0f	; 15
    1cb6:	4d 91       	ld	r20, X+
    1cb8:	5c 91       	ld	r21, X
    1cba:	50 97       	sbiw	r26, 0x10	; 16
    1cbc:	5c 83       	std	Y+4, r21	; 0x04
	ind.srcEndpoint = header->nwkSrcEndpoint;
    1cbe:	4b 83       	std	Y+3, r20	; 0x03
    1cc0:	51 96       	adiw	r26, 0x11	; 17
    1cc2:	9c 91       	ld	r25, X
    1cc4:	51 97       	sbiw	r26, 0x11	; 17
    1cc6:	9f 70       	andi	r25, 0x0F	; 15
	ind.dstEndpoint = header->nwkDstEndpoint;
    1cc8:	9d 83       	std	Y+5, r25	; 0x05
	ind.data = frame->payload;
    1cca:	8e 83       	std	Y+6, r24	; 0x06
    1ccc:	af 57       	subi	r26, 0x7F	; 127
    1cce:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd0:	8d 91       	ld	r24, X+
    1cd2:	9c 91       	ld	r25, X
    1cd4:	99 87       	std	Y+9, r25	; 0x09

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    1cd6:	88 87       	std	Y+8, r24	; 0x08
    1cd8:	b8 01       	movw	r22, r16
    1cda:	6e 5f       	subi	r22, 0xFE	; 254
	ind.size = nwkFramePayloadSize(frame);
    1cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cde:	86 1b       	sub	r24, r22
    1ce0:	97 0b       	sbc	r25, r23
    1ce2:	d8 01       	movw	r26, r16
    1ce4:	11 96       	adiw	r26, 0x01	; 1
    1ce6:	9c 91       	ld	r25, X
    1ce8:	11 97       	sbiw	r26, 0x01	; 1
    1cea:	98 1b       	sub	r25, r24
	ind.lqi = frame->rx.lqi;
    1cec:	9a 87       	std	Y+10, r25	; 0x0a
    1cee:	ad 57       	subi	r26, 0x7D	; 125
    1cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf2:	8c 91       	ld	r24, X
	ind.rssi = frame->rx.rssi;
    1cf4:	8b 87       	std	Y+11, r24	; 0x0b
    1cf6:	11 96       	adiw	r26, 0x01	; 1
    1cf8:	8c 91       	ld	r24, X

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1cfa:	8c 87       	std	Y+12, r24	; 0x0c
    1cfc:	d8 01       	movw	r26, r16
    1cfe:	1b 96       	adiw	r26, 0x0b	; 11
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1d00:	9c 91       	ld	r25, X
    1d02:	69 2f       	mov	r22, r25
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1d04:	63 70       	andi	r22, 0x03	; 3
    1d06:	92 fd       	sbrc	r25, 2
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <nwkRxTaskHandler+0x2a0>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	01 c0       	rjmp	.+2      	; 0x1d10 <nwkRxTaskHandler+0x2a2>
    1d0e:	80 e2       	ldi	r24, 0x20	; 32
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1d10:	86 2b       	or	r24, r22
    1d12:	93 fd       	sbrc	r25, 3
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <nwkRxTaskHandler+0x2ac>
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	01 c0       	rjmp	.+2      	; 0x1d1c <nwkRxTaskHandler+0x2ae>
    1d1a:	90 e4       	ldi	r25, 0x40	; 64
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    1d1c:	89 2b       	or	r24, r25
    1d1e:	4f 3f       	cpi	r20, 0xFF	; 255
    1d20:	5f 4f       	sbci	r21, 0xFF	; 255
    1d22:	11 f0       	breq	.+4      	; 0x1d28 <nwkRxTaskHandler+0x2ba>
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	01 c0       	rjmp	.+2      	; 0x1d2a <nwkRxTaskHandler+0x2bc>
    1d28:	96 2d       	mov	r25, r6
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    1d2a:	89 2b       	or	r24, r25
    1d2c:	d8 01       	movw	r26, r16
    1d2e:	19 96       	adiw	r26, 0x09	; 9
    1d30:	4d 91       	ld	r20, X+
    1d32:	5c 91       	ld	r21, X
    1d34:	1a 97       	sbiw	r26, 0x0a	; 10
    1d36:	24 17       	cp	r18, r20
    1d38:	35 07       	cpc	r19, r21
    1d3a:	11 f0       	breq	.+4      	; 0x1d40 <nwkRxTaskHandler+0x2d2>
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <nwkRxTaskHandler+0x2d4>
    1d40:	97 2d       	mov	r25, r7
    1d42:	89 2b       	or	r24, r25
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    1d44:	8f 83       	std	Y+7, r24	; 0x07
    1d46:	d8 01       	movw	r26, r16
    1d48:	15 96       	adiw	r26, 0x05	; 5
    1d4a:	2d 91       	ld	r18, X+
    1d4c:	3c 91       	ld	r19, X
    1d4e:	16 97       	sbiw	r26, 0x06	; 6
    1d50:	2f 3f       	cpi	r18, 0xFF	; 255
    1d52:	3f 4f       	sbci	r19, 0xFF	; 255
    1d54:	11 f0       	breq	.+4      	; 0x1d5a <nwkRxTaskHandler+0x2ec>
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <nwkRxTaskHandler+0x2ee>
    1d5a:	9a 2d       	mov	r25, r10
    1d5c:	89 2b       	or	r24, r25
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1d5e:	8f 83       	std	Y+7, r24	; 0x07
    1d60:	ce 01       	movw	r24, r28
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	09 95       	icall
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    1d66:	01 c0       	rjmp	.+2      	; 0x1d6a <nwkRxTaskHandler+0x2fc>
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	f8 01       	movw	r30, r16
    1d6c:	93 85       	ldd	r25, Z+11	; 0x0b
		ack = false;
    1d6e:	90 ff       	sbrs	r25, 0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	d8 01       	movw	r26, r16
    1d74:	17 96       	adiw	r26, 0x07	; 7
    1d76:	2d 91       	ld	r18, X+
    1d78:	3c 91       	ld	r19, X
    1d7a:	18 97       	sbiw	r26, 0x08	; 8
    1d7c:	2f 3f       	cpi	r18, 0xFF	; 255
    1d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d80:	69 f4       	brne	.+26     	; 0x1d9c <nwkRxTaskHandler+0x32e>
    1d82:	f7 01       	movw	r30, r14
    1d84:	40 81       	ld	r20, Z
    1d86:	51 81       	ldd	r21, Z+1	; 0x01
    1d88:	d8 01       	movw	r26, r16
    1d8a:	1f 96       	adiw	r26, 0x0f	; 15
    1d8c:	2d 91       	ld	r18, X+
    1d8e:	3c 91       	ld	r19, X
    1d90:	50 97       	sbiw	r26, 0x10	; 16
    1d92:	42 17       	cp	r20, r18
    1d94:	53 07       	cpc	r21, r19
			nwkIb.addr == frame->header.nwkDstAddr &&
    1d96:	11 f4       	brne	.+4      	; 0x1d9c <nwkRxTaskHandler+0x32e>
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    1d98:	93 ff       	sbrs	r25, 3
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	25 81       	ldd	r18, Z+5	; 0x05
    1da0:	36 81       	ldd	r19, Z+6	; 0x06
    1da2:	2f 3f       	cpi	r18, 0xFF	; 255
    1da4:	3f 4f       	sbci	r19, 0xFF	; 255
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    1da6:	a1 f1       	breq	.+104    	; 0x1e10 <nwkRxTaskHandler+0x3a2>
    1da8:	d7 01       	movw	r26, r14
    1daa:	2d 91       	ld	r18, X+
    1dac:	3c 91       	ld	r19, X
    1dae:	2f 3f       	cpi	r18, 0xFF	; 255
		ack = false;
	}

	if (ack) {
    1db0:	3f 4f       	sbci	r19, 0xFF	; 255
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    1db2:	71 f1       	breq	.+92     	; 0x1e10 <nwkRxTaskHandler+0x3a2>
    1db4:	88 23       	and	r24, r24
    1db6:	61 f1       	breq	.+88     	; 0x1e10 <nwkRxTaskHandler+0x3a2>
    1db8:	70 dd       	rcall	.-1312   	; 0x189a <nwkFrameAlloc>
		return;
	}

	nwkFrameCommandInit(ack);
    1dba:	4c 01       	movw	r8, r24
    1dbc:	00 97       	sbiw	r24, 0x00	; 0

	ack->size += sizeof(NwkCommandAck_t);
    1dbe:	41 f1       	breq	.+80     	; 0x1e10 <nwkRxTaskHandler+0x3a2>
    1dc0:	d2 dd       	rcall	.-1116   	; 0x1966 <nwkFrameCommandInit>
    1dc2:	f4 01       	movw	r30, r8
    1dc4:	81 81       	ldd	r24, Z+1	; 0x01
	ack->tx.confirm = NULL;
    1dc6:	8d 5f       	subi	r24, 0xFD	; 253
    1dc8:	81 83       	std	Z+1, r24	; 0x01
    1dca:	e9 57       	subi	r30, 0x79	; 121
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1dce:	11 82       	std	Z+1, r1	; 0x01
    1dd0:	10 82       	st	Z, r1
    1dd2:	d8 01       	movw	r26, r16
    1dd4:	1b 96       	adiw	r26, 0x0b	; 11
    1dd6:	8c 91       	ld	r24, X
    1dd8:	1b 97       	sbiw	r26, 0x0b	; 11
    1dda:	86 95       	lsr	r24
    1ddc:	81 70       	andi	r24, 0x01	; 1
    1dde:	f4 01       	movw	r30, r8
    1de0:	93 85       	ldd	r25, Z+11	; 0x0b
    1de2:	80 fb       	bst	r24, 0
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1de4:	91 f9       	bld	r25, 1
    1de6:	93 87       	std	Z+11, r25	; 0x0b
    1de8:	1d 96       	adiw	r26, 0x0d	; 13
    1dea:	8d 91       	ld	r24, X+
    1dec:	9c 91       	ld	r25, X
    1dee:	1e 97       	sbiw	r26, 0x0e	; 14

	command = (NwkCommandAck_t *)ack->payload;
    1df0:	90 8b       	std	Z+16, r25	; 0x10
    1df2:	87 87       	std	Z+15, r24	; 0x0f
    1df4:	ef 57       	subi	r30, 0x7F	; 127
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	01 90       	ld	r0, Z+
	command->id = NWK_COMMAND_ACK;
    1dfa:	f0 81       	ld	r31, Z
	command->control = nwkRxAckControl;
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	10 82       	st	Z, r1
	command->seq = frame->header.nwkSeq;
    1e00:	80 91 4b 09 	lds	r24, 0x094B	; 0x80094b <nwkRxAckControl>

	nwkTxFrame(ack);
    1e04:	82 83       	std	Z+2, r24	; 0x02
    1e06:	1c 96       	adiw	r26, 0x0c	; 12

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    1e08:	8c 91       	ld	r24, X
    1e0a:	81 83       	std	Z+1, r24	; 0x01
		break;
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    1e0c:	c4 01       	movw	r24, r8
    1e0e:	bd d0       	rcall	.+378    	; 0x1f8a <nwkTxFrame>
    1e10:	d8 01       	movw	r26, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1e12:	bc 92       	st	X, r11
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <nwkRxTaskHandler+0x3ac>
    1e16:	c8 01       	movw	r24, r16
    1e18:	77 dd       	rcall	.-1298   	; 0x1908 <nwkFrameFree>
    1e1a:	c8 01       	movw	r24, r16
    1e1c:	7f dd       	rcall	.-1282   	; 0x191c <nwkFrameNext>
    1e1e:	8c 01       	movw	r16, r24
    1e20:	89 2b       	or	r24, r25
	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <nwkRxTaskHandler+0x3b8>
    1e24:	61 ce       	rjmp	.-830    	; 0x1ae8 <nwkRxTaskHandler+0x7a>
    1e26:	17 c0       	rjmp	.+46     	; 0x1e56 <nwkRxTaskHandler+0x3e8>
    1e28:	f8 01       	movw	r30, r16
    1e2a:	65 85       	ldd	r22, Z+13	; 0x0d
    1e2c:	76 85       	ldd	r23, Z+14	; 0x0e
    1e2e:	d7 01       	movw	r26, r14
    1e30:	8d 91       	ld	r24, X+
    1e32:	9c 91       	ld	r25, X
    1e34:	86 17       	cp	r24, r22
    1e36:	97 07       	cpc	r25, r23
    1e38:	81 f3       	breq	.-32     	; 0x1e1a <nwkRxTaskHandler+0x3ac>
    1e3a:	ec e4       	ldi	r30, 0x4C	; 76
    1e3c:	f9 e0       	ldi	r31, 0x09	; 9
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    1e42:	a2 2d       	mov	r26, r2
    1e44:	b3 2d       	mov	r27, r3
    1e46:	85 ce       	rjmp	.-758    	; 0x1b52 <nwkRxTaskHandler+0xe4>
    1e48:	f8 01       	movw	r30, r16
    1e4a:	87 81       	ldd	r24, Z+7	; 0x07
    1e4c:	90 85       	ldd	r25, Z+8	; 0x08
    1e4e:	01 96       	adiw	r24, 0x01	; 1
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    1e50:	09 f0       	breq	.+2      	; 0x1e54 <nwkRxTaskHandler+0x3e6>
    1e52:	06 cf       	rjmp	.-500    	; 0x1c60 <nwkRxTaskHandler+0x1f2>
    1e54:	f4 ce       	rjmp	.-536    	; 0x1c3e <nwkRxTaskHandler+0x1d0>
    1e56:	2c 96       	adiw	r28, 0x0c	; 12
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	ff 90       	pop	r15
    1e6c:	ef 90       	pop	r14
    1e6e:	df 90       	pop	r13
    1e70:	cf 90       	pop	r12
    1e72:	bf 90       	pop	r11
    1e74:	af 90       	pop	r10
    1e76:	9f 90       	pop	r9
    1e78:	8f 90       	pop	r8
    1e7a:	7f 90       	pop	r7
    1e7c:	6f 90       	pop	r6
    1e7e:	5f 90       	pop	r5
    1e80:	4f 90       	pop	r4
    1e82:	3f 90       	pop	r3
    1e84:	2f 90       	pop	r2
    1e86:	08 95       	ret

00001e88 <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
	frame->tx.status = status;
    1e88:	ef 92       	push	r14
    1e8a:	ff 92       	push	r15
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	cf 93       	push	r28
    1e92:	7c 01       	movw	r14, r24
    1e94:	10 e0       	ldi	r17, 0x00	; 0
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	01 e0       	ldi	r16, 0x01	; 1
    1e9c:	c3 e1       	ldi	r28, 0x13	; 19
    1e9e:	13 c0       	rjmp	.+38     	; 0x1ec6 <nwkTxDelayTimerHandler+0x3e>
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	20 81       	ld	r18, Z
    1ea4:	21 31       	cpi	r18, 0x11	; 17
    1ea6:	79 f4       	brne	.+30     	; 0x1ec6 <nwkTxDelayTimerHandler+0x3e>
    1ea8:	ec 57       	subi	r30, 0x7C	; 124
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	20 81       	ld	r18, Z
    1eae:	31 81       	ldd	r19, Z+1	; 0x01
    1eb0:	21 50       	subi	r18, 0x01	; 1
    1eb2:	31 09       	sbc	r19, r1
    1eb4:	31 83       	std	Z+1, r19	; 0x01
    1eb6:	20 83       	st	Z, r18
    1eb8:	23 2b       	or	r18, r19
    1eba:	21 f4       	brne	.+8      	; 0x1ec4 <nwkTxDelayTimerHandler+0x3c>
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	c0 83       	st	Z, r28
    1ec0:	10 2f       	mov	r17, r16
    1ec2:	01 c0       	rjmp	.+2      	; 0x1ec6 <nwkTxDelayTimerHandler+0x3e>
    1ec4:	10 2f       	mov	r17, r16
    1ec6:	2a dd       	rcall	.-1452   	; 0x191c <nwkFrameNext>
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	51 f7       	brne	.-44     	; 0x1ea0 <nwkTxDelayTimerHandler+0x18>
    1ecc:	11 23       	and	r17, r17
    1ece:	11 f0       	breq	.+4      	; 0x1ed4 <nwkTxDelayTimerHandler+0x4c>
    1ed0:	c7 01       	movw	r24, r14
    1ed2:	37 da       	rcall	.-2962   	; 0x1342 <SYS_TimerStart>
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	ff 90       	pop	r15
    1edc:	ef 90       	pop	r14
    1ede:	08 95       	ret

00001ee0 <nwkTxAckWaitTimerHandler>:
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	7c 01       	movw	r14, r24
    1eee:	10 e0       	ldi	r17, 0x00	; 0
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	01 e0       	ldi	r16, 0x01	; 1
    1ef6:	d7 e1       	ldi	r29, 0x17	; 23
    1ef8:	c0 e1       	ldi	r28, 0x10	; 16
    1efa:	16 c0       	rjmp	.+44     	; 0x1f28 <nwkTxAckWaitTimerHandler+0x48>
    1efc:	fc 01       	movw	r30, r24
    1efe:	20 81       	ld	r18, Z
    1f00:	26 31       	cpi	r18, 0x16	; 22
    1f02:	91 f4       	brne	.+36     	; 0x1f28 <nwkTxAckWaitTimerHandler+0x48>
    1f04:	ec 57       	subi	r30, 0x7C	; 124
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	20 81       	ld	r18, Z
    1f0a:	31 81       	ldd	r19, Z+1	; 0x01
    1f0c:	21 50       	subi	r18, 0x01	; 1
    1f0e:	31 09       	sbc	r19, r1
    1f10:	31 83       	std	Z+1, r19	; 0x01
    1f12:	20 83       	st	Z, r18
    1f14:	23 2b       	or	r18, r19
    1f16:	39 f4       	brne	.+14     	; 0x1f26 <nwkTxAckWaitTimerHandler+0x46>
    1f18:	fc 01       	movw	r30, r24
    1f1a:	d0 83       	st	Z, r29
    1f1c:	ed 57       	subi	r30, 0x7D	; 125
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	c0 83       	st	Z, r28
    1f22:	10 2f       	mov	r17, r16
    1f24:	01 c0       	rjmp	.+2      	; 0x1f28 <nwkTxAckWaitTimerHandler+0x48>
    1f26:	10 2f       	mov	r17, r16
    1f28:	f9 dc       	rcall	.-1550   	; 0x191c <nwkFrameNext>
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	39 f7       	brne	.-50     	; 0x1efc <nwkTxAckWaitTimerHandler+0x1c>
    1f2e:	11 23       	and	r17, r17
    1f30:	11 f0       	breq	.+4      	; 0x1f36 <nwkTxAckWaitTimerHandler+0x56>
    1f32:	c7 01       	movw	r24, r14
    1f34:	06 da       	rcall	.-3060   	; 0x1342 <SYS_TimerStart>
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	1f 91       	pop	r17
    1f3c:	0f 91       	pop	r16
    1f3e:	ff 90       	pop	r15
    1f40:	ef 90       	pop	r14
    1f42:	08 95       	ret

00001f44 <nwkTxInit>:
    1f44:	10 92 61 0a 	sts	0x0A61, r1	; 0x800a61 <nwkTxPhyActiveFrame+0x1>
    1f48:	10 92 60 0a 	sts	0x0A60, r1	; 0x800a60 <nwkTxPhyActiveFrame>
    1f4c:	e3 e5       	ldi	r30, 0x53	; 83
    1f4e:	fa e0       	ldi	r31, 0x0A	; 10
    1f50:	82 e3       	ldi	r24, 0x32	; 50
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a0 e0       	ldi	r26, 0x00	; 0
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	86 83       	std	Z+6, r24	; 0x06
    1f5a:	97 83       	std	Z+7, r25	; 0x07
    1f5c:	a0 87       	std	Z+8, r26	; 0x08
    1f5e:	b1 87       	std	Z+9, r27	; 0x09
    1f60:	12 86       	std	Z+10, r1	; 0x0a
    1f62:	80 e7       	ldi	r24, 0x70	; 112
    1f64:	9f e0       	ldi	r25, 0x0F	; 15
    1f66:	94 87       	std	Z+12, r25	; 0x0c
    1f68:	83 87       	std	Z+11, r24	; 0x0b
    1f6a:	e6 e4       	ldi	r30, 0x46	; 70
    1f6c:	fa e0       	ldi	r31, 0x0A	; 10
    1f6e:	8a e0       	ldi	r24, 0x0A	; 10
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	a0 e0       	ldi	r26, 0x00	; 0
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	86 83       	std	Z+6, r24	; 0x06
    1f78:	97 83       	std	Z+7, r25	; 0x07
    1f7a:	a0 87       	std	Z+8, r26	; 0x08
    1f7c:	b1 87       	std	Z+9, r27	; 0x09
    1f7e:	12 86       	std	Z+10, r1	; 0x0a
    1f80:	84 e4       	ldi	r24, 0x44	; 68
    1f82:	9f e0       	ldi	r25, 0x0F	; 15
    1f84:	94 87       	std	Z+12, r25	; 0x0c
    1f86:	83 87       	std	Z+11, r24	; 0x0b
    1f88:	08 95       	ret

00001f8a <nwkTxFrame>:
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	fc 01       	movw	r30, r24
    1f90:	dc 01       	movw	r26, r24
    1f92:	aa 57       	subi	r26, 0x7A	; 122
    1f94:	bf 4f       	sbci	r27, 0xFF	; 255
    1f96:	8c 91       	ld	r24, X
    1f98:	81 ff       	sbrs	r24, 1
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <nwkTxFrame+0x18>
    1f9c:	92 e1       	ldi	r25, 0x12	; 18
    1f9e:	90 83       	st	Z, r25
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <nwkTxFrame+0x1c>
    1fa2:	92 e1       	ldi	r25, 0x12	; 18
    1fa4:	90 83       	st	Z, r25
    1fa6:	df 01       	movw	r26, r30
    1fa8:	ad 57       	subi	r26, 0x7D	; 125
    1faa:	bf 4f       	sbci	r27, 0xFF	; 255
    1fac:	1c 92       	st	X, r1
    1fae:	80 ff       	sbrs	r24, 0
    1fb0:	05 c0       	rjmp	.+10     	; 0x1fbc <nwkTxFrame+0x32>
    1fb2:	8f ef       	ldi	r24, 0xFF	; 255
    1fb4:	9f ef       	ldi	r25, 0xFF	; 255
    1fb6:	96 83       	std	Z+6, r25	; 0x06
    1fb8:	85 83       	std	Z+5, r24	; 0x05
    1fba:	06 c0       	rjmp	.+12     	; 0x1fc8 <nwkTxFrame+0x3e>
    1fbc:	80 91 65 0a 	lds	r24, 0x0A65	; 0x800a65 <nwkIb+0x2>
    1fc0:	90 91 66 0a 	lds	r25, 0x0A66	; 0x800a66 <nwkIb+0x3>
    1fc4:	96 83       	std	Z+6, r25	; 0x06
    1fc6:	85 83       	std	Z+5, r24	; 0x05
    1fc8:	27 85       	ldd	r18, Z+15	; 0x0f
    1fca:	30 89       	ldd	r19, Z+16	; 0x10
    1fcc:	30 87       	std	Z+8, r19	; 0x08
    1fce:	27 83       	std	Z+7, r18	; 0x07
    1fd0:	a3 e6       	ldi	r26, 0x63	; 99
    1fd2:	ba e0       	ldi	r27, 0x0A	; 10
    1fd4:	8d 91       	ld	r24, X+
    1fd6:	9c 91       	ld	r25, X
    1fd8:	11 97       	sbiw	r26, 0x01	; 1
    1fda:	92 87       	std	Z+10, r25	; 0x0a
    1fdc:	81 87       	std	Z+9, r24	; 0x09
    1fde:	15 96       	adiw	r26, 0x05	; 5
    1fe0:	8c 91       	ld	r24, X
    1fe2:	15 97       	sbiw	r26, 0x05	; 5
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	15 96       	adiw	r26, 0x05	; 5
    1fe8:	8c 93       	st	X, r24
    1fea:	84 83       	std	Z+4, r24	; 0x04
    1fec:	2f 3f       	cpi	r18, 0xFF	; 255
    1fee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff0:	79 f4       	brne	.+30     	; 0x2010 <nwkTxFrame+0x86>
    1ff2:	ef 01       	movw	r28, r30
    1ff4:	81 e4       	ldi	r24, 0x41	; 65
    1ff6:	98 e8       	ldi	r25, 0x88	; 136
    1ff8:	93 83       	std	Z+3, r25	; 0x03
    1ffa:	82 83       	std	Z+2, r24	; 0x02
    1ffc:	95 d3       	rcall	.+1834   	; 0x2728 <rand>
    1ffe:	fe 01       	movw	r30, r28
    2000:	ec 57       	subi	r30, 0x7C	; 124
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	87 70       	andi	r24, 0x07	; 7
    2006:	99 27       	eor	r25, r25
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	80 83       	st	Z, r24
    200e:	08 c0       	rjmp	.+16     	; 0x2020 <nwkTxFrame+0x96>
    2010:	81 e6       	ldi	r24, 0x61	; 97
    2012:	98 e8       	ldi	r25, 0x88	; 136
    2014:	93 83       	std	Z+3, r25	; 0x03
    2016:	82 83       	std	Z+2, r24	; 0x02
    2018:	ec 57       	subi	r30, 0x7C	; 124
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	11 82       	std	Z+1, r1	; 0x01
    201e:	10 82       	st	Z, r1
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	08 95       	ret

00002026 <nwkTxBroadcastFrame>:
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	8c 01       	movw	r16, r24
    2030:	34 dc       	rcall	.-1944   	; 0x189a <nwkFrameAlloc>
    2032:	ec 01       	movw	r28, r24
    2034:	89 2b       	or	r24, r25
    2036:	a9 f1       	breq	.+106    	; 0x20a2 <nwkTxBroadcastFrame+0x7c>
    2038:	82 e1       	ldi	r24, 0x12	; 18
    203a:	88 83       	st	Y, r24
    203c:	f8 01       	movw	r30, r16
    203e:	81 81       	ldd	r24, Z+1	; 0x01
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	fe 01       	movw	r30, r28
    2044:	ed 57       	subi	r30, 0x7D	; 125
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	10 82       	st	Z, r1
    204a:	6e d3       	rcall	.+1756   	; 0x2728 <rand>
    204c:	fe 01       	movw	r30, r28
    204e:	ec 57       	subi	r30, 0x7C	; 124
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	87 70       	andi	r24, 0x07	; 7
    2054:	99 27       	eor	r25, r25
    2056:	01 96       	adiw	r24, 0x01	; 1
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	80 83       	st	Z, r24
    205c:	33 96       	adiw	r30, 0x03	; 3
    205e:	11 82       	std	Z+1, r1	; 0x01
    2060:	10 82       	st	Z, r1
    2062:	f8 01       	movw	r30, r16
    2064:	41 81       	ldd	r20, Z+1	; 0x01
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	b8 01       	movw	r22, r16
    206a:	6e 5f       	subi	r22, 0xFE	; 254
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	ce 01       	movw	r24, r28
    2070:	02 96       	adiw	r24, 0x02	; 2
    2072:	68 d3       	rcall	.+1744   	; 0x2744 <memcpy>
    2074:	81 e4       	ldi	r24, 0x41	; 65
    2076:	98 e8       	ldi	r25, 0x88	; 136
    2078:	9b 83       	std	Y+3, r25	; 0x03
    207a:	8a 83       	std	Y+2, r24	; 0x02
    207c:	8f ef       	ldi	r24, 0xFF	; 255
    207e:	9f ef       	ldi	r25, 0xFF	; 255
    2080:	98 87       	std	Y+8, r25	; 0x08
    2082:	8f 83       	std	Y+7, r24	; 0x07
    2084:	f8 01       	movw	r30, r16
    2086:	85 81       	ldd	r24, Z+5	; 0x05
    2088:	96 81       	ldd	r25, Z+6	; 0x06
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	e3 e6       	ldi	r30, 0x63	; 99
    2090:	fa e0       	ldi	r31, 0x0A	; 10
    2092:	80 81       	ld	r24, Z
    2094:	91 81       	ldd	r25, Z+1	; 0x01
    2096:	9a 87       	std	Y+10, r25	; 0x0a
    2098:	89 87       	std	Y+9, r24	; 0x09
    209a:	85 81       	ldd	r24, Z+5	; 0x05
    209c:	8f 5f       	subi	r24, 0xFF	; 255
    209e:	85 83       	std	Z+5, r24	; 0x05
    20a0:	8c 83       	std	Y+4, r24	; 0x04
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    20aa:	08 95       	ret

000020ac <nwkTxAckReceived>:
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	fc 01       	movw	r30, r24
    20b2:	21 85       	ldd	r18, Z+9	; 0x09
    20b4:	23 30       	cpi	r18, 0x03	; 3
    20b6:	d9 f4       	brne	.+54     	; 0x20ee <nwkTxAckReceived+0x42>
    20b8:	10 c0       	rjmp	.+32     	; 0x20da <nwkTxAckReceived+0x2e>
    20ba:	fc 01       	movw	r30, r24
    20bc:	20 81       	ld	r18, Z
    20be:	26 31       	cpi	r18, 0x16	; 22
    20c0:	89 f4       	brne	.+34     	; 0x20e4 <nwkTxAckReceived+0x38>
    20c2:	34 85       	ldd	r19, Z+12	; 0x0c
    20c4:	29 81       	ldd	r18, Y+1	; 0x01
    20c6:	32 13       	cpse	r19, r18
    20c8:	0d c0       	rjmp	.+26     	; 0x20e4 <nwkTxAckReceived+0x38>
    20ca:	27 e1       	ldi	r18, 0x17	; 23
    20cc:	20 83       	st	Z, r18
    20ce:	2a 81       	ldd	r18, Y+2	; 0x02
    20d0:	ea 57       	subi	r30, 0x7A	; 122
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	20 83       	st	Z, r18
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	0b c0       	rjmp	.+22     	; 0x20f0 <nwkTxAckReceived+0x44>
    20da:	fc 01       	movw	r30, r24
    20dc:	c7 81       	ldd	r28, Z+7	; 0x07
    20de:	d0 85       	ldd	r29, Z+8	; 0x08
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	1b dc       	rcall	.-1994   	; 0x191c <nwkFrameNext>
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	41 f7       	brne	.-48     	; 0x20ba <nwkTxAckReceived+0xe>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	01 c0       	rjmp	.+2      	; 0x20f0 <nwkTxAckReceived+0x44>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	df 91       	pop	r29
    20f2:	cf 91       	pop	r28
    20f4:	08 95       	ret

000020f6 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    20f6:	e0 91 60 0a 	lds	r30, 0x0A60	; 0x800a60 <nwkTxPhyActiveFrame>
    20fa:	f0 91 61 0a 	lds	r31, 0x0A61	; 0x800a61 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	21 f0       	breq	.+8      	; 0x210a <PHY_DataConf+0x14>
    2102:	48 f0       	brcs	.+18     	; 0x2116 <PHY_DataConf+0x20>
    2104:	82 30       	cpi	r24, 0x02	; 2
    2106:	19 f0       	breq	.+6      	; 0x210e <PHY_DataConf+0x18>
    2108:	04 c0       	rjmp	.+8      	; 0x2112 <PHY_DataConf+0x1c>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    210a:	80 e2       	ldi	r24, 0x20	; 32
    210c:	05 c0       	rjmp	.+10     	; 0x2118 <PHY_DataConf+0x22>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    210e:	81 e2       	ldi	r24, 0x21	; 33
    2110:	03 c0       	rjmp	.+6      	; 0x2118 <PHY_DataConf+0x22>

	default:
		return NWK_ERROR_STATUS;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	01 c0       	rjmp	.+2      	; 0x2118 <PHY_DataConf+0x22>
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    2116:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2118:	df 01       	movw	r26, r30
    211a:	ad 57       	subi	r26, 0x7D	; 125
    211c:	bf 4f       	sbci	r27, 0xFF	; 255
    211e:	8c 93       	st	X, r24
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    2120:	85 e1       	ldi	r24, 0x15	; 21
    2122:	80 83       	st	Z, r24
	nwkTxPhyActiveFrame = NULL;
    2124:	10 92 61 0a 	sts	0x0A61, r1	; 0x800a61 <nwkTxPhyActiveFrame+0x1>
    2128:	10 92 60 0a 	sts	0x0A60, r1	; 0x800a60 <nwkTxPhyActiveFrame>
	nwkIb.lock--;
    212c:	e3 e6       	ldi	r30, 0x63	; 99
    212e:	fa e0       	ldi	r31, 0x0A	; 10
    2130:	86 a1       	ldd	r24, Z+38	; 0x26
    2132:	97 a1       	ldd	r25, Z+39	; 0x27
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	97 a3       	std	Z+39, r25	; 0x27
    2138:	86 a3       	std	Z+38, r24	; 0x26
    213a:	08 95       	ret

0000213c <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    213c:	9f 92       	push	r9
    213e:	af 92       	push	r10
    2140:	bf 92       	push	r11
    2142:	cf 92       	push	r12
    2144:	df 92       	push	r13
    2146:	ef 92       	push	r14
    2148:	ff 92       	push	r15
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
	NwkFrame_t *frame = NULL;
    2152:	c0 e0       	ldi	r28, 0x00	; 0
    2154:	d0 e0       	ldi	r29, 0x00	; 0

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
				nwkTxPhyActiveFrame = frame;
				frame->state = NWK_TX_STATE_WAIT_CONF;
    2156:	0f 2e       	mov	r0, r31
    2158:	f4 e1       	ldi	r31, 0x14	; 20
    215a:	af 2e       	mov	r10, r31
    215c:	f0 2d       	mov	r31, r0
				PHY_DataReq(&(frame->size));
				nwkIb.lock++;
    215e:	03 e6       	ldi	r16, 0x63	; 99
    2160:	1a e0       	ldi	r17, 0x0A	; 10
					SYS_TimerStart(&nwkTxAckWaitTimer);
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    2162:	0f 2e       	mov	r0, r31
    2164:	f7 e1       	ldi	r31, 0x17	; 23
    2166:	df 2e       	mov	r13, r31
    2168:	f0 2d       	mov	r31, r0
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    216a:	0f 2e       	mov	r0, r31
    216c:	f6 e1       	ldi	r31, 0x16	; 22
    216e:	9f 2e       	mov	r9, r31
    2170:	f0 2d       	mov	r31, r0
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    2172:	0f 2e       	mov	r0, r31
    2174:	f5 e1       	ldi	r31, 0x15	; 21
    2176:	ef 2e       	mov	r14, r31
    2178:	f1 2c       	mov	r15, r1
    217a:	f0 2d       	mov	r31, r0
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
				SYS_TimerStart(&nwkTxDelayTimer);
			} else {
				frame->state = NWK_TX_STATE_SEND;
    217c:	0f 2e       	mov	r0, r31
    217e:	f3 e1       	ldi	r31, 0x13	; 19
    2180:	cf 2e       	mov	r12, r31
    2182:	f0 2d       	mov	r31, r0
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    2184:	0f 2e       	mov	r0, r31
    2186:	f1 e1       	ldi	r31, 0x11	; 17
    2188:	bf 2e       	mov	r11, r31
    218a:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    218c:	5c c0       	rjmp	.+184    	; 0x2246 <nwkTxTaskHandler+0x10a>
		switch (frame->state) {
    218e:	88 81       	ld	r24, Y
    2190:	83 31       	cpi	r24, 0x13	; 19
    2192:	c1 f0       	breq	.+48     	; 0x21c4 <nwkTxTaskHandler+0x88>
    2194:	18 f4       	brcc	.+6      	; 0x219c <nwkTxTaskHandler+0x60>
    2196:	82 31       	cpi	r24, 0x12	; 18
    2198:	39 f0       	breq	.+14     	; 0x21a8 <nwkTxTaskHandler+0x6c>
    219a:	55 c0       	rjmp	.+170    	; 0x2246 <nwkTxTaskHandler+0x10a>
    219c:	85 31       	cpi	r24, 0x15	; 21
    219e:	39 f1       	breq	.+78     	; 0x21ee <nwkTxTaskHandler+0xb2>
    21a0:	87 31       	cpi	r24, 0x17	; 23
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <nwkTxTaskHandler+0x6a>
    21a4:	43 c0       	rjmp	.+134    	; 0x222c <nwkTxTaskHandler+0xf0>
    21a6:	4f c0       	rjmp	.+158    	; 0x2246 <nwkTxTaskHandler+0x10a>
		break;
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    21a8:	fe 01       	movw	r30, r28
    21aa:	ec 57       	subi	r30, 0x7C	; 124
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 81       	ld	r24, Z
    21b0:	91 81       	ldd	r25, Z+1	; 0x01
    21b2:	89 2b       	or	r24, r25
    21b4:	29 f0       	breq	.+10     	; 0x21c0 <nwkTxTaskHandler+0x84>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    21b6:	b8 82       	st	Y, r11
				SYS_TimerStart(&nwkTxDelayTimer);
    21b8:	86 e4       	ldi	r24, 0x46	; 70
    21ba:	9a e0       	ldi	r25, 0x0A	; 10
    21bc:	c2 d8       	rcall	.-3708   	; 0x1342 <SYS_TimerStart>
    21be:	43 c0       	rjmp	.+134    	; 0x2246 <nwkTxTaskHandler+0x10a>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    21c0:	c8 82       	st	Y, r12
    21c2:	41 c0       	rjmp	.+130    	; 0x2246 <nwkTxTaskHandler+0x10a>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    21c4:	80 91 60 0a 	lds	r24, 0x0A60	; 0x800a60 <nwkTxPhyActiveFrame>
    21c8:	90 91 61 0a 	lds	r25, 0x0A61	; 0x800a61 <nwkTxPhyActiveFrame+0x1>
    21cc:	89 2b       	or	r24, r25
    21ce:	d9 f5       	brne	.+118    	; 0x2246 <nwkTxTaskHandler+0x10a>
				nwkTxPhyActiveFrame = frame;
    21d0:	d0 93 61 0a 	sts	0x0A61, r29	; 0x800a61 <nwkTxPhyActiveFrame+0x1>
    21d4:	c0 93 60 0a 	sts	0x0A60, r28	; 0x800a60 <nwkTxPhyActiveFrame>
				frame->state = NWK_TX_STATE_WAIT_CONF;
    21d8:	fe 01       	movw	r30, r28
    21da:	a1 92       	st	Z+, r10
				PHY_DataReq(&(frame->size));
    21dc:	cf 01       	movw	r24, r30
    21de:	92 d9       	rcall	.-3292   	; 0x1504 <PHY_DataReq>
				nwkIb.lock++;
    21e0:	f8 01       	movw	r30, r16
    21e2:	86 a1       	ldd	r24, Z+38	; 0x26
    21e4:	97 a1       	ldd	r25, Z+39	; 0x27
    21e6:	01 96       	adiw	r24, 0x01	; 1
    21e8:	97 a3       	std	Z+39, r25	; 0x27
    21ea:	86 a3       	std	Z+38, r24	; 0x26
    21ec:	2c c0       	rjmp	.+88     	; 0x2246 <nwkTxTaskHandler+0x10a>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    21ee:	fe 01       	movw	r30, r28
    21f0:	ed 57       	subi	r30, 0x7D	; 125
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 81       	ld	r24, Z
    21f6:	81 11       	cpse	r24, r1
    21f8:	17 c0       	rjmp	.+46     	; 0x2228 <nwkTxTaskHandler+0xec>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    21fa:	2d 85       	ldd	r18, Y+13	; 0x0d
    21fc:	3e 85       	ldd	r19, Y+14	; 0x0e
    21fe:	f8 01       	movw	r30, r16
    2200:	80 81       	ld	r24, Z
    2202:	91 81       	ldd	r25, Z+1	; 0x01
    2204:	28 17       	cp	r18, r24
    2206:	39 07       	cpc	r19, r25
    2208:	69 f4       	brne	.+26     	; 0x2224 <nwkTxTaskHandler+0xe8>
    220a:	8b 85       	ldd	r24, Y+11	; 0x0b
    220c:	80 ff       	sbrs	r24, 0
    220e:	0a c0       	rjmp	.+20     	; 0x2224 <nwkTxTaskHandler+0xe8>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    2210:	98 82       	st	Y, r9
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    2212:	fe 01       	movw	r30, r28
    2214:	ec 57       	subi	r30, 0x7C	; 124
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	f1 82       	std	Z+1, r15	; 0x01
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    221a:	e0 82       	st	Z, r14
    221c:	83 e5       	ldi	r24, 0x53	; 83
    221e:	9a e0       	ldi	r25, 0x0A	; 10
    2220:	90 d8       	rcall	.-3808   	; 0x1342 <SYS_TimerStart>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    2222:	11 c0       	rjmp	.+34     	; 0x2246 <nwkTxTaskHandler+0x10a>
    2224:	d8 82       	st	Y, r13
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    2226:	0f c0       	rjmp	.+30     	; 0x2246 <nwkTxTaskHandler+0x10a>
    2228:	d8 82       	st	Y, r13
		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
#endif
			if (NULL == frame->tx.confirm) {
    222a:	0d c0       	rjmp	.+26     	; 0x2246 <nwkTxTaskHandler+0x10a>
    222c:	fe 01       	movw	r30, r28
    222e:	e9 57       	subi	r30, 0x79	; 121
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	01 90       	ld	r0, Z+
    2234:	f0 81       	ld	r31, Z
    2236:	e0 2d       	mov	r30, r0
				nwkFrameFree(frame);
    2238:	30 97       	sbiw	r30, 0x00	; 0
    223a:	19 f4       	brne	.+6      	; 0x2242 <nwkTxTaskHandler+0x106>
    223c:	ce 01       	movw	r24, r28
			} else {
				frame->tx.confirm(frame);
    223e:	64 db       	rcall	.-2360   	; 0x1908 <nwkFrameFree>
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <nwkTxTaskHandler+0x10a>
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2242:	ce 01       	movw	r24, r28
    2244:	09 95       	icall
    2246:	ce 01       	movw	r24, r28
    2248:	69 db       	rcall	.-2350   	; 0x191c <nwkFrameNext>
    224a:	ec 01       	movw	r28, r24
    224c:	89 2b       	or	r24, r25
    224e:	09 f0       	breq	.+2      	; 0x2252 <nwkTxTaskHandler+0x116>

		default:
			break;
		}
	}
}
    2250:	9e cf       	rjmp	.-196    	; 0x218e <nwkTxTaskHandler+0x52>
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	1f 91       	pop	r17
    2258:	0f 91       	pop	r16
    225a:	ff 90       	pop	r15
    225c:	ef 90       	pop	r14
    225e:	df 90       	pop	r13
    2260:	cf 90       	pop	r12
    2262:	bf 90       	pop	r11
    2264:	af 90       	pop	r10
    2266:	9f 90       	pop	r9
    2268:	08 95       	ret

0000226a <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    226a:	08 95       	ret

0000226c <__divsf3>:
    226c:	0c d0       	rcall	.+24     	; 0x2286 <__divsf3x>
    226e:	e7 c0       	rjmp	.+462    	; 0x243e <__fp_round>
    2270:	df d0       	rcall	.+446    	; 0x2430 <__fp_pscB>
    2272:	40 f0       	brcs	.+16     	; 0x2284 <__divsf3+0x18>
    2274:	d6 d0       	rcall	.+428    	; 0x2422 <__fp_pscA>
    2276:	30 f0       	brcs	.+12     	; 0x2284 <__divsf3+0x18>
    2278:	21 f4       	brne	.+8      	; 0x2282 <__divsf3+0x16>
    227a:	5f 3f       	cpi	r21, 0xFF	; 255
    227c:	19 f0       	breq	.+6      	; 0x2284 <__divsf3+0x18>
    227e:	c8 c0       	rjmp	.+400    	; 0x2410 <__fp_inf>
    2280:	51 11       	cpse	r21, r1
    2282:	11 c1       	rjmp	.+546    	; 0x24a6 <__fp_szero>
    2284:	cb c0       	rjmp	.+406    	; 0x241c <__fp_nan>

00002286 <__divsf3x>:
    2286:	ec d0       	rcall	.+472    	; 0x2460 <__fp_split3>
    2288:	98 f3       	brcs	.-26     	; 0x2270 <__divsf3+0x4>

0000228a <__divsf3_pse>:
    228a:	99 23       	and	r25, r25
    228c:	c9 f3       	breq	.-14     	; 0x2280 <__divsf3+0x14>
    228e:	55 23       	and	r21, r21
    2290:	b1 f3       	breq	.-20     	; 0x227e <__divsf3+0x12>
    2292:	95 1b       	sub	r25, r21
    2294:	55 0b       	sbc	r21, r21
    2296:	bb 27       	eor	r27, r27
    2298:	aa 27       	eor	r26, r26
    229a:	62 17       	cp	r22, r18
    229c:	73 07       	cpc	r23, r19
    229e:	84 07       	cpc	r24, r20
    22a0:	38 f0       	brcs	.+14     	; 0x22b0 <__divsf3_pse+0x26>
    22a2:	9f 5f       	subi	r25, 0xFF	; 255
    22a4:	5f 4f       	sbci	r21, 0xFF	; 255
    22a6:	22 0f       	add	r18, r18
    22a8:	33 1f       	adc	r19, r19
    22aa:	44 1f       	adc	r20, r20
    22ac:	aa 1f       	adc	r26, r26
    22ae:	a9 f3       	breq	.-22     	; 0x229a <__divsf3_pse+0x10>
    22b0:	33 d0       	rcall	.+102    	; 0x2318 <__divsf3_pse+0x8e>
    22b2:	0e 2e       	mov	r0, r30
    22b4:	3a f0       	brmi	.+14     	; 0x22c4 <__divsf3_pse+0x3a>
    22b6:	e0 e8       	ldi	r30, 0x80	; 128
    22b8:	30 d0       	rcall	.+96     	; 0x231a <__divsf3_pse+0x90>
    22ba:	91 50       	subi	r25, 0x01	; 1
    22bc:	50 40       	sbci	r21, 0x00	; 0
    22be:	e6 95       	lsr	r30
    22c0:	00 1c       	adc	r0, r0
    22c2:	ca f7       	brpl	.-14     	; 0x22b6 <__divsf3_pse+0x2c>
    22c4:	29 d0       	rcall	.+82     	; 0x2318 <__divsf3_pse+0x8e>
    22c6:	fe 2f       	mov	r31, r30
    22c8:	27 d0       	rcall	.+78     	; 0x2318 <__divsf3_pse+0x8e>
    22ca:	66 0f       	add	r22, r22
    22cc:	77 1f       	adc	r23, r23
    22ce:	88 1f       	adc	r24, r24
    22d0:	bb 1f       	adc	r27, r27
    22d2:	26 17       	cp	r18, r22
    22d4:	37 07       	cpc	r19, r23
    22d6:	48 07       	cpc	r20, r24
    22d8:	ab 07       	cpc	r26, r27
    22da:	b0 e8       	ldi	r27, 0x80	; 128
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <__divsf3_pse+0x56>
    22de:	bb 0b       	sbc	r27, r27
    22e0:	80 2d       	mov	r24, r0
    22e2:	bf 01       	movw	r22, r30
    22e4:	ff 27       	eor	r31, r31
    22e6:	93 58       	subi	r25, 0x83	; 131
    22e8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ea:	2a f0       	brmi	.+10     	; 0x22f6 <__divsf3_pse+0x6c>
    22ec:	9e 3f       	cpi	r25, 0xFE	; 254
    22ee:	51 05       	cpc	r21, r1
    22f0:	68 f0       	brcs	.+26     	; 0x230c <__divsf3_pse+0x82>
    22f2:	8e c0       	rjmp	.+284    	; 0x2410 <__fp_inf>
    22f4:	d8 c0       	rjmp	.+432    	; 0x24a6 <__fp_szero>
    22f6:	5f 3f       	cpi	r21, 0xFF	; 255
    22f8:	ec f3       	brlt	.-6      	; 0x22f4 <__divsf3_pse+0x6a>
    22fa:	98 3e       	cpi	r25, 0xE8	; 232
    22fc:	dc f3       	brlt	.-10     	; 0x22f4 <__divsf3_pse+0x6a>
    22fe:	86 95       	lsr	r24
    2300:	77 95       	ror	r23
    2302:	67 95       	ror	r22
    2304:	b7 95       	ror	r27
    2306:	f7 95       	ror	r31
    2308:	9f 5f       	subi	r25, 0xFF	; 255
    230a:	c9 f7       	brne	.-14     	; 0x22fe <__divsf3_pse+0x74>
    230c:	88 0f       	add	r24, r24
    230e:	91 1d       	adc	r25, r1
    2310:	96 95       	lsr	r25
    2312:	87 95       	ror	r24
    2314:	97 f9       	bld	r25, 7
    2316:	08 95       	ret
    2318:	e1 e0       	ldi	r30, 0x01	; 1
    231a:	66 0f       	add	r22, r22
    231c:	77 1f       	adc	r23, r23
    231e:	88 1f       	adc	r24, r24
    2320:	bb 1f       	adc	r27, r27
    2322:	62 17       	cp	r22, r18
    2324:	73 07       	cpc	r23, r19
    2326:	84 07       	cpc	r24, r20
    2328:	ba 07       	cpc	r27, r26
    232a:	20 f0       	brcs	.+8      	; 0x2334 <__divsf3_pse+0xaa>
    232c:	62 1b       	sub	r22, r18
    232e:	73 0b       	sbc	r23, r19
    2330:	84 0b       	sbc	r24, r20
    2332:	ba 0b       	sbc	r27, r26
    2334:	ee 1f       	adc	r30, r30
    2336:	88 f7       	brcc	.-30     	; 0x231a <__divsf3_pse+0x90>
    2338:	e0 95       	com	r30
    233a:	08 95       	ret

0000233c <__fixunssfsi>:
    233c:	99 d0       	rcall	.+306    	; 0x2470 <__fp_splitA>
    233e:	88 f0       	brcs	.+34     	; 0x2362 <__fixunssfsi+0x26>
    2340:	9f 57       	subi	r25, 0x7F	; 127
    2342:	90 f0       	brcs	.+36     	; 0x2368 <__fixunssfsi+0x2c>
    2344:	b9 2f       	mov	r27, r25
    2346:	99 27       	eor	r25, r25
    2348:	b7 51       	subi	r27, 0x17	; 23
    234a:	a0 f0       	brcs	.+40     	; 0x2374 <__fixunssfsi+0x38>
    234c:	d1 f0       	breq	.+52     	; 0x2382 <__fixunssfsi+0x46>
    234e:	66 0f       	add	r22, r22
    2350:	77 1f       	adc	r23, r23
    2352:	88 1f       	adc	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	1a f0       	brmi	.+6      	; 0x235e <__fixunssfsi+0x22>
    2358:	ba 95       	dec	r27
    235a:	c9 f7       	brne	.-14     	; 0x234e <__fixunssfsi+0x12>
    235c:	12 c0       	rjmp	.+36     	; 0x2382 <__fixunssfsi+0x46>
    235e:	b1 30       	cpi	r27, 0x01	; 1
    2360:	81 f0       	breq	.+32     	; 0x2382 <__fixunssfsi+0x46>
    2362:	a0 d0       	rcall	.+320    	; 0x24a4 <__fp_zero>
    2364:	b1 e0       	ldi	r27, 0x01	; 1
    2366:	08 95       	ret
    2368:	9d c0       	rjmp	.+314    	; 0x24a4 <__fp_zero>
    236a:	67 2f       	mov	r22, r23
    236c:	78 2f       	mov	r23, r24
    236e:	88 27       	eor	r24, r24
    2370:	b8 5f       	subi	r27, 0xF8	; 248
    2372:	39 f0       	breq	.+14     	; 0x2382 <__fixunssfsi+0x46>
    2374:	b9 3f       	cpi	r27, 0xF9	; 249
    2376:	cc f3       	brlt	.-14     	; 0x236a <__fixunssfsi+0x2e>
    2378:	86 95       	lsr	r24
    237a:	77 95       	ror	r23
    237c:	67 95       	ror	r22
    237e:	b3 95       	inc	r27
    2380:	d9 f7       	brne	.-10     	; 0x2378 <__fixunssfsi+0x3c>
    2382:	3e f4       	brtc	.+14     	; 0x2392 <__fixunssfsi+0x56>
    2384:	90 95       	com	r25
    2386:	80 95       	com	r24
    2388:	70 95       	com	r23
    238a:	61 95       	neg	r22
    238c:	7f 4f       	sbci	r23, 0xFF	; 255
    238e:	8f 4f       	sbci	r24, 0xFF	; 255
    2390:	9f 4f       	sbci	r25, 0xFF	; 255
    2392:	08 95       	ret

00002394 <__floatundisf>:
    2394:	e8 94       	clt

00002396 <__fp_di2sf>:
    2396:	f9 2f       	mov	r31, r25
    2398:	96 eb       	ldi	r25, 0xB6	; 182
    239a:	ff 23       	and	r31, r31
    239c:	81 f0       	breq	.+32     	; 0x23be <__fp_di2sf+0x28>
    239e:	12 16       	cp	r1, r18
    23a0:	13 06       	cpc	r1, r19
    23a2:	14 06       	cpc	r1, r20
    23a4:	44 0b       	sbc	r20, r20
    23a6:	93 95       	inc	r25
    23a8:	f6 95       	lsr	r31
    23aa:	87 95       	ror	r24
    23ac:	77 95       	ror	r23
    23ae:	67 95       	ror	r22
    23b0:	57 95       	ror	r21
    23b2:	40 40       	sbci	r20, 0x00	; 0
    23b4:	ff 23       	and	r31, r31
    23b6:	b9 f7       	brne	.-18     	; 0x23a6 <__fp_di2sf+0x10>
    23b8:	1b c0       	rjmp	.+54     	; 0x23f0 <__fp_di2sf+0x5a>
    23ba:	99 27       	eor	r25, r25
    23bc:	08 95       	ret
    23be:	88 23       	and	r24, r24
    23c0:	51 f4       	brne	.+20     	; 0x23d6 <__fp_di2sf+0x40>
    23c2:	98 50       	subi	r25, 0x08	; 8
    23c4:	d2 f7       	brpl	.-12     	; 0x23ba <__fp_di2sf+0x24>
    23c6:	87 2b       	or	r24, r23
    23c8:	76 2f       	mov	r23, r22
    23ca:	65 2f       	mov	r22, r21
    23cc:	54 2f       	mov	r21, r20
    23ce:	43 2f       	mov	r20, r19
    23d0:	32 2f       	mov	r19, r18
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	b1 f3       	breq	.-20     	; 0x23c2 <__fp_di2sf+0x2c>
    23d6:	12 16       	cp	r1, r18
    23d8:	13 06       	cpc	r1, r19
    23da:	14 06       	cpc	r1, r20
    23dc:	44 0b       	sbc	r20, r20
    23de:	88 23       	and	r24, r24
    23e0:	3a f0       	brmi	.+14     	; 0x23f0 <__fp_di2sf+0x5a>
    23e2:	9a 95       	dec	r25
    23e4:	44 0f       	add	r20, r20
    23e6:	55 1f       	adc	r21, r21
    23e8:	66 1f       	adc	r22, r22
    23ea:	77 1f       	adc	r23, r23
    23ec:	88 1f       	adc	r24, r24
    23ee:	ca f7       	brpl	.-14     	; 0x23e2 <__fp_di2sf+0x4c>
    23f0:	55 23       	and	r21, r21
    23f2:	4a f4       	brpl	.+18     	; 0x2406 <__fp_di2sf+0x70>
    23f4:	44 0f       	add	r20, r20
    23f6:	55 1f       	adc	r21, r21
    23f8:	11 f4       	brne	.+4      	; 0x23fe <__fp_di2sf+0x68>
    23fa:	60 ff       	sbrs	r22, 0
    23fc:	04 c0       	rjmp	.+8      	; 0x2406 <__fp_di2sf+0x70>
    23fe:	6f 5f       	subi	r22, 0xFF	; 255
    2400:	7f 4f       	sbci	r23, 0xFF	; 255
    2402:	8f 4f       	sbci	r24, 0xFF	; 255
    2404:	9f 4f       	sbci	r25, 0xFF	; 255
    2406:	88 0f       	add	r24, r24
    2408:	96 95       	lsr	r25
    240a:	87 95       	ror	r24
    240c:	97 f9       	bld	r25, 7
    240e:	08 95       	ret

00002410 <__fp_inf>:
    2410:	97 f9       	bld	r25, 7
    2412:	9f 67       	ori	r25, 0x7F	; 127
    2414:	80 e8       	ldi	r24, 0x80	; 128
    2416:	70 e0       	ldi	r23, 0x00	; 0
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	08 95       	ret

0000241c <__fp_nan>:
    241c:	9f ef       	ldi	r25, 0xFF	; 255
    241e:	80 ec       	ldi	r24, 0xC0	; 192
    2420:	08 95       	ret

00002422 <__fp_pscA>:
    2422:	00 24       	eor	r0, r0
    2424:	0a 94       	dec	r0
    2426:	16 16       	cp	r1, r22
    2428:	17 06       	cpc	r1, r23
    242a:	18 06       	cpc	r1, r24
    242c:	09 06       	cpc	r0, r25
    242e:	08 95       	ret

00002430 <__fp_pscB>:
    2430:	00 24       	eor	r0, r0
    2432:	0a 94       	dec	r0
    2434:	12 16       	cp	r1, r18
    2436:	13 06       	cpc	r1, r19
    2438:	14 06       	cpc	r1, r20
    243a:	05 06       	cpc	r0, r21
    243c:	08 95       	ret

0000243e <__fp_round>:
    243e:	09 2e       	mov	r0, r25
    2440:	03 94       	inc	r0
    2442:	00 0c       	add	r0, r0
    2444:	11 f4       	brne	.+4      	; 0x244a <__fp_round+0xc>
    2446:	88 23       	and	r24, r24
    2448:	52 f0       	brmi	.+20     	; 0x245e <__fp_round+0x20>
    244a:	bb 0f       	add	r27, r27
    244c:	40 f4       	brcc	.+16     	; 0x245e <__fp_round+0x20>
    244e:	bf 2b       	or	r27, r31
    2450:	11 f4       	brne	.+4      	; 0x2456 <__fp_round+0x18>
    2452:	60 ff       	sbrs	r22, 0
    2454:	04 c0       	rjmp	.+8      	; 0x245e <__fp_round+0x20>
    2456:	6f 5f       	subi	r22, 0xFF	; 255
    2458:	7f 4f       	sbci	r23, 0xFF	; 255
    245a:	8f 4f       	sbci	r24, 0xFF	; 255
    245c:	9f 4f       	sbci	r25, 0xFF	; 255
    245e:	08 95       	ret

00002460 <__fp_split3>:
    2460:	57 fd       	sbrc	r21, 7
    2462:	90 58       	subi	r25, 0x80	; 128
    2464:	44 0f       	add	r20, r20
    2466:	55 1f       	adc	r21, r21
    2468:	59 f0       	breq	.+22     	; 0x2480 <__fp_splitA+0x10>
    246a:	5f 3f       	cpi	r21, 0xFF	; 255
    246c:	71 f0       	breq	.+28     	; 0x248a <__fp_splitA+0x1a>
    246e:	47 95       	ror	r20

00002470 <__fp_splitA>:
    2470:	88 0f       	add	r24, r24
    2472:	97 fb       	bst	r25, 7
    2474:	99 1f       	adc	r25, r25
    2476:	61 f0       	breq	.+24     	; 0x2490 <__fp_splitA+0x20>
    2478:	9f 3f       	cpi	r25, 0xFF	; 255
    247a:	79 f0       	breq	.+30     	; 0x249a <__fp_splitA+0x2a>
    247c:	87 95       	ror	r24
    247e:	08 95       	ret
    2480:	12 16       	cp	r1, r18
    2482:	13 06       	cpc	r1, r19
    2484:	14 06       	cpc	r1, r20
    2486:	55 1f       	adc	r21, r21
    2488:	f2 cf       	rjmp	.-28     	; 0x246e <__fp_split3+0xe>
    248a:	46 95       	lsr	r20
    248c:	f1 df       	rcall	.-30     	; 0x2470 <__fp_splitA>
    248e:	08 c0       	rjmp	.+16     	; 0x24a0 <__fp_splitA+0x30>
    2490:	16 16       	cp	r1, r22
    2492:	17 06       	cpc	r1, r23
    2494:	18 06       	cpc	r1, r24
    2496:	99 1f       	adc	r25, r25
    2498:	f1 cf       	rjmp	.-30     	; 0x247c <__fp_splitA+0xc>
    249a:	86 95       	lsr	r24
    249c:	71 05       	cpc	r23, r1
    249e:	61 05       	cpc	r22, r1
    24a0:	08 94       	sec
    24a2:	08 95       	ret

000024a4 <__fp_zero>:
    24a4:	e8 94       	clt

000024a6 <__fp_szero>:
    24a6:	bb 27       	eor	r27, r27
    24a8:	66 27       	eor	r22, r22
    24aa:	77 27       	eor	r23, r23
    24ac:	cb 01       	movw	r24, r22
    24ae:	97 f9       	bld	r25, 7
    24b0:	08 95       	ret

000024b2 <__udivmodhi4>:
    24b2:	aa 1b       	sub	r26, r26
    24b4:	bb 1b       	sub	r27, r27
    24b6:	51 e1       	ldi	r21, 0x11	; 17
    24b8:	07 c0       	rjmp	.+14     	; 0x24c8 <__udivmodhi4_ep>

000024ba <__udivmodhi4_loop>:
    24ba:	aa 1f       	adc	r26, r26
    24bc:	bb 1f       	adc	r27, r27
    24be:	a6 17       	cp	r26, r22
    24c0:	b7 07       	cpc	r27, r23
    24c2:	10 f0       	brcs	.+4      	; 0x24c8 <__udivmodhi4_ep>
    24c4:	a6 1b       	sub	r26, r22
    24c6:	b7 0b       	sbc	r27, r23

000024c8 <__udivmodhi4_ep>:
    24c8:	88 1f       	adc	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	5a 95       	dec	r21
    24ce:	a9 f7       	brne	.-22     	; 0x24ba <__udivmodhi4_loop>
    24d0:	80 95       	com	r24
    24d2:	90 95       	com	r25
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	08 95       	ret

000024da <__udivmodsi4>:
    24da:	a1 e2       	ldi	r26, 0x21	; 33
    24dc:	1a 2e       	mov	r1, r26
    24de:	aa 1b       	sub	r26, r26
    24e0:	bb 1b       	sub	r27, r27
    24e2:	fd 01       	movw	r30, r26
    24e4:	0d c0       	rjmp	.+26     	; 0x2500 <__udivmodsi4_ep>

000024e6 <__udivmodsi4_loop>:
    24e6:	aa 1f       	adc	r26, r26
    24e8:	bb 1f       	adc	r27, r27
    24ea:	ee 1f       	adc	r30, r30
    24ec:	ff 1f       	adc	r31, r31
    24ee:	a2 17       	cp	r26, r18
    24f0:	b3 07       	cpc	r27, r19
    24f2:	e4 07       	cpc	r30, r20
    24f4:	f5 07       	cpc	r31, r21
    24f6:	20 f0       	brcs	.+8      	; 0x2500 <__udivmodsi4_ep>
    24f8:	a2 1b       	sub	r26, r18
    24fa:	b3 0b       	sbc	r27, r19
    24fc:	e4 0b       	sbc	r30, r20
    24fe:	f5 0b       	sbc	r31, r21

00002500 <__udivmodsi4_ep>:
    2500:	66 1f       	adc	r22, r22
    2502:	77 1f       	adc	r23, r23
    2504:	88 1f       	adc	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	1a 94       	dec	r1
    250a:	69 f7       	brne	.-38     	; 0x24e6 <__udivmodsi4_loop>
    250c:	60 95       	com	r22
    250e:	70 95       	com	r23
    2510:	80 95       	com	r24
    2512:	90 95       	com	r25
    2514:	9b 01       	movw	r18, r22
    2516:	ac 01       	movw	r20, r24
    2518:	bd 01       	movw	r22, r26
    251a:	cf 01       	movw	r24, r30
    251c:	08 95       	ret

0000251e <__umulhisi3>:
    251e:	a2 9f       	mul	r26, r18
    2520:	b0 01       	movw	r22, r0
    2522:	b3 9f       	mul	r27, r19
    2524:	c0 01       	movw	r24, r0
    2526:	a3 9f       	mul	r26, r19
    2528:	70 0d       	add	r23, r0
    252a:	81 1d       	adc	r24, r1
    252c:	11 24       	eor	r1, r1
    252e:	91 1d       	adc	r25, r1
    2530:	b2 9f       	mul	r27, r18
    2532:	70 0d       	add	r23, r0
    2534:	81 1d       	adc	r24, r1
    2536:	11 24       	eor	r1, r1
    2538:	91 1d       	adc	r25, r1
    253a:	08 95       	ret

0000253c <__muldi3>:
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	1f 93       	push	r17
    2542:	0f 93       	push	r16
    2544:	9a 9d       	mul	r25, r10
    2546:	f0 2d       	mov	r31, r0
    2548:	21 9f       	mul	r18, r17
    254a:	f0 0d       	add	r31, r0
    254c:	8b 9d       	mul	r24, r11
    254e:	f0 0d       	add	r31, r0
    2550:	8a 9d       	mul	r24, r10
    2552:	e0 2d       	mov	r30, r0
    2554:	f1 0d       	add	r31, r1
    2556:	03 9f       	mul	r16, r19
    2558:	f0 0d       	add	r31, r0
    255a:	02 9f       	mul	r16, r18
    255c:	e0 0d       	add	r30, r0
    255e:	f1 1d       	adc	r31, r1
    2560:	4e 9d       	mul	r20, r14
    2562:	e0 0d       	add	r30, r0
    2564:	f1 1d       	adc	r31, r1
    2566:	5e 9d       	mul	r21, r14
    2568:	f0 0d       	add	r31, r0
    256a:	4f 9d       	mul	r20, r15
    256c:	f0 0d       	add	r31, r0
    256e:	7f 93       	push	r23
    2570:	6f 93       	push	r22
    2572:	bf 92       	push	r11
    2574:	af 92       	push	r10
    2576:	5f 93       	push	r21
    2578:	4f 93       	push	r20
    257a:	d5 01       	movw	r26, r10
    257c:	d0 df       	rcall	.-96     	; 0x251e <__umulhisi3>
    257e:	8b 01       	movw	r16, r22
    2580:	ac 01       	movw	r20, r24
    2582:	d7 01       	movw	r26, r14
    2584:	cc df       	rcall	.-104    	; 0x251e <__umulhisi3>
    2586:	eb 01       	movw	r28, r22
    2588:	e8 0f       	add	r30, r24
    258a:	f9 1f       	adc	r31, r25
    258c:	d6 01       	movw	r26, r12
    258e:	1f d0       	rcall	.+62     	; 0x25ce <__muldi3_6>
    2590:	2f 91       	pop	r18
    2592:	3f 91       	pop	r19
    2594:	d6 01       	movw	r26, r12
    2596:	c3 df       	rcall	.-122    	; 0x251e <__umulhisi3>
    2598:	c6 0f       	add	r28, r22
    259a:	d7 1f       	adc	r29, r23
    259c:	e8 1f       	adc	r30, r24
    259e:	f9 1f       	adc	r31, r25
    25a0:	af 91       	pop	r26
    25a2:	bf 91       	pop	r27
    25a4:	14 d0       	rcall	.+40     	; 0x25ce <__muldi3_6>
    25a6:	2f 91       	pop	r18
    25a8:	3f 91       	pop	r19
    25aa:	b9 df       	rcall	.-142    	; 0x251e <__umulhisi3>
    25ac:	c6 0f       	add	r28, r22
    25ae:	d7 1f       	adc	r29, r23
    25b0:	e8 1f       	adc	r30, r24
    25b2:	f9 1f       	adc	r31, r25
    25b4:	d6 01       	movw	r26, r12
    25b6:	b3 df       	rcall	.-154    	; 0x251e <__umulhisi3>
    25b8:	e6 0f       	add	r30, r22
    25ba:	f7 1f       	adc	r31, r23
    25bc:	98 01       	movw	r18, r16
    25be:	be 01       	movw	r22, r28
    25c0:	cf 01       	movw	r24, r30
    25c2:	11 24       	eor	r1, r1
    25c4:	0f 91       	pop	r16
    25c6:	1f 91       	pop	r17
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <__muldi3_6>:
    25ce:	a7 df       	rcall	.-178    	; 0x251e <__umulhisi3>
    25d0:	46 0f       	add	r20, r22
    25d2:	57 1f       	adc	r21, r23
    25d4:	c8 1f       	adc	r28, r24
    25d6:	d9 1f       	adc	r29, r25
    25d8:	08 f4       	brcc	.+2      	; 0x25dc <__muldi3_6+0xe>
    25da:	31 96       	adiw	r30, 0x01	; 1
    25dc:	08 95       	ret

000025de <__umoddi3>:
    25de:	68 94       	set
    25e0:	01 c0       	rjmp	.+2      	; 0x25e4 <__udivdi3_umoddi3>

000025e2 <__udivdi3>:
    25e2:	e8 94       	clt

000025e4 <__udivdi3_umoddi3>:
    25e4:	8f 92       	push	r8
    25e6:	9f 92       	push	r9
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	05 d0       	rcall	.+10     	; 0x25f8 <__udivmod64>
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	9f 90       	pop	r9
    25f4:	8f 90       	pop	r8
    25f6:	08 95       	ret

000025f8 <__udivmod64>:
    25f8:	88 24       	eor	r8, r8
    25fa:	99 24       	eor	r9, r9
    25fc:	f4 01       	movw	r30, r8
    25fe:	e4 01       	movw	r28, r8
    2600:	b0 e4       	ldi	r27, 0x40	; 64
    2602:	9f 93       	push	r25
    2604:	aa 27       	eor	r26, r26
    2606:	9a 15       	cp	r25, r10
    2608:	8b 04       	cpc	r8, r11
    260a:	9c 04       	cpc	r9, r12
    260c:	ed 05       	cpc	r30, r13
    260e:	fe 05       	cpc	r31, r14
    2610:	cf 05       	cpc	r28, r15
    2612:	d0 07       	cpc	r29, r16
    2614:	a1 07       	cpc	r26, r17
    2616:	98 f4       	brcc	.+38     	; 0x263e <__udivmod64+0x46>
    2618:	ad 2f       	mov	r26, r29
    261a:	dc 2f       	mov	r29, r28
    261c:	cf 2f       	mov	r28, r31
    261e:	fe 2f       	mov	r31, r30
    2620:	e9 2d       	mov	r30, r9
    2622:	98 2c       	mov	r9, r8
    2624:	89 2e       	mov	r8, r25
    2626:	98 2f       	mov	r25, r24
    2628:	87 2f       	mov	r24, r23
    262a:	76 2f       	mov	r23, r22
    262c:	65 2f       	mov	r22, r21
    262e:	54 2f       	mov	r21, r20
    2630:	43 2f       	mov	r20, r19
    2632:	32 2f       	mov	r19, r18
    2634:	22 27       	eor	r18, r18
    2636:	b8 50       	subi	r27, 0x08	; 8
    2638:	31 f7       	brne	.-52     	; 0x2606 <__udivmod64+0xe>
    263a:	bf 91       	pop	r27
    263c:	27 c0       	rjmp	.+78     	; 0x268c <__udivmod64+0x94>
    263e:	1b 2e       	mov	r1, r27
    2640:	bf 91       	pop	r27
    2642:	bb 27       	eor	r27, r27
    2644:	22 0f       	add	r18, r18
    2646:	33 1f       	adc	r19, r19
    2648:	44 1f       	adc	r20, r20
    264a:	55 1f       	adc	r21, r21
    264c:	66 1f       	adc	r22, r22
    264e:	77 1f       	adc	r23, r23
    2650:	88 1f       	adc	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	88 1c       	adc	r8, r8
    2656:	99 1c       	adc	r9, r9
    2658:	ee 1f       	adc	r30, r30
    265a:	ff 1f       	adc	r31, r31
    265c:	cc 1f       	adc	r28, r28
    265e:	dd 1f       	adc	r29, r29
    2660:	aa 1f       	adc	r26, r26
    2662:	bb 1f       	adc	r27, r27
    2664:	8a 14       	cp	r8, r10
    2666:	9b 04       	cpc	r9, r11
    2668:	ec 05       	cpc	r30, r12
    266a:	fd 05       	cpc	r31, r13
    266c:	ce 05       	cpc	r28, r14
    266e:	df 05       	cpc	r29, r15
    2670:	a0 07       	cpc	r26, r16
    2672:	b1 07       	cpc	r27, r17
    2674:	48 f0       	brcs	.+18     	; 0x2688 <__udivmod64+0x90>
    2676:	8a 18       	sub	r8, r10
    2678:	9b 08       	sbc	r9, r11
    267a:	ec 09       	sbc	r30, r12
    267c:	fd 09       	sbc	r31, r13
    267e:	ce 09       	sbc	r28, r14
    2680:	df 09       	sbc	r29, r15
    2682:	a0 0b       	sbc	r26, r16
    2684:	b1 0b       	sbc	r27, r17
    2686:	21 60       	ori	r18, 0x01	; 1
    2688:	1a 94       	dec	r1
    268a:	e1 f6       	brne	.-72     	; 0x2644 <__udivmod64+0x4c>
    268c:	2e f4       	brtc	.+10     	; 0x2698 <__udivmod64+0xa0>
    268e:	94 01       	movw	r18, r8
    2690:	af 01       	movw	r20, r30
    2692:	be 01       	movw	r22, r28
    2694:	cd 01       	movw	r24, r26
    2696:	00 0c       	add	r0, r0
    2698:	08 95       	ret

0000269a <do_rand>:
    269a:	8f 92       	push	r8
    269c:	9f 92       	push	r9
    269e:	af 92       	push	r10
    26a0:	bf 92       	push	r11
    26a2:	cf 92       	push	r12
    26a4:	df 92       	push	r13
    26a6:	ef 92       	push	r14
    26a8:	ff 92       	push	r15
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	ec 01       	movw	r28, r24
    26b0:	68 81       	ld	r22, Y
    26b2:	79 81       	ldd	r23, Y+1	; 0x01
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	9b 81       	ldd	r25, Y+3	; 0x03
    26b8:	61 15       	cp	r22, r1
    26ba:	71 05       	cpc	r23, r1
    26bc:	81 05       	cpc	r24, r1
    26be:	91 05       	cpc	r25, r1
    26c0:	21 f4       	brne	.+8      	; 0x26ca <do_rand+0x30>
    26c2:	64 e2       	ldi	r22, 0x24	; 36
    26c4:	79 ed       	ldi	r23, 0xD9	; 217
    26c6:	8b e5       	ldi	r24, 0x5B	; 91
    26c8:	97 e0       	ldi	r25, 0x07	; 7
    26ca:	2d e1       	ldi	r18, 0x1D	; 29
    26cc:	33 ef       	ldi	r19, 0xF3	; 243
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	50 e0       	ldi	r21, 0x00	; 0
    26d2:	41 d0       	rcall	.+130    	; 0x2756 <__divmodsi4>
    26d4:	49 01       	movw	r8, r18
    26d6:	5a 01       	movw	r10, r20
    26d8:	9b 01       	movw	r18, r22
    26da:	ac 01       	movw	r20, r24
    26dc:	a7 ea       	ldi	r26, 0xA7	; 167
    26de:	b1 e4       	ldi	r27, 0x41	; 65
    26e0:	56 d0       	rcall	.+172    	; 0x278e <__muluhisi3>
    26e2:	6b 01       	movw	r12, r22
    26e4:	7c 01       	movw	r14, r24
    26e6:	ac ee       	ldi	r26, 0xEC	; 236
    26e8:	b4 ef       	ldi	r27, 0xF4	; 244
    26ea:	a5 01       	movw	r20, r10
    26ec:	94 01       	movw	r18, r8
    26ee:	5b d0       	rcall	.+182    	; 0x27a6 <__mulohisi3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	8c 0d       	add	r24, r12
    26f6:	9d 1d       	adc	r25, r13
    26f8:	ae 1d       	adc	r26, r14
    26fa:	bf 1d       	adc	r27, r15
    26fc:	b7 ff       	sbrs	r27, 7
    26fe:	03 c0       	rjmp	.+6      	; 0x2706 <do_rand+0x6c>
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	a1 09       	sbc	r26, r1
    2704:	b0 48       	sbci	r27, 0x80	; 128
    2706:	88 83       	st	Y, r24
    2708:	99 83       	std	Y+1, r25	; 0x01
    270a:	aa 83       	std	Y+2, r26	; 0x02
    270c:	bb 83       	std	Y+3, r27	; 0x03
    270e:	9f 77       	andi	r25, 0x7F	; 127
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	ff 90       	pop	r15
    2716:	ef 90       	pop	r14
    2718:	df 90       	pop	r13
    271a:	cf 90       	pop	r12
    271c:	bf 90       	pop	r11
    271e:	af 90       	pop	r10
    2720:	9f 90       	pop	r9
    2722:	8f 90       	pop	r8
    2724:	08 95       	ret

00002726 <rand_r>:
    2726:	b9 cf       	rjmp	.-142    	; 0x269a <do_rand>

00002728 <rand>:
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	92 e0       	ldi	r25, 0x02	; 2
    272c:	b6 cf       	rjmp	.-148    	; 0x269a <do_rand>

0000272e <srand>:
    272e:	a0 e0       	ldi	r26, 0x00	; 0
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    2736:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    273a:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    273e:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    2742:	08 95       	ret

00002744 <memcpy>:
    2744:	fb 01       	movw	r30, r22
    2746:	dc 01       	movw	r26, r24
    2748:	02 c0       	rjmp	.+4      	; 0x274e <memcpy+0xa>
    274a:	01 90       	ld	r0, Z+
    274c:	0d 92       	st	X+, r0
    274e:	41 50       	subi	r20, 0x01	; 1
    2750:	50 40       	sbci	r21, 0x00	; 0
    2752:	d8 f7       	brcc	.-10     	; 0x274a <memcpy+0x6>
    2754:	08 95       	ret

00002756 <__divmodsi4>:
    2756:	05 2e       	mov	r0, r21
    2758:	97 fb       	bst	r25, 7
    275a:	16 f4       	brtc	.+4      	; 0x2760 <__divmodsi4+0xa>
    275c:	00 94       	com	r0
    275e:	0f d0       	rcall	.+30     	; 0x277e <__negsi2>
    2760:	57 fd       	sbrc	r21, 7
    2762:	05 d0       	rcall	.+10     	; 0x276e <__divmodsi4_neg2>
    2764:	ba de       	rcall	.-652    	; 0x24da <__udivmodsi4>
    2766:	07 fc       	sbrc	r0, 7
    2768:	02 d0       	rcall	.+4      	; 0x276e <__divmodsi4_neg2>
    276a:	46 f4       	brtc	.+16     	; 0x277c <__divmodsi4_exit>
    276c:	08 c0       	rjmp	.+16     	; 0x277e <__negsi2>

0000276e <__divmodsi4_neg2>:
    276e:	50 95       	com	r21
    2770:	40 95       	com	r20
    2772:	30 95       	com	r19
    2774:	21 95       	neg	r18
    2776:	3f 4f       	sbci	r19, 0xFF	; 255
    2778:	4f 4f       	sbci	r20, 0xFF	; 255
    277a:	5f 4f       	sbci	r21, 0xFF	; 255

0000277c <__divmodsi4_exit>:
    277c:	08 95       	ret

0000277e <__negsi2>:
    277e:	90 95       	com	r25
    2780:	80 95       	com	r24
    2782:	70 95       	com	r23
    2784:	61 95       	neg	r22
    2786:	7f 4f       	sbci	r23, 0xFF	; 255
    2788:	8f 4f       	sbci	r24, 0xFF	; 255
    278a:	9f 4f       	sbci	r25, 0xFF	; 255
    278c:	08 95       	ret

0000278e <__muluhisi3>:
    278e:	c7 de       	rcall	.-626    	; 0x251e <__umulhisi3>
    2790:	a5 9f       	mul	r26, r21
    2792:	90 0d       	add	r25, r0
    2794:	b4 9f       	mul	r27, r20
    2796:	90 0d       	add	r25, r0
    2798:	a4 9f       	mul	r26, r20
    279a:	80 0d       	add	r24, r0
    279c:	91 1d       	adc	r25, r1
    279e:	11 24       	eor	r1, r1
    27a0:	08 95       	ret

000027a2 <__mulshisi3>:
    27a2:	b7 ff       	sbrs	r27, 7
    27a4:	f4 cf       	rjmp	.-24     	; 0x278e <__muluhisi3>

000027a6 <__mulohisi3>:
    27a6:	f3 df       	rcall	.-26     	; 0x278e <__muluhisi3>
    27a8:	82 1b       	sub	r24, r18
    27aa:	93 0b       	sbc	r25, r19
    27ac:	08 95       	ret

000027ae <_exit>:
    27ae:	f8 94       	cli

000027b0 <__stop_program>:
    27b0:	ff cf       	rjmp	.-2      	; 0x27b0 <__stop_program>
