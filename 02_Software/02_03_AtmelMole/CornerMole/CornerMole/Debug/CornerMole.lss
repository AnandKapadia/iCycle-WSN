
CornerMole.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00002c6c  00002d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000aa1  00800206  00800206  00002d06  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  00002d06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000620  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008d26  00000000  00000000  000033c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000370f  00000000  00000000  0000c0ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007b57  00000000  00000000  0000f7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013ac  00000000  00000000  00017354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001c37f  00000000  00000000  00018700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a5b  00000000  00000000  00034a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000610  00000000  00000000  000394da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000874e  00000000  00000000  00039aea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
       2:	00 00       	nop
       4:	ab c0       	rjmp	.+342    	; 0x15c <__bad_interrupt>
       6:	00 00       	nop
       8:	a9 c0       	rjmp	.+338    	; 0x15c <__bad_interrupt>
       a:	00 00       	nop
       c:	a7 c0       	rjmp	.+334    	; 0x15c <__bad_interrupt>
       e:	00 00       	nop
      10:	a5 c0       	rjmp	.+330    	; 0x15c <__bad_interrupt>
      12:	00 00       	nop
      14:	a3 c0       	rjmp	.+326    	; 0x15c <__bad_interrupt>
      16:	00 00       	nop
      18:	a1 c0       	rjmp	.+322    	; 0x15c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9f c0       	rjmp	.+318    	; 0x15c <__bad_interrupt>
      1e:	00 00       	nop
      20:	9d c0       	rjmp	.+314    	; 0x15c <__bad_interrupt>
      22:	00 00       	nop
      24:	9b c0       	rjmp	.+310    	; 0x15c <__bad_interrupt>
      26:	00 00       	nop
      28:	99 c0       	rjmp	.+306    	; 0x15c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	97 c0       	rjmp	.+302    	; 0x15c <__bad_interrupt>
      2e:	00 00       	nop
      30:	95 c0       	rjmp	.+298    	; 0x15c <__bad_interrupt>
      32:	00 00       	nop
      34:	93 c0       	rjmp	.+294    	; 0x15c <__bad_interrupt>
      36:	00 00       	nop
      38:	91 c0       	rjmp	.+290    	; 0x15c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8f c0       	rjmp	.+286    	; 0x15c <__bad_interrupt>
      3e:	00 00       	nop
      40:	8d c0       	rjmp	.+282    	; 0x15c <__bad_interrupt>
      42:	00 00       	nop
      44:	4a c2       	rjmp	.+1172   	; 0x4da <__vector_17>
      46:	00 00       	nop
      48:	75 c2       	rjmp	.+1258   	; 0x534 <__vector_18>
      4a:	00 00       	nop
      4c:	a0 c2       	rjmp	.+1344   	; 0x58e <__vector_19>
      4e:	00 00       	nop
      50:	17 c2       	rjmp	.+1070   	; 0x480 <__vector_20>
      52:	00 00       	nop
      54:	83 c0       	rjmp	.+262    	; 0x15c <__bad_interrupt>
      56:	00 00       	nop
      58:	81 c0       	rjmp	.+258    	; 0x15c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7f c0       	rjmp	.+254    	; 0x15c <__bad_interrupt>
      5e:	00 00       	nop
      60:	7d c0       	rjmp	.+250    	; 0x15c <__bad_interrupt>
      62:	00 00       	nop
      64:	7b c0       	rjmp	.+246    	; 0x15c <__bad_interrupt>
      66:	00 00       	nop
      68:	79 c0       	rjmp	.+242    	; 0x15c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	77 c0       	rjmp	.+238    	; 0x15c <__bad_interrupt>
      6e:	00 00       	nop
      70:	75 c0       	rjmp	.+234    	; 0x15c <__bad_interrupt>
      72:	00 00       	nop
      74:	73 c0       	rjmp	.+230    	; 0x15c <__bad_interrupt>
      76:	00 00       	nop
      78:	71 c0       	rjmp	.+226    	; 0x15c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6f c0       	rjmp	.+222    	; 0x15c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e0 c2       	rjmp	.+1472   	; 0x642 <__vector_32>
      82:	00 00       	nop
      84:	0b c3       	rjmp	.+1558   	; 0x69c <__vector_33>
      86:	00 00       	nop
      88:	36 c3       	rjmp	.+1644   	; 0x6f6 <__vector_34>
      8a:	00 00       	nop
      8c:	ad c2       	rjmp	.+1370   	; 0x5e8 <__vector_35>
      8e:	00 00       	nop
      90:	65 c0       	rjmp	.+202    	; 0x15c <__bad_interrupt>
      92:	00 00       	nop
      94:	63 c0       	rjmp	.+198    	; 0x15c <__bad_interrupt>
      96:	00 00       	nop
      98:	61 c0       	rjmp	.+194    	; 0x15c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5f c0       	rjmp	.+190    	; 0x15c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	5d c0       	rjmp	.+186    	; 0x15c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5b c0       	rjmp	.+182    	; 0x15c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	80 c3       	rjmp	.+1792   	; 0x7aa <__vector_42>
      aa:	00 00       	nop
      ac:	ab c3       	rjmp	.+1878   	; 0x804 <__vector_43>
      ae:	00 00       	nop
      b0:	d6 c3       	rjmp	.+1964   	; 0x85e <__vector_44>
      b2:	00 00       	nop
      b4:	4d c3       	rjmp	.+1690   	; 0x750 <__vector_45>
      b6:	00 00       	nop
      b8:	51 c0       	rjmp	.+162    	; 0x15c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2a c4       	rjmp	.+2132   	; 0x912 <__vector_47>
      be:	00 00       	nop
      c0:	55 c4       	rjmp	.+2218   	; 0x96c <__vector_48>
      c2:	00 00       	nop
      c4:	80 c4       	rjmp	.+2304   	; 0x9c6 <__vector_49>
      c6:	00 00       	nop
      c8:	f7 c3       	rjmp	.+2030   	; 0x8b8 <__vector_50>
      ca:	00 00       	nop
      cc:	47 c0       	rjmp	.+142    	; 0x15c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	45 c0       	rjmp	.+138    	; 0x15c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	43 c0       	rjmp	.+134    	; 0x15c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	41 c0       	rjmp	.+130    	; 0x15c <__bad_interrupt>
      da:	00 00       	nop
      dc:	3f c0       	rjmp	.+126    	; 0x15c <__bad_interrupt>
      de:	00 00       	nop
      e0:	3d c0       	rjmp	.+122    	; 0x15c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3b c0       	rjmp	.+118    	; 0x15c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	39 c0       	rjmp	.+114    	; 0x15c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	37 c0       	rjmp	.+110    	; 0x15c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	35 c0       	rjmp	.+106    	; 0x15c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	33 c0       	rjmp	.+102    	; 0x15c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	31 c0       	rjmp	.+98     	; 0x15c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	2f c0       	rjmp	.+94     	; 0x15c <__bad_interrupt>
      fe:	00 00       	nop
     100:	2d c0       	rjmp	.+90     	; 0x15c <__bad_interrupt>
     102:	00 00       	nop
     104:	2b c0       	rjmp	.+86     	; 0x15c <__bad_interrupt>
     106:	00 00       	nop
     108:	29 c0       	rjmp	.+82     	; 0x15c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	27 c0       	rjmp	.+78     	; 0x15c <__bad_interrupt>
     10e:	00 00       	nop
     110:	25 c0       	rjmp	.+74     	; 0x15c <__bad_interrupt>
     112:	00 00       	nop
     114:	23 c0       	rjmp	.+70     	; 0x15c <__bad_interrupt>
     116:	00 00       	nop
     118:	21 c0       	rjmp	.+66     	; 0x15c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	1f c0       	rjmp	.+62     	; 0x15c <__bad_interrupt>
	...

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d1 e4       	ldi	r29, 0x41	; 65
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	12 e0       	ldi	r17, 0x02	; 2
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b2 e0       	ldi	r27, 0x02	; 2
     132:	ec e6       	ldi	r30, 0x6C	; 108
     134:	fc e2       	ldi	r31, 0x2C	; 44
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0b bf       	out	0x3b, r16	; 59
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x14>
     13c:	07 90       	elpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	a6 30       	cpi	r26, 0x06	; 6
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x10>

00000146 <__do_clear_bss>:
     146:	2c e0       	ldi	r18, 0x0C	; 12
     148:	a6 e0       	ldi	r26, 0x06	; 6
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	a7 3a       	cpi	r26, 0xA7	; 167
     152:	b2 07       	cpc	r27, r18
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	17 d1       	rcall	.+558    	; 0x386 <main>
     158:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <_exit>

0000015c <__bad_interrupt>:
     15c:	51 cf       	rjmp	.-350    	; 0x0 <__vectors>

0000015e <common_tc_read_count>:
     15e:	29 d6       	rcall	.+3154   	; 0xdb2 <tmr_read_count>
     160:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <timer_mul_var>
     164:	22 23       	and	r18, r18
     166:	c9 f0       	breq	.+50     	; 0x19a <common_tc_read_count+0x3c>
     168:	e0 91 a6 0c 	lds	r30, 0x0CA6	; 0x800ca6 <timer_multiplier>
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <timer_mul_var>
     172:	6e 2f       	mov	r22, r30
     174:	74 2f       	mov	r23, r20
     176:	0e 94 65 15 	call	0x2aca	; 0x2aca <__udivmodhi4>
     17a:	9b 01       	movw	r18, r22
     17c:	8f ef       	ldi	r24, 0xFF	; 255
     17e:	9f ef       	ldi	r25, 0xFF	; 255
     180:	6e 2f       	mov	r22, r30
     182:	74 2f       	mov	r23, r20
     184:	0e 94 65 15 	call	0x2aca	; 0x2aca <__udivmodhi4>
     188:	f6 9f       	mul	r31, r22
     18a:	c0 01       	movw	r24, r0
     18c:	f7 9f       	mul	r31, r23
     18e:	90 0d       	add	r25, r0
     190:	11 24       	eor	r1, r1
     192:	b9 01       	movw	r22, r18
     194:	68 0f       	add	r22, r24
     196:	79 1f       	adc	r23, r25
     198:	05 c0       	rjmp	.+10     	; 0x1a4 <common_tc_read_count+0x46>
     19a:	60 91 a6 0c 	lds	r22, 0x0CA6	; 0x800ca6 <timer_multiplier>
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	0e 94 65 15 	call	0x2aca	; 0x2aca <__udivmodhi4>
     1a4:	86 2f       	mov	r24, r22
     1a6:	97 2f       	mov	r25, r23
     1a8:	08 95       	ret

000001aa <common_tc_compare_stop>:
     1aa:	08 d6       	rcall	.+3088   	; 0xdbc <tmr_disable_cc_interrupt>
     1ac:	2b d6       	rcall	.+3158   	; 0xe04 <save_cpu_interrupt>
     1ae:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
     1b2:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x1>
     1b6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end+0x2>
     1ba:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__data_end+0x3>
     1be:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <compare_value+0x1>
     1c2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <compare_value>
     1c6:	2b c6       	rjmp	.+3158   	; 0xe1e <restore_cpu_interrupt>
     1c8:	08 95       	ret

000001ca <common_tc_overflow_stop>:
     1ca:	06 d6       	rcall	.+3084   	; 0xdd8 <tmr_disable_ovf_interrupt>
     1cc:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <timer_mul_var>
     1d0:	08 95       	ret

000001d2 <common_tc_stop>:
     1d2:	eb df       	rcall	.-42     	; 0x1aa <common_tc_compare_stop>
     1d4:	fa df       	rcall	.-12     	; 0x1ca <common_tc_overflow_stop>
     1d6:	07 c6       	rjmp	.+3086   	; 0xde6 <tmr_stop>
     1d8:	08 95       	ret

000001da <common_tc_delay>:
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	8c 01       	movw	r16, r24
     1e0:	e8 d5       	rcall	.+3024   	; 0xdb2 <tmr_read_count>
     1e2:	ac 01       	movw	r20, r24
     1e4:	a0 91 a6 0c 	lds	r26, 0x0CA6	; 0x800ca6 <timer_multiplier>
     1e8:	98 01       	movw	r18, r16
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__umulhisi3>
     1f0:	8b 01       	movw	r16, r22
     1f2:	9c 01       	movw	r18, r24
     1f4:	04 0f       	add	r16, r20
     1f6:	15 1f       	adc	r17, r21
     1f8:	21 1d       	adc	r18, r1
     1fa:	31 1d       	adc	r19, r1
     1fc:	00 93 06 02 	sts	0x0206, r16	; 0x800206 <__data_end>
     200:	10 93 07 02 	sts	0x0207, r17	; 0x800207 <__data_end+0x1>
     204:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <__data_end+0x2>
     208:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <__data_end+0x3>
     20c:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <__data_end>
     210:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <__data_end+0x1>
     214:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__data_end+0x2>
     218:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__data_end+0x3>
     21c:	89 01       	movw	r16, r18
     21e:	22 27       	eor	r18, r18
     220:	33 27       	eor	r19, r19
     222:	00 93 06 02 	sts	0x0206, r16	; 0x800206 <__data_end>
     226:	10 93 07 02 	sts	0x0207, r17	; 0x800207 <__data_end+0x1>
     22a:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <__data_end+0x2>
     22e:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <__data_end+0x3>
     232:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <__data_end>
     236:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <__data_end+0x1>
     23a:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__data_end+0x2>
     23e:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__data_end+0x3>
     242:	01 2b       	or	r16, r17
     244:	02 2b       	or	r16, r18
     246:	03 2b       	or	r16, r19
     248:	91 f0       	breq	.+36     	; 0x26e <common_tc_delay+0x94>
     24a:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <__data_end>
     24e:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <__data_end+0x1>
     252:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__data_end+0x2>
     256:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__data_end+0x3>
     25a:	6f 5f       	subi	r22, 0xFF	; 255
     25c:	7f 4f       	sbci	r23, 0xFF	; 255
     25e:	46 0f       	add	r20, r22
     260:	57 1f       	adc	r21, r23
     262:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <compare_value+0x1>
     266:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <compare_value>
     26a:	a8 d5       	rcall	.+2896   	; 0xdbc <tmr_disable_cc_interrupt>
     26c:	07 c0       	rjmp	.+14     	; 0x27c <common_tc_delay+0xa2>
     26e:	64 0f       	add	r22, r20
     270:	75 1f       	adc	r23, r21
     272:	70 93 0c 02 	sts	0x020C, r23	; 0x80020c <compare_value+0x1>
     276:	60 93 0b 02 	sts	0x020B, r22	; 0x80020b <compare_value>
     27a:	a7 d5       	rcall	.+2894   	; 0xdca <tmr_enable_cc_interrupt>
     27c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <compare_value>
     280:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <compare_value+0x1>
     284:	84 36       	cpi	r24, 0x64	; 100
     286:	91 05       	cpc	r25, r1
     288:	30 f4       	brcc	.+12     	; 0x296 <common_tc_delay+0xbc>
     28a:	8c 59       	subi	r24, 0x9C	; 156
     28c:	9f 4f       	sbci	r25, 0xFF	; 255
     28e:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <compare_value+0x1>
     292:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <compare_value>
     296:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <compare_value>
     29a:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <compare_value+0x1>
     29e:	a7 d5       	rcall	.+2894   	; 0xdee <tmr_write_cmpreg>
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	08 95       	ret

000002a6 <common_tc_init>:
     2a6:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <timer_mul_var>
     2aa:	bb d5       	rcall	.+2934   	; 0xe22 <tmr_init>
     2ac:	80 93 a6 0c 	sts	0x0CA6, r24	; 0x800ca6 <timer_multiplier>
     2b0:	08 95       	ret

000002b2 <tmr_ovf_callback>:
     2b2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
     2b6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
     2ba:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__data_end+0x2>
     2be:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__data_end+0x3>
     2c2:	89 2b       	or	r24, r25
     2c4:	8a 2b       	or	r24, r26
     2c6:	8b 2b       	or	r24, r27
     2c8:	c1 f0       	breq	.+48     	; 0x2fa <tmr_ovf_callback+0x48>
     2ca:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
     2ce:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
     2d2:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <__data_end+0x2>
     2d6:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <__data_end+0x3>
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	a1 09       	sbc	r26, r1
     2de:	b1 09       	sbc	r27, r1
     2e0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
     2e4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
     2e8:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <__data_end+0x2>
     2ec:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <__data_end+0x3>
     2f0:	89 2b       	or	r24, r25
     2f2:	8a 2b       	or	r24, r26
     2f4:	8b 2b       	or	r24, r27
     2f6:	09 f4       	brne	.+2      	; 0x2fa <tmr_ovf_callback+0x48>
     2f8:	68 d5       	rcall	.+2768   	; 0xdca <tmr_enable_cc_interrupt>
     2fa:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer_mul_var>
     2fe:	8f 5f       	subi	r24, 0xFF	; 255
     300:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <timer_mul_var>
     304:	90 91 a6 0c 	lds	r25, 0x0CA6	; 0x800ca6 <timer_multiplier>
     308:	89 17       	cp	r24, r25
     30a:	48 f0       	brcs	.+18     	; 0x31e <tmr_ovf_callback+0x6c>
     30c:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <timer_mul_var>
     310:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <common_tc_ovf_callback>
     314:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <common_tc_ovf_callback+0x1>
     318:	30 97       	sbiw	r30, 0x00	; 0
     31a:	09 f0       	breq	.+2      	; 0x31e <tmr_ovf_callback+0x6c>
     31c:	09 95       	icall
     31e:	08 95       	ret

00000320 <tmr_cca_callback>:
     320:	4d d5       	rcall	.+2714   	; 0xdbc <tmr_disable_cc_interrupt>
     322:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <common_tc_cca_callback>
     326:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <common_tc_cca_callback+0x1>
     32a:	30 97       	sbiw	r30, 0x00	; 0
     32c:	09 f0       	breq	.+2      	; 0x330 <tmr_cca_callback+0x10>
     32e:	09 95       	icall
     330:	08 95       	ret

00000332 <set_common_tc_overflow_callback>:
     332:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <common_tc_ovf_callback+0x1>
     336:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <common_tc_ovf_callback>
     33a:	08 95       	ret

0000033c <set_common_tc_expiry_callback>:
     33c:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <common_tc_cca_callback+0x1>
     340:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <common_tc_cca_callback>
     344:	08 95       	ret

00000346 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     346:	04 c0       	rjmp	.+8      	; 0x350 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     348:	61 50       	subi	r22, 0x01	; 1
     34a:	71 09       	sbc	r23, r1
     34c:	81 09       	sbc	r24, r1
     34e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     350:	61 15       	cp	r22, r1
     352:	71 05       	cpc	r23, r1
     354:	81 05       	cpc	r24, r1
     356:	91 05       	cpc	r25, r1
     358:	b9 f7       	brne	.-18     	; 0x348 <__portable_avr_delay_cycles+0x2>
     35a:	08 95       	ret

0000035c <appDataInd>:
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     35c:	2f 9a       	sbi	0x05, 7	; 5
static bool appDataInd(NWK_DataInd_t *ind)
{
    // process the frame
    // Blink LED
    gpio_set_pin_high(RX_LED);
    delay_ms(250);
     35e:	63 ec       	ldi	r22, 0xC3	; 195
     360:	72 ea       	ldi	r23, 0xA2	; 162
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	ef df       	rcall	.-34     	; 0x346 <__portable_avr_delay_cycles>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     368:	2f 98       	cbi	0x05, 7	; 5
    gpio_set_pin_low(RX_LED);
    
    // Send ACK frame
    return true;
}
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	08 95       	ret

0000036e <txConfirm>:

}

void txConfirm(NWK_DataReq_t *req){
    
    if(req->status == NWK_SUCCESS_STATUS) {
     36e:	fc 01       	movw	r30, r24
     370:	87 85       	ldd	r24, Z+15	; 0x0f
     372:	81 11       	cpse	r24, r1
     374:	07 c0       	rjmp	.+14     	; 0x384 <txConfirm+0x16>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     376:	2e 9a       	sbi	0x05, 6	; 5
        // Blink LED to confirm transmission
        gpio_set_pin_high(TX_LED);
        delay_ms(250);
     378:	63 ec       	ldi	r22, 0xC3	; 195
     37a:	72 ea       	ldi	r23, 0xA2	; 162
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	e2 df       	rcall	.-60     	; 0x346 <__portable_avr_delay_cycles>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     382:	2e 98       	cbi	0x05, 6	; 5
     384:	08 95       	ret

00000386 <main>:
    NWK_DataReq(&txMsg);
}


int main(void)
{
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	62 97       	sbiw	r28, 0x12	; 18
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	de bf       	out	0x3e, r29	; 62
     396:	0f be       	out	0x3f, r0	; 63
     398:	cd bf       	out	0x3d, r28	; 61
    // TODO switch clock source to external oscillator?
	board_init();
     39a:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <board_init>

    // Initialize RF system
    SYS_Init();
     39e:	61 d5       	rcall	.+2754   	; 0xe62 <SYS_Init>
    appMsg.caption.size         = APP_CAPTION_SIZE;
    memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
    */
    
    //
    NWK_SetAddr(APP_ADDR);
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	ad d7       	rcall	.+3930   	; 0x1300 <NWK_SetAddr>
    NWK_SetPanId(APP_PANID);
     3a6:	89 e3       	ldi	r24, 0x39	; 57
     3a8:	92 e1       	ldi	r25, 0x12	; 18
    PHY_SetChannel(APP_CHANNEL);
     3aa:	b0 d7       	rcall	.+3936   	; 0x130c <NWK_SetPanId>
     3ac:	87 e1       	ldi	r24, 0x17	; 23
    PHY_SetRxState(true);
     3ae:	ac d6       	rcall	.+3416   	; 0x1108 <PHY_SetChannel>
     3b0:	81 e0       	ldi	r24, 0x01	; 1

    // ?????
    NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     3b2:	a6 d6       	rcall	.+3404   	; 0x1100 <PHY_SetRxState>
     3b4:	6e ea       	ldi	r22, 0xAE	; 174
     3b6:	71 e0       	ldi	r23, 0x01	; 1
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	ae d7       	rcall	.+3932   	; 0x1318 <NWK_OpenEndpoint>
    appInit();

    // Initialize other drivers
    delay_init(unsigned long 16000000);

    uint8_t payload = 0x42;
     3bc:	82 e4       	ldi	r24, 0x42	; 66
     3be:	89 83       	std	Y+1, r24	; 0x01
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     3c0:	2f 9a       	sbi	0x05, 7	; 5
    
    gpio_set_pin_high(RX_LED);
    gpio_set_pin_high(TX_LED);
    delay_ms(250);
     3c2:	2e 9a       	sbi	0x05, 6	; 5
     3c4:	63 ec       	ldi	r22, 0xC3	; 195
     3c6:	72 ea       	ldi	r23, 0xA2	; 162
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     3cc:	bc df       	rcall	.-136    	; 0x346 <__portable_avr_delay_cycles>
     3ce:	2f 98       	cbi	0x05, 7	; 5
    gpio_set_pin_low(RX_LED);
    gpio_set_pin_low(TX_LED);
    
    delay_ms(1000);
     3d0:	2e 98       	cbi	0x05, 6	; 5
     3d2:	6b e0       	ldi	r22, 0x0B	; 11
     3d4:	7b e8       	ldi	r23, 0x8B	; 139
     3d6:	82 e0       	ldi	r24, 0x02	; 2
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	b5 df       	rcall	.-150    	; 0x346 <__portable_avr_delay_cycles>

static void sendPacket(uint16_t destAddr, uint8_t *payload, uint8_t size) {

    NWK_DataReq_t txMsg;

    txMsg.dstAddr = destAddr;
     3dc:	68 94       	set
     3de:	aa 24       	eor	r10, r10
     3e0:	a1 f8       	bld	r10, 1
     3e2:	b1 2c       	mov	r11, r1
    txMsg.dstEndpoint = APP_ENDPOINT;
     3e4:	11 e0       	ldi	r17, 0x01	; 1
    txMsg.srcEndpoint = APP_ENDPOINT;
    txMsg.options = NWK_OPT_BROADCAST_PAN_ID;
     3e6:	04 e0       	ldi	r16, 0x04	; 4
    txMsg.data = payload;
     3e8:	ce 01       	movw	r24, r28
     3ea:	01 96       	adiw	r24, 0x01	; 1
    txMsg.size = size;
    txMsg.confirm = txConfirm;
     3ec:	6c 01       	movw	r12, r24
     3ee:	0f 2e       	mov	r0, r31
     3f0:	f7 eb       	ldi	r31, 0xB7	; 183
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 e0       	ldi	r31, 0x01	; 1
     3f6:	ff 2e       	mov	r15, r31

    
    /* Replace with your application code */
    while (1) 
    {
        SYS_TaskHandler();
     3f8:	f0 2d       	mov	r31, r0
     3fa:	38 d5       	rcall	.+2672   	; 0xe6c <SYS_TaskHandler>

static void sendPacket(uint16_t destAddr, uint8_t *payload, uint8_t size) {

    NWK_DataReq_t txMsg;

    txMsg.dstAddr = destAddr;
     3fc:	b8 86       	std	Y+8, r11	; 0x08
     3fe:	af 82       	std	Y+7, r10	; 0x07
    txMsg.dstEndpoint = APP_ENDPOINT;
     400:	19 87       	std	Y+9, r17	; 0x09
    txMsg.srcEndpoint = APP_ENDPOINT;
    txMsg.options = NWK_OPT_BROADCAST_PAN_ID;
     402:	1a 87       	std	Y+10, r17	; 0x0a
    txMsg.data = payload;
     404:	0b 87       	std	Y+11, r16	; 0x0b
     406:	dd 86       	std	Y+13, r13	; 0x0d
    txMsg.size = size;
     408:	cc 86       	std	Y+12, r12	; 0x0c
    txMsg.confirm = txConfirm;
     40a:	1e 87       	std	Y+14, r17	; 0x0e
    NWK_DataReq(&txMsg);
     40c:	f8 8a       	std	Y+16, r15	; 0x10
     40e:	ef 86       	std	Y+15, r14	; 0x0f
     410:	ce 01       	movw	r24, r28
     412:	02 96       	adiw	r24, 0x02	; 2
    /* Replace with your application code */
    while (1) 
    {
        SYS_TaskHandler();
        sendPacket(0x0002, &payload, 1);
        delay_ms(1000);
     414:	b9 d7       	rcall	.+3954   	; 0x1388 <NWK_DataReq>
     416:	6b e0       	ldi	r22, 0x0B	; 11
     418:	7b e8       	ldi	r23, 0x8B	; 139
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	93 df       	rcall	.-218    	; 0x346 <__portable_avr_delay_cycles>
     420:	ec cf       	rjmp	.-40     	; 0x3fa <main+0x74>

00000422 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	1f 92       	push	r1
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     42c:	9f b7       	in	r25, 0x3f	; 63
     42e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     430:	f8 94       	cli
	return flags;
     432:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
     434:	82 30       	cpi	r24, 0x02	; 2
     436:	40 f4       	brcc	.+16     	; 0x448 <sysclk_enable_module+0x26>
		*(reg + port)  &= ~id;
     438:	e8 2f       	mov	r30, r24
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	ec 59       	subi	r30, 0x9C	; 156
     43e:	ff 4f       	sbci	r31, 0xFF	; 255
     440:	60 95       	com	r22
     442:	80 81       	ld	r24, Z
     444:	68 23       	and	r22, r24
     446:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     448:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     44a:	0f 90       	pop	r0
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <sysclk_disable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bit mask) of the peripheral module to be disabled.
 */
void sysclk_disable_module( enum power_red_id port, uint8_t id)
{
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	1f 92       	push	r1
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     45c:	9f b7       	in	r25, 0x3f	; 63
     45e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     460:	f8 94       	cli
	return flags;
     462:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();
	if (port < NUMBER_OF_POWER_REG) {
     464:	82 30       	cpi	r24, 0x02	; 2
     466:	38 f4       	brcc	.+14     	; 0x476 <sysclk_disable_module+0x24>
		*(reg + port) |= id;
     468:	e8 2f       	mov	r30, r24
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	ec 59       	subi	r30, 0x9C	; 156
     46e:	ff 4f       	sbci	r31, 0xFF	; 255
     470:	80 81       	ld	r24, Z
     472:	68 2b       	or	r22, r24
     474:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     476:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
     478:	0f 90       	pop	r0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <__vector_20>:
/**
 * \internal
 * \brief Interrupt handler for Timer Counter  overflow
 */
ISR(TIMER1_OVF_vect)
{
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	0b b6       	in	r0, 0x3b	; 59
     48c:	0f 92       	push	r0
     48e:	2f 93       	push	r18
     490:	3f 93       	push	r19
     492:	4f 93       	push	r20
     494:	5f 93       	push	r21
     496:	6f 93       	push	r22
     498:	7f 93       	push	r23
     49a:	8f 93       	push	r24
     49c:	9f 93       	push	r25
     49e:	af 93       	push	r26
     4a0:	bf 93       	push	r27
     4a2:	ef 93       	push	r30
     4a4:	ff 93       	push	r31
	if (tc_tccr1_ovf_callback) {
     4a6:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <tc_tccr1_ovf_callback>
     4aa:	f0 91 30 02 	lds	r31, 0x0230	; 0x800230 <tc_tccr1_ovf_callback+0x1>
     4ae:	30 97       	sbiw	r30, 0x00	; 0
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <__vector_20+0x34>
		tc_tccr1_ovf_callback();
     4b2:	09 95       	icall
	}
}
     4b4:	ff 91       	pop	r31
     4b6:	ef 91       	pop	r30
     4b8:	bf 91       	pop	r27
     4ba:	af 91       	pop	r26
     4bc:	9f 91       	pop	r25
     4be:	8f 91       	pop	r24
     4c0:	7f 91       	pop	r23
     4c2:	6f 91       	pop	r22
     4c4:	5f 91       	pop	r21
     4c6:	4f 91       	pop	r20
     4c8:	3f 91       	pop	r19
     4ca:	2f 91       	pop	r18
     4cc:	0f 90       	pop	r0
     4ce:	0b be       	out	0x3b, r0	; 59
     4d0:	0f 90       	pop	r0
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	0f 90       	pop	r0
     4d6:	1f 90       	pop	r1
     4d8:	18 95       	reti

000004da <__vector_17>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel A
 */
ISR(TIMER1_COMPA_vect)
{
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	0b b6       	in	r0, 0x3b	; 59
     4e6:	0f 92       	push	r0
     4e8:	2f 93       	push	r18
     4ea:	3f 93       	push	r19
     4ec:	4f 93       	push	r20
     4ee:	5f 93       	push	r21
     4f0:	6f 93       	push	r22
     4f2:	7f 93       	push	r23
     4f4:	8f 93       	push	r24
     4f6:	9f 93       	push	r25
     4f8:	af 93       	push	r26
     4fa:	bf 93       	push	r27
     4fc:	ef 93       	push	r30
     4fe:	ff 93       	push	r31
	if (tc_tccr1_compa_callback) {
     500:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <tc_tccr1_compa_callback>
     504:	f0 91 2e 02 	lds	r31, 0x022E	; 0x80022e <tc_tccr1_compa_callback+0x1>
     508:	30 97       	sbiw	r30, 0x00	; 0
     50a:	09 f0       	breq	.+2      	; 0x50e <__vector_17+0x34>
		tc_tccr1_compa_callback();
     50c:	09 95       	icall
	}
}
     50e:	ff 91       	pop	r31
     510:	ef 91       	pop	r30
     512:	bf 91       	pop	r27
     514:	af 91       	pop	r26
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	7f 91       	pop	r23
     51c:	6f 91       	pop	r22
     51e:	5f 91       	pop	r21
     520:	4f 91       	pop	r20
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0b be       	out	0x3b, r0	; 59
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <__vector_18>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel B
 */
ISR(TIMER1_COMPB_vect)
{
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
     53e:	0b b6       	in	r0, 0x3b	; 59
     540:	0f 92       	push	r0
     542:	2f 93       	push	r18
     544:	3f 93       	push	r19
     546:	4f 93       	push	r20
     548:	5f 93       	push	r21
     54a:	6f 93       	push	r22
     54c:	7f 93       	push	r23
     54e:	8f 93       	push	r24
     550:	9f 93       	push	r25
     552:	af 93       	push	r26
     554:	bf 93       	push	r27
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
	if (tc_tccr1_compb_callback) {
     55a:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <tc_tccr1_compb_callback>
     55e:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <tc_tccr1_compb_callback+0x1>
     562:	30 97       	sbiw	r30, 0x00	; 0
     564:	09 f0       	breq	.+2      	; 0x568 <__vector_18+0x34>
		tc_tccr1_compb_callback();
     566:	09 95       	icall
	}
}
     568:	ff 91       	pop	r31
     56a:	ef 91       	pop	r30
     56c:	bf 91       	pop	r27
     56e:	af 91       	pop	r26
     570:	9f 91       	pop	r25
     572:	8f 91       	pop	r24
     574:	7f 91       	pop	r23
     576:	6f 91       	pop	r22
     578:	5f 91       	pop	r21
     57a:	4f 91       	pop	r20
     57c:	3f 91       	pop	r19
     57e:	2f 91       	pop	r18
     580:	0f 90       	pop	r0
     582:	0b be       	out	0x3b, r0	; 59
     584:	0f 90       	pop	r0
     586:	0f be       	out	0x3f, r0	; 63
     588:	0f 90       	pop	r0
     58a:	1f 90       	pop	r1
     58c:	18 95       	reti

0000058e <__vector_19>:

/**
 * \brief Interrupt handler for Timer Counter  Compare Match in Channel C
 */
ISR(TIMER1_COMPC_vect)
{
     58e:	1f 92       	push	r1
     590:	0f 92       	push	r0
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	0f 92       	push	r0
     596:	11 24       	eor	r1, r1
     598:	0b b6       	in	r0, 0x3b	; 59
     59a:	0f 92       	push	r0
     59c:	2f 93       	push	r18
     59e:	3f 93       	push	r19
     5a0:	4f 93       	push	r20
     5a2:	5f 93       	push	r21
     5a4:	6f 93       	push	r22
     5a6:	7f 93       	push	r23
     5a8:	8f 93       	push	r24
     5aa:	9f 93       	push	r25
     5ac:	af 93       	push	r26
     5ae:	bf 93       	push	r27
     5b0:	ef 93       	push	r30
     5b2:	ff 93       	push	r31
	if (tc_tccr1_compc_callback) {
     5b4:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <tc_tccr1_compc_callback>
     5b8:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <tc_tccr1_compc_callback+0x1>
     5bc:	30 97       	sbiw	r30, 0x00	; 0
     5be:	09 f0       	breq	.+2      	; 0x5c2 <__vector_19+0x34>
		tc_tccr1_compc_callback();
     5c0:	09 95       	icall
	}
}
     5c2:	ff 91       	pop	r31
     5c4:	ef 91       	pop	r30
     5c6:	bf 91       	pop	r27
     5c8:	af 91       	pop	r26
     5ca:	9f 91       	pop	r25
     5cc:	8f 91       	pop	r24
     5ce:	7f 91       	pop	r23
     5d0:	6f 91       	pop	r22
     5d2:	5f 91       	pop	r21
     5d4:	4f 91       	pop	r20
     5d6:	3f 91       	pop	r19
     5d8:	2f 91       	pop	r18
     5da:	0f 90       	pop	r0
     5dc:	0b be       	out	0x3b, r0	; 59
     5de:	0f 90       	pop	r0
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	0f 90       	pop	r0
     5e4:	1f 90       	pop	r1
     5e6:	18 95       	reti

000005e8 <__vector_35>:
static tc_callback_t tc_tccr3_compa_callback;
static tc_callback_t tc_tccr3_compb_callback;
static tc_callback_t tc_tccr3_compc_callback;

ISR(TIMER3_OVF_vect)
{
     5e8:	1f 92       	push	r1
     5ea:	0f 92       	push	r0
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	0f 92       	push	r0
     5f0:	11 24       	eor	r1, r1
     5f2:	0b b6       	in	r0, 0x3b	; 59
     5f4:	0f 92       	push	r0
     5f6:	2f 93       	push	r18
     5f8:	3f 93       	push	r19
     5fa:	4f 93       	push	r20
     5fc:	5f 93       	push	r21
     5fe:	6f 93       	push	r22
     600:	7f 93       	push	r23
     602:	8f 93       	push	r24
     604:	9f 93       	push	r25
     606:	af 93       	push	r26
     608:	bf 93       	push	r27
     60a:	ef 93       	push	r30
     60c:	ff 93       	push	r31
	if (tc_tccr3_ovf_callback) {
     60e:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <tc_tccr3_ovf_callback>
     612:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <tc_tccr3_ovf_callback+0x1>
     616:	30 97       	sbiw	r30, 0x00	; 0
     618:	09 f0       	breq	.+2      	; 0x61c <__vector_35+0x34>
		tc_tccr3_ovf_callback();
     61a:	09 95       	icall
	}
}
     61c:	ff 91       	pop	r31
     61e:	ef 91       	pop	r30
     620:	bf 91       	pop	r27
     622:	af 91       	pop	r26
     624:	9f 91       	pop	r25
     626:	8f 91       	pop	r24
     628:	7f 91       	pop	r23
     62a:	6f 91       	pop	r22
     62c:	5f 91       	pop	r21
     62e:	4f 91       	pop	r20
     630:	3f 91       	pop	r19
     632:	2f 91       	pop	r18
     634:	0f 90       	pop	r0
     636:	0b be       	out	0x3b, r0	; 59
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     642:	1f 92       	push	r1
     644:	0f 92       	push	r0
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	0f 92       	push	r0
     64a:	11 24       	eor	r1, r1
     64c:	0b b6       	in	r0, 0x3b	; 59
     64e:	0f 92       	push	r0
     650:	2f 93       	push	r18
     652:	3f 93       	push	r19
     654:	4f 93       	push	r20
     656:	5f 93       	push	r21
     658:	6f 93       	push	r22
     65a:	7f 93       	push	r23
     65c:	8f 93       	push	r24
     65e:	9f 93       	push	r25
     660:	af 93       	push	r26
     662:	bf 93       	push	r27
     664:	ef 93       	push	r30
     666:	ff 93       	push	r31
	if (tc_tccr3_compa_callback) {
     668:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <tc_tccr3_compa_callback>
     66c:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <tc_tccr3_compa_callback+0x1>
     670:	30 97       	sbiw	r30, 0x00	; 0
     672:	09 f0       	breq	.+2      	; 0x676 <__vector_32+0x34>
		tc_tccr3_compa_callback();
     674:	09 95       	icall
	}
}
     676:	ff 91       	pop	r31
     678:	ef 91       	pop	r30
     67a:	bf 91       	pop	r27
     67c:	af 91       	pop	r26
     67e:	9f 91       	pop	r25
     680:	8f 91       	pop	r24
     682:	7f 91       	pop	r23
     684:	6f 91       	pop	r22
     686:	5f 91       	pop	r21
     688:	4f 91       	pop	r20
     68a:	3f 91       	pop	r19
     68c:	2f 91       	pop	r18
     68e:	0f 90       	pop	r0
     690:	0b be       	out	0x3b, r0	; 59
     692:	0f 90       	pop	r0
     694:	0f be       	out	0x3f, r0	; 63
     696:	0f 90       	pop	r0
     698:	1f 90       	pop	r1
     69a:	18 95       	reti

0000069c <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
     69c:	1f 92       	push	r1
     69e:	0f 92       	push	r0
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	0f 92       	push	r0
     6a4:	11 24       	eor	r1, r1
     6a6:	0b b6       	in	r0, 0x3b	; 59
     6a8:	0f 92       	push	r0
     6aa:	2f 93       	push	r18
     6ac:	3f 93       	push	r19
     6ae:	4f 93       	push	r20
     6b0:	5f 93       	push	r21
     6b2:	6f 93       	push	r22
     6b4:	7f 93       	push	r23
     6b6:	8f 93       	push	r24
     6b8:	9f 93       	push	r25
     6ba:	af 93       	push	r26
     6bc:	bf 93       	push	r27
     6be:	ef 93       	push	r30
     6c0:	ff 93       	push	r31
	if (tc_tccr3_compb_callback) {
     6c2:	e0 91 23 02 	lds	r30, 0x0223	; 0x800223 <tc_tccr3_compb_callback>
     6c6:	f0 91 24 02 	lds	r31, 0x0224	; 0x800224 <tc_tccr3_compb_callback+0x1>
     6ca:	30 97       	sbiw	r30, 0x00	; 0
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <__vector_33+0x34>
		tc_tccr3_compb_callback();
     6ce:	09 95       	icall
	}
}
     6d0:	ff 91       	pop	r31
     6d2:	ef 91       	pop	r30
     6d4:	bf 91       	pop	r27
     6d6:	af 91       	pop	r26
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	7f 91       	pop	r23
     6de:	6f 91       	pop	r22
     6e0:	5f 91       	pop	r21
     6e2:	4f 91       	pop	r20
     6e4:	3f 91       	pop	r19
     6e6:	2f 91       	pop	r18
     6e8:	0f 90       	pop	r0
     6ea:	0b be       	out	0x3b, r0	; 59
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_34>:

ISR(TIMER3_COMPC_vect)
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	0b b6       	in	r0, 0x3b	; 59
     702:	0f 92       	push	r0
     704:	2f 93       	push	r18
     706:	3f 93       	push	r19
     708:	4f 93       	push	r20
     70a:	5f 93       	push	r21
     70c:	6f 93       	push	r22
     70e:	7f 93       	push	r23
     710:	8f 93       	push	r24
     712:	9f 93       	push	r25
     714:	af 93       	push	r26
     716:	bf 93       	push	r27
     718:	ef 93       	push	r30
     71a:	ff 93       	push	r31
	if (tc_tccr3_compc_callback) {
     71c:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <tc_tccr3_compc_callback>
     720:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <tc_tccr3_compc_callback+0x1>
     724:	30 97       	sbiw	r30, 0x00	; 0
     726:	09 f0       	breq	.+2      	; 0x72a <__vector_34+0x34>
		tc_tccr3_compc_callback();
     728:	09 95       	icall
	}
}
     72a:	ff 91       	pop	r31
     72c:	ef 91       	pop	r30
     72e:	bf 91       	pop	r27
     730:	af 91       	pop	r26
     732:	9f 91       	pop	r25
     734:	8f 91       	pop	r24
     736:	7f 91       	pop	r23
     738:	6f 91       	pop	r22
     73a:	5f 91       	pop	r21
     73c:	4f 91       	pop	r20
     73e:	3f 91       	pop	r19
     740:	2f 91       	pop	r18
     742:	0f 90       	pop	r0
     744:	0b be       	out	0x3b, r0	; 59
     746:	0f 90       	pop	r0
     748:	0f be       	out	0x3f, r0	; 63
     74a:	0f 90       	pop	r0
     74c:	1f 90       	pop	r1
     74e:	18 95       	reti

00000750 <__vector_45>:
static tc_callback_t tc_tccr4_compa_callback;
static tc_callback_t tc_tccr4_compb_callback;
static tc_callback_t tc_tccr4_compc_callback;

ISR(TIMER4_OVF_vect)
{
     750:	1f 92       	push	r1
     752:	0f 92       	push	r0
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	0f 92       	push	r0
     758:	11 24       	eor	r1, r1
     75a:	0b b6       	in	r0, 0x3b	; 59
     75c:	0f 92       	push	r0
     75e:	2f 93       	push	r18
     760:	3f 93       	push	r19
     762:	4f 93       	push	r20
     764:	5f 93       	push	r21
     766:	6f 93       	push	r22
     768:	7f 93       	push	r23
     76a:	8f 93       	push	r24
     76c:	9f 93       	push	r25
     76e:	af 93       	push	r26
     770:	bf 93       	push	r27
     772:	ef 93       	push	r30
     774:	ff 93       	push	r31
	if (tc_tccr4_ovf_callback) {
     776:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <tc_tccr4_ovf_callback>
     77a:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <tc_tccr4_ovf_callback+0x1>
     77e:	30 97       	sbiw	r30, 0x00	; 0
     780:	09 f0       	breq	.+2      	; 0x784 <__vector_45+0x34>
		tc_tccr4_ovf_callback();
     782:	09 95       	icall
	}
}
     784:	ff 91       	pop	r31
     786:	ef 91       	pop	r30
     788:	bf 91       	pop	r27
     78a:	af 91       	pop	r26
     78c:	9f 91       	pop	r25
     78e:	8f 91       	pop	r24
     790:	7f 91       	pop	r23
     792:	6f 91       	pop	r22
     794:	5f 91       	pop	r21
     796:	4f 91       	pop	r20
     798:	3f 91       	pop	r19
     79a:	2f 91       	pop	r18
     79c:	0f 90       	pop	r0
     79e:	0b be       	out	0x3b, r0	; 59
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	1f 90       	pop	r1
     7a8:	18 95       	reti

000007aa <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
     7aa:	1f 92       	push	r1
     7ac:	0f 92       	push	r0
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	0f 92       	push	r0
     7b2:	11 24       	eor	r1, r1
     7b4:	0b b6       	in	r0, 0x3b	; 59
     7b6:	0f 92       	push	r0
     7b8:	2f 93       	push	r18
     7ba:	3f 93       	push	r19
     7bc:	4f 93       	push	r20
     7be:	5f 93       	push	r21
     7c0:	6f 93       	push	r22
     7c2:	7f 93       	push	r23
     7c4:	8f 93       	push	r24
     7c6:	9f 93       	push	r25
     7c8:	af 93       	push	r26
     7ca:	bf 93       	push	r27
     7cc:	ef 93       	push	r30
     7ce:	ff 93       	push	r31
	if (tc_tccr4_compa_callback) {
     7d0:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <tc_tccr4_compa_callback>
     7d4:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <tc_tccr4_compa_callback+0x1>
     7d8:	30 97       	sbiw	r30, 0x00	; 0
     7da:	09 f0       	breq	.+2      	; 0x7de <__vector_42+0x34>
		tc_tccr4_compa_callback();
     7dc:	09 95       	icall
	}
}
     7de:	ff 91       	pop	r31
     7e0:	ef 91       	pop	r30
     7e2:	bf 91       	pop	r27
     7e4:	af 91       	pop	r26
     7e6:	9f 91       	pop	r25
     7e8:	8f 91       	pop	r24
     7ea:	7f 91       	pop	r23
     7ec:	6f 91       	pop	r22
     7ee:	5f 91       	pop	r21
     7f0:	4f 91       	pop	r20
     7f2:	3f 91       	pop	r19
     7f4:	2f 91       	pop	r18
     7f6:	0f 90       	pop	r0
     7f8:	0b be       	out	0x3b, r0	; 59
     7fa:	0f 90       	pop	r0
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	0f 90       	pop	r0
     800:	1f 90       	pop	r1
     802:	18 95       	reti

00000804 <__vector_43>:

ISR(TIMER4_COMPB_vect)
{
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	0f 92       	push	r0
     80c:	11 24       	eor	r1, r1
     80e:	0b b6       	in	r0, 0x3b	; 59
     810:	0f 92       	push	r0
     812:	2f 93       	push	r18
     814:	3f 93       	push	r19
     816:	4f 93       	push	r20
     818:	5f 93       	push	r21
     81a:	6f 93       	push	r22
     81c:	7f 93       	push	r23
     81e:	8f 93       	push	r24
     820:	9f 93       	push	r25
     822:	af 93       	push	r26
     824:	bf 93       	push	r27
     826:	ef 93       	push	r30
     828:	ff 93       	push	r31
	if (tc_tccr4_compb_callback) {
     82a:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <tc_tccr4_compb_callback>
     82e:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <tc_tccr4_compb_callback+0x1>
     832:	30 97       	sbiw	r30, 0x00	; 0
     834:	09 f0       	breq	.+2      	; 0x838 <__vector_43+0x34>
		tc_tccr4_compb_callback();
     836:	09 95       	icall
	}
}
     838:	ff 91       	pop	r31
     83a:	ef 91       	pop	r30
     83c:	bf 91       	pop	r27
     83e:	af 91       	pop	r26
     840:	9f 91       	pop	r25
     842:	8f 91       	pop	r24
     844:	7f 91       	pop	r23
     846:	6f 91       	pop	r22
     848:	5f 91       	pop	r21
     84a:	4f 91       	pop	r20
     84c:	3f 91       	pop	r19
     84e:	2f 91       	pop	r18
     850:	0f 90       	pop	r0
     852:	0b be       	out	0x3b, r0	; 59
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	0f 90       	pop	r0
     85a:	1f 90       	pop	r1
     85c:	18 95       	reti

0000085e <__vector_44>:

ISR(TIMER4_COMPC_vect)
{
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	0b b6       	in	r0, 0x3b	; 59
     86a:	0f 92       	push	r0
     86c:	2f 93       	push	r18
     86e:	3f 93       	push	r19
     870:	4f 93       	push	r20
     872:	5f 93       	push	r21
     874:	6f 93       	push	r22
     876:	7f 93       	push	r23
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
     880:	ef 93       	push	r30
     882:	ff 93       	push	r31
	if (tc_tccr4_compc_callback) {
     884:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <tc_tccr4_compc_callback>
     888:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <tc_tccr4_compc_callback+0x1>
     88c:	30 97       	sbiw	r30, 0x00	; 0
     88e:	09 f0       	breq	.+2      	; 0x892 <__vector_44+0x34>
		tc_tccr4_compc_callback();
     890:	09 95       	icall
	}
}
     892:	ff 91       	pop	r31
     894:	ef 91       	pop	r30
     896:	bf 91       	pop	r27
     898:	af 91       	pop	r26
     89a:	9f 91       	pop	r25
     89c:	8f 91       	pop	r24
     89e:	7f 91       	pop	r23
     8a0:	6f 91       	pop	r22
     8a2:	5f 91       	pop	r21
     8a4:	4f 91       	pop	r20
     8a6:	3f 91       	pop	r19
     8a8:	2f 91       	pop	r18
     8aa:	0f 90       	pop	r0
     8ac:	0b be       	out	0x3b, r0	; 59
     8ae:	0f 90       	pop	r0
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	0f 90       	pop	r0
     8b4:	1f 90       	pop	r1
     8b6:	18 95       	reti

000008b8 <__vector_50>:
static tc_callback_t tc_tccr5_compa_callback;
static tc_callback_t tc_tccr5_compb_callback;
static tc_callback_t tc_tccr5_compc_callback;

ISR(TIMER5_OVF_vect)
{
     8b8:	1f 92       	push	r1
     8ba:	0f 92       	push	r0
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	0f 92       	push	r0
     8c0:	11 24       	eor	r1, r1
     8c2:	0b b6       	in	r0, 0x3b	; 59
     8c4:	0f 92       	push	r0
     8c6:	2f 93       	push	r18
     8c8:	3f 93       	push	r19
     8ca:	4f 93       	push	r20
     8cc:	5f 93       	push	r21
     8ce:	6f 93       	push	r22
     8d0:	7f 93       	push	r23
     8d2:	8f 93       	push	r24
     8d4:	9f 93       	push	r25
     8d6:	af 93       	push	r26
     8d8:	bf 93       	push	r27
     8da:	ef 93       	push	r30
     8dc:	ff 93       	push	r31
	if (tc_tccr5_ovf_callback) {
     8de:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <tc_tccr5_ovf_callback>
     8e2:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <tc_tccr5_ovf_callback+0x1>
     8e6:	30 97       	sbiw	r30, 0x00	; 0
     8e8:	09 f0       	breq	.+2      	; 0x8ec <__vector_50+0x34>
		tc_tccr5_ovf_callback();
     8ea:	09 95       	icall
	}
}
     8ec:	ff 91       	pop	r31
     8ee:	ef 91       	pop	r30
     8f0:	bf 91       	pop	r27
     8f2:	af 91       	pop	r26
     8f4:	9f 91       	pop	r25
     8f6:	8f 91       	pop	r24
     8f8:	7f 91       	pop	r23
     8fa:	6f 91       	pop	r22
     8fc:	5f 91       	pop	r21
     8fe:	4f 91       	pop	r20
     900:	3f 91       	pop	r19
     902:	2f 91       	pop	r18
     904:	0f 90       	pop	r0
     906:	0b be       	out	0x3b, r0	; 59
     908:	0f 90       	pop	r0
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	0f 90       	pop	r0
     90e:	1f 90       	pop	r1
     910:	18 95       	reti

00000912 <__vector_47>:

ISR(TIMER5_COMPA_vect)
{
     912:	1f 92       	push	r1
     914:	0f 92       	push	r0
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	0f 92       	push	r0
     91a:	11 24       	eor	r1, r1
     91c:	0b b6       	in	r0, 0x3b	; 59
     91e:	0f 92       	push	r0
     920:	2f 93       	push	r18
     922:	3f 93       	push	r19
     924:	4f 93       	push	r20
     926:	5f 93       	push	r21
     928:	6f 93       	push	r22
     92a:	7f 93       	push	r23
     92c:	8f 93       	push	r24
     92e:	9f 93       	push	r25
     930:	af 93       	push	r26
     932:	bf 93       	push	r27
     934:	ef 93       	push	r30
     936:	ff 93       	push	r31
	if (tc_tccr5_compa_callback) {
     938:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <tc_tccr5_compa_callback>
     93c:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <tc_tccr5_compa_callback+0x1>
     940:	30 97       	sbiw	r30, 0x00	; 0
     942:	09 f0       	breq	.+2      	; 0x946 <__vector_47+0x34>
		tc_tccr5_compa_callback();
     944:	09 95       	icall
	}
}
     946:	ff 91       	pop	r31
     948:	ef 91       	pop	r30
     94a:	bf 91       	pop	r27
     94c:	af 91       	pop	r26
     94e:	9f 91       	pop	r25
     950:	8f 91       	pop	r24
     952:	7f 91       	pop	r23
     954:	6f 91       	pop	r22
     956:	5f 91       	pop	r21
     958:	4f 91       	pop	r20
     95a:	3f 91       	pop	r19
     95c:	2f 91       	pop	r18
     95e:	0f 90       	pop	r0
     960:	0b be       	out	0x3b, r0	; 59
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	0f 90       	pop	r0
     968:	1f 90       	pop	r1
     96a:	18 95       	reti

0000096c <__vector_48>:

ISR(TIMER5_COMPB_vect)
{
     96c:	1f 92       	push	r1
     96e:	0f 92       	push	r0
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	0b b6       	in	r0, 0x3b	; 59
     978:	0f 92       	push	r0
     97a:	2f 93       	push	r18
     97c:	3f 93       	push	r19
     97e:	4f 93       	push	r20
     980:	5f 93       	push	r21
     982:	6f 93       	push	r22
     984:	7f 93       	push	r23
     986:	8f 93       	push	r24
     988:	9f 93       	push	r25
     98a:	af 93       	push	r26
     98c:	bf 93       	push	r27
     98e:	ef 93       	push	r30
     990:	ff 93       	push	r31
	if (tc_tccr5_compb_callback) {
     992:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <tc_tccr5_compb_callback>
     996:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <tc_tccr5_compb_callback+0x1>
     99a:	30 97       	sbiw	r30, 0x00	; 0
     99c:	09 f0       	breq	.+2      	; 0x9a0 <__vector_48+0x34>
		tc_tccr5_compb_callback();
     99e:	09 95       	icall
	}
}
     9a0:	ff 91       	pop	r31
     9a2:	ef 91       	pop	r30
     9a4:	bf 91       	pop	r27
     9a6:	af 91       	pop	r26
     9a8:	9f 91       	pop	r25
     9aa:	8f 91       	pop	r24
     9ac:	7f 91       	pop	r23
     9ae:	6f 91       	pop	r22
     9b0:	5f 91       	pop	r21
     9b2:	4f 91       	pop	r20
     9b4:	3f 91       	pop	r19
     9b6:	2f 91       	pop	r18
     9b8:	0f 90       	pop	r0
     9ba:	0b be       	out	0x3b, r0	; 59
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	0f 90       	pop	r0
     9c2:	1f 90       	pop	r1
     9c4:	18 95       	reti

000009c6 <__vector_49>:

ISR(TIMER5_COMPC_vect)
{
     9c6:	1f 92       	push	r1
     9c8:	0f 92       	push	r0
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	0f 92       	push	r0
     9ce:	11 24       	eor	r1, r1
     9d0:	0b b6       	in	r0, 0x3b	; 59
     9d2:	0f 92       	push	r0
     9d4:	2f 93       	push	r18
     9d6:	3f 93       	push	r19
     9d8:	4f 93       	push	r20
     9da:	5f 93       	push	r21
     9dc:	6f 93       	push	r22
     9de:	7f 93       	push	r23
     9e0:	8f 93       	push	r24
     9e2:	9f 93       	push	r25
     9e4:	af 93       	push	r26
     9e6:	bf 93       	push	r27
     9e8:	ef 93       	push	r30
     9ea:	ff 93       	push	r31
	if (tc_tccr5_compc_callback) {
     9ec:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <tc_tccr5_compc_callback>
     9f0:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <tc_tccr5_compc_callback+0x1>
     9f4:	30 97       	sbiw	r30, 0x00	; 0
     9f6:	09 f0       	breq	.+2      	; 0x9fa <__vector_49+0x34>
		tc_tccr5_compc_callback();
     9f8:	09 95       	icall
	}
}
     9fa:	ff 91       	pop	r31
     9fc:	ef 91       	pop	r30
     9fe:	bf 91       	pop	r27
     a00:	af 91       	pop	r26
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	7f 91       	pop	r23
     a08:	6f 91       	pop	r22
     a0a:	5f 91       	pop	r21
     a0c:	4f 91       	pop	r20
     a0e:	3f 91       	pop	r19
     a10:	2f 91       	pop	r18
     a12:	0f 90       	pop	r0
     a14:	0b be       	out	0x3b, r0	; 59
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <tc_enable>:

void tc_enable(volatile void *tc)
{
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	1f 92       	push	r1
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a2c:	2f b7       	in	r18, 0x3f	; 63
     a2e:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     a30:	f8 94       	cli
	return flags;
     a32:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     a34:	00 97       	sbiw	r24, 0x00	; 0
     a36:	09 f4       	brne	.+2      	; 0xa3a <tc_enable+0x1a>
     a38:	57 c0       	rjmp	.+174    	; 0xae8 <tc_enable+0xc8>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
     a3a:	88 37       	cpi	r24, 0x78	; 120
     a3c:	91 05       	cpc	r25, r1
     a3e:	39 f4       	brne	.+14     	; 0xa4e <tc_enable+0x2e>
		sysclk_enable_module(POWER_RED_REG0, PRADC_bm);
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	ee dc       	rcall	.-1572   	; 0x422 <sysclk_enable_module>
#if MEGA_RF
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
     a46:	60 e1       	ldi	r22, 0x10	; 16
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	eb dc       	rcall	.-1578   	; 0x422 <sysclk_enable_module>
     a4c:	4d c0       	rjmp	.+154    	; 0xae8 <tc_enable+0xc8>
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
     a4e:	80 3c       	cpi	r24, 0xC0	; 192
     a50:	91 05       	cpc	r25, r1
     a52:	21 f4       	brne	.+8      	; 0xa5c <tc_enable+0x3c>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
     a54:	62 e0       	ldi	r22, 0x02	; 2
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	e4 dc       	rcall	.-1592   	; 0x422 <sysclk_enable_module>
     a5a:	46 c0       	rjmp	.+140    	; 0xae8 <tc_enable+0xc8>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
     a5c:	8c 34       	cpi	r24, 0x4C	; 76
     a5e:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
     a60:	21 f4       	brne	.+8      	; 0xa6a <tc_enable+0x4a>
     a62:	64 e0       	ldi	r22, 0x04	; 4
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	dd dc       	rcall	.-1606   	; 0x422 <sysclk_enable_module>
     a68:	3f c0       	rjmp	.+126    	; 0xae8 <tc_enable+0xc8>
	}
#endif

	else if (module == &TCCR1A) {
     a6a:	80 38       	cpi	r24, 0x80	; 128
     a6c:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
     a6e:	21 f4       	brne	.+8      	; 0xa78 <tc_enable+0x58>
     a70:	68 e0       	ldi	r22, 0x08	; 8
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	d6 dc       	rcall	.-1620   	; 0x422 <sysclk_enable_module>
     a76:	38 c0       	rjmp	.+112    	; 0xae8 <tc_enable+0xc8>
		sysclk_enable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
     a78:	84 34       	cpi	r24, 0x44	; 68
     a7a:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
     a7c:	21 f4       	brne	.+8      	; 0xa86 <tc_enable+0x66>
     a7e:	60 e2       	ldi	r22, 0x20	; 32
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	cf dc       	rcall	.-1634   	; 0x422 <sysclk_enable_module>
	} else if (module == &TCCR2A) {
     a84:	31 c0       	rjmp	.+98     	; 0xae8 <tc_enable+0xc8>
     a86:	80 3b       	cpi	r24, 0xB0	; 176
     a88:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
     a8a:	21 f4       	brne	.+8      	; 0xa94 <tc_enable+0x74>
     a8c:	60 e4       	ldi	r22, 0x40	; 64
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	c8 dc       	rcall	.-1648   	; 0x422 <sysclk_enable_module>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
     a92:	2a c0       	rjmp	.+84     	; 0xae8 <tc_enable+0xc8>
     a94:	88 3b       	cpi	r24, 0xB8	; 184
     a96:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG0, PRTWI_bm);
     a98:	21 f4       	brne	.+8      	; 0xaa2 <tc_enable+0x82>
     a9a:	60 e8       	ldi	r22, 0x80	; 128
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	c1 dc       	rcall	.-1662   	; 0x422 <sysclk_enable_module>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
     aa0:	23 c0       	rjmp	.+70     	; 0xae8 <tc_enable+0xc8>
     aa2:	88 3c       	cpi	r24, 0xC8	; 200
     aa4:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG1, PRUSART1_bm);
     aa6:	21 f4       	brne	.+8      	; 0xab0 <tc_enable+0x90>
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	ba dc       	rcall	.-1676   	; 0x422 <sysclk_enable_module>
	} else if (module == &TCCR3A) {
     aae:	1c c0       	rjmp	.+56     	; 0xae8 <tc_enable+0xc8>
     ab0:	80 39       	cpi	r24, 0x90	; 144
     ab2:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG1, PRTIM3_bm);
     ab4:	21 f4       	brne	.+8      	; 0xabe <tc_enable+0x9e>
     ab6:	68 e0       	ldi	r22, 0x08	; 8
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	b3 dc       	rcall	.-1690   	; 0x422 <sysclk_enable_module>
	} else if (module == &TCCR4A) {
     abc:	15 c0       	rjmp	.+42     	; 0xae8 <tc_enable+0xc8>
     abe:	80 3a       	cpi	r24, 0xA0	; 160
     ac0:	91 05       	cpc	r25, r1
		sysclk_enable_module(POWER_RED_REG1, PRTIM4_bm);
     ac2:	21 f4       	brne	.+8      	; 0xacc <tc_enable+0xac>
     ac4:	60 e1       	ldi	r22, 0x10	; 16
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	ac dc       	rcall	.-1704   	; 0x422 <sysclk_enable_module>
	} else if (module == &TCCR5A) {
     aca:	0e c0       	rjmp	.+28     	; 0xae8 <tc_enable+0xc8>
     acc:	80 32       	cpi	r24, 0x20	; 32
     ace:	21 e0       	ldi	r18, 0x01	; 1
		sysclk_enable_module(POWER_RED_REG1, PRTIM5_bm);
     ad0:	92 07       	cpc	r25, r18
     ad2:	21 f4       	brne	.+8      	; 0xadc <tc_enable+0xbc>
     ad4:	60 e2       	ldi	r22, 0x20	; 32
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	a4 dc       	rcall	.-1720   	; 0x422 <sysclk_enable_module>
	} else if (module == &TRX_CTRL_0) {
     ada:	06 c0       	rjmp	.+12     	; 0xae8 <tc_enable+0xc8>
     adc:	83 34       	cpi	r24, 0x43	; 67
     ade:	91 40       	sbci	r25, 0x01	; 1
		sysclk_enable_module(POWER_RED_REG1, PRTRX24_bm);
     ae0:	19 f4       	brne	.+6      	; 0xae8 <tc_enable+0xc8>
     ae2:	60 e4       	ldi	r22, 0x40	; 64
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	9d dc       	rcall	.-1734   	; 0x422 <sysclk_enable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ae8:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_enable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
     aea:	0f 90       	pop	r0
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	08 95       	ret

00000af4 <tc_disable>:

void tc_disable(volatile void *tc)
{
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	1f 92       	push	r1
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b00:	2f b7       	in	r18, 0x3f	; 63
     b02:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     b04:	f8 94       	cli
	return flags;
     b06:	19 81       	ldd	r17, Y+1	; 0x01
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_disable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     b08:	00 97       	sbiw	r24, 0x00	; 0
     b0a:	09 f4       	brne	.+2      	; 0xb0e <tc_disable+0x1a>
     b0c:	57 c0       	rjmp	.+174    	; 0xbbc <tc_disable+0xc8>
		Assert(false);
	}

#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	else if (module == &ADC) {
     b0e:	88 37       	cpi	r24, 0x78	; 120
     b10:	91 05       	cpc	r25, r1
     b12:	39 f4       	brne	.+14     	; 0xb22 <tc_disable+0x2e>
		sysclk_disable_module(POWER_RED_REG0, PRADC_bm);
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	9c dc       	rcall	.-1736   	; 0x452 <sysclk_disable_module>
#if MEGA_RF
		sysclk_disable_module(POWER_RED_REG0, PRPGA_bm);
     b1a:	60 e1       	ldi	r22, 0x10	; 16
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	99 dc       	rcall	.-1742   	; 0x452 <sysclk_disable_module>
     b20:	4d c0       	rjmp	.+154    	; 0xbbc <tc_disable+0xc8>
#endif
	} 
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
     b22:	80 3c       	cpi	r24, 0xC0	; 192
     b24:	91 05       	cpc	r25, r1
     b26:	21 f4       	brne	.+8      	; 0xb30 <tc_disable+0x3c>
		sysclk_disable_module(POWER_RED_REG0, PRUSART0_bm);
     b28:	62 e0       	ldi	r22, 0x02	; 2
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	92 dc       	rcall	.-1756   	; 0x452 <sysclk_disable_module>
     b2e:	46 c0       	rjmp	.+140    	; 0xbbc <tc_disable+0xc8>
	}
#endif
#if MEGA_RF
	else if (module == &SPCR) {
     b30:	8c 34       	cpi	r24, 0x4C	; 76
     b32:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG0, PRSPI_bm);
     b34:	21 f4       	brne	.+8      	; 0xb3e <tc_disable+0x4a>
     b36:	64 e0       	ldi	r22, 0x04	; 4
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	8b dc       	rcall	.-1770   	; 0x452 <sysclk_disable_module>
     b3c:	3f c0       	rjmp	.+126    	; 0xbbc <tc_disable+0xc8>
	}
#endif
	else if (module == &TCCR1A) {
     b3e:	80 38       	cpi	r24, 0x80	; 128
     b40:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG0, PRTIM1_bm);
     b42:	21 f4       	brne	.+8      	; 0xb4c <tc_disable+0x58>
     b44:	68 e0       	ldi	r22, 0x08	; 8
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	84 dc       	rcall	.-1784   	; 0x452 <sysclk_disable_module>
     b4a:	38 c0       	rjmp	.+112    	; 0xbbc <tc_disable+0xc8>
	else if (module == &LCDCRA) {
		sysclk_disable_module(POWER_RED_REG0, PRLCD_bm);
	}
#endif
#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
     b4c:	84 34       	cpi	r24, 0x44	; 68
     b4e:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG0, PRTIM0_bm);
     b50:	21 f4       	brne	.+8      	; 0xb5a <tc_disable+0x66>
     b52:	60 e2       	ldi	r22, 0x20	; 32
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	7d dc       	rcall	.-1798   	; 0x452 <sysclk_disable_module>
	} else if (module == &TCCR2A) {
     b58:	31 c0       	rjmp	.+98     	; 0xbbc <tc_disable+0xc8>
     b5a:	80 3b       	cpi	r24, 0xB0	; 176
     b5c:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG0, PRTIM2_bm);
     b5e:	21 f4       	brne	.+8      	; 0xb68 <tc_disable+0x74>
     b60:	60 e4       	ldi	r22, 0x40	; 64
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	76 dc       	rcall	.-1812   	; 0x452 <sysclk_disable_module>
#if AVR8_PART_IS_DEFINED(ATmega328PB) || AVR8_PART_IS_DEFINED(ATmega324PB)
	} else if (module == &TWBR0) {
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
	}
#else
	} else if (module == &TWBR) {
     b66:	2a c0       	rjmp	.+84     	; 0xbbc <tc_disable+0xc8>
     b68:	88 3b       	cpi	r24, 0xB8	; 184
     b6a:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG0, PRTWI_bm);
     b6c:	21 f4       	brne	.+8      	; 0xb76 <tc_disable+0x82>
     b6e:	60 e8       	ldi	r22, 0x80	; 128
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	6f dc       	rcall	.-1826   	; 0x452 <sysclk_disable_module>
	}
#endif
#endif

#if MEGA_RF
	else if (module == &UCSR1A) {
     b74:	23 c0       	rjmp	.+70     	; 0xbbc <tc_disable+0xc8>
     b76:	88 3c       	cpi	r24, 0xC8	; 200
     b78:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG1, PRUSART1_bm);
     b7a:	21 f4       	brne	.+8      	; 0xb84 <tc_disable+0x90>
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	68 dc       	rcall	.-1840   	; 0x452 <sysclk_disable_module>
	} else if (module == &TCCR3A) {
     b82:	1c c0       	rjmp	.+56     	; 0xbbc <tc_disable+0xc8>
     b84:	80 39       	cpi	r24, 0x90	; 144
     b86:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG1, PRTIM3_bm);
     b88:	21 f4       	brne	.+8      	; 0xb92 <tc_disable+0x9e>
     b8a:	68 e0       	ldi	r22, 0x08	; 8
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	61 dc       	rcall	.-1854   	; 0x452 <sysclk_disable_module>
	} else if (module == &TCCR4A) {
     b90:	15 c0       	rjmp	.+42     	; 0xbbc <tc_disable+0xc8>
     b92:	80 3a       	cpi	r24, 0xA0	; 160
     b94:	91 05       	cpc	r25, r1
		sysclk_disable_module(POWER_RED_REG1, PRTIM4_bm);
     b96:	21 f4       	brne	.+8      	; 0xba0 <tc_disable+0xac>
     b98:	60 e1       	ldi	r22, 0x10	; 16
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	5a dc       	rcall	.-1868   	; 0x452 <sysclk_disable_module>
	} else if (module == &TCCR5A) {
     b9e:	0e c0       	rjmp	.+28     	; 0xbbc <tc_disable+0xc8>
     ba0:	80 32       	cpi	r24, 0x20	; 32
     ba2:	21 e0       	ldi	r18, 0x01	; 1
		sysclk_disable_module(POWER_RED_REG1, PRTIM5_bm);
     ba4:	92 07       	cpc	r25, r18
     ba6:	21 f4       	brne	.+8      	; 0xbb0 <tc_disable+0xbc>
     ba8:	60 e2       	ldi	r22, 0x20	; 32
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	52 dc       	rcall	.-1884   	; 0x452 <sysclk_disable_module>
	} else if (module == &TRX_CTRL_0) {
     bae:	06 c0       	rjmp	.+12     	; 0xbbc <tc_disable+0xc8>
     bb0:	83 34       	cpi	r24, 0x43	; 67
     bb2:	91 40       	sbci	r25, 0x01	; 1
		sysclk_disable_module(POWER_RED_REG1, PRTRX24_bm);
     bb4:	19 f4       	brne	.+6      	; 0xbbc <tc_disable+0xc8>
     bb6:	60 e4       	ldi	r22, 0x40	; 64
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	4b dc       	rcall	.-1898   	; 0x452 <sysclk_disable_module>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bbc:	1f bf       	out	0x3f, r17	; 63
	irqflags_t iflags = cpu_irq_save();

	sysclk_disable_peripheral_clock(tc);

	cpu_irq_restore(iflags);
}
     bbe:	0f 90       	pop	r0
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	08 95       	ret

00000bc8 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
     bc8:	80 38       	cpi	r24, 0x80	; 128
     bca:	91 05       	cpc	r25, r1
     bcc:	29 f4       	brne	.+10     	; 0xbd8 <tc_set_overflow_interrupt_callback+0x10>
		tc_tccr1_ovf_callback = callback;
     bce:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <tc_tccr1_ovf_callback+0x1>
     bd2:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <tc_tccr1_ovf_callback>
     bd6:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
     bd8:	80 39       	cpi	r24, 0x90	; 144
     bda:	91 05       	cpc	r25, r1
     bdc:	29 f4       	brne	.+10     	; 0xbe8 <tc_set_overflow_interrupt_callback+0x20>
		tc_tccr3_ovf_callback = callback;
     bde:	70 93 28 02 	sts	0x0228, r23	; 0x800228 <tc_tccr3_ovf_callback+0x1>
     be2:	60 93 27 02 	sts	0x0227, r22	; 0x800227 <tc_tccr3_ovf_callback>
     be6:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
     be8:	80 3a       	cpi	r24, 0xA0	; 160
     bea:	91 05       	cpc	r25, r1
     bec:	29 f4       	brne	.+10     	; 0xbf8 <tc_set_overflow_interrupt_callback+0x30>
		tc_tccr4_ovf_callback = callback;
     bee:	70 93 20 02 	sts	0x0220, r23	; 0x800220 <tc_tccr4_ovf_callback+0x1>
     bf2:	60 93 1f 02 	sts	0x021F, r22	; 0x80021f <tc_tccr4_ovf_callback>
     bf6:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
     bf8:	80 32       	cpi	r24, 0x20	; 32
     bfa:	91 40       	sbci	r25, 0x01	; 1
     bfc:	21 f4       	brne	.+8      	; 0xc06 <tc_set_overflow_interrupt_callback+0x3e>
		tc_tccr5_ovf_callback = callback;
     bfe:	70 93 18 02 	sts	0x0218, r23	; 0x800218 <tc_tccr5_ovf_callback+0x1>
     c02:	60 93 17 02 	sts	0x0217, r22	; 0x800217 <tc_tccr5_ovf_callback>
     c06:	08 95       	ret

00000c08 <tc_set_compa_interrupt_callback>:
	} else {}
}

void tc_set_compa_interrupt_callback(volatile void *tc, tc_callback_t callback)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
     c08:	80 38       	cpi	r24, 0x80	; 128
     c0a:	91 05       	cpc	r25, r1
     c0c:	29 f4       	brne	.+10     	; 0xc18 <tc_set_compa_interrupt_callback+0x10>
		tc_tccr1_compa_callback = callback;
     c0e:	70 93 2e 02 	sts	0x022E, r23	; 0x80022e <tc_tccr1_compa_callback+0x1>
     c12:	60 93 2d 02 	sts	0x022D, r22	; 0x80022d <tc_tccr1_compa_callback>
     c16:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR3A) {
     c18:	80 39       	cpi	r24, 0x90	; 144
     c1a:	91 05       	cpc	r25, r1
     c1c:	29 f4       	brne	.+10     	; 0xc28 <tc_set_compa_interrupt_callback+0x20>
		tc_tccr3_compa_callback = callback;
     c1e:	70 93 26 02 	sts	0x0226, r23	; 0x800226 <tc_tccr3_compa_callback+0x1>
     c22:	60 93 25 02 	sts	0x0225, r22	; 0x800225 <tc_tccr3_compa_callback>
     c26:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR4A) {
     c28:	80 3a       	cpi	r24, 0xA0	; 160
     c2a:	91 05       	cpc	r25, r1
     c2c:	29 f4       	brne	.+10     	; 0xc38 <tc_set_compa_interrupt_callback+0x30>
		tc_tccr4_compa_callback = callback;
     c2e:	70 93 1e 02 	sts	0x021E, r23	; 0x80021e <tc_tccr4_compa_callback+0x1>
     c32:	60 93 1d 02 	sts	0x021D, r22	; 0x80021d <tc_tccr4_compa_callback>
     c36:	08 95       	ret
	} else if ((uintptr_t)tc == (uintptr_t)&TCCR5A) {
     c38:	80 32       	cpi	r24, 0x20	; 32
     c3a:	91 40       	sbci	r25, 0x01	; 1
     c3c:	21 f4       	brne	.+8      	; 0xc46 <tc_set_compa_interrupt_callback+0x3e>
		tc_tccr5_compa_callback = callback;
     c3e:	70 93 16 02 	sts	0x0216, r23	; 0x800216 <tc_tccr5_compa_callback+0x1>
     c42:	60 93 15 02 	sts	0x0215, r22	; 0x800215 <tc_tccr5_compa_callback>
     c46:	08 95       	ret

00000c48 <sal_init>:

/**
 * @brief Cleans up the SAL/AES after STB has been finished
 */
void _sal_aes_clean_up(void)
{
     c48:	08 95       	ret

00000c4a <sal_aes_exec>:
 * The function returns after the AES operation is finished.
 *
 * @param[in]  data  AES block to be en/decrypted
 */
void sal_aes_exec(uint8_t *data)
{
     c4a:	fc 01       	movw	r30, r24
     c4c:	9c 01       	movw	r18, r24
     c4e:	20 5f       	subi	r18, 0xF0	; 240
     c50:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
		trx_reg_write(RG_AES_STATE, *data++);
     c52:	ae e3       	ldi	r26, 0x3E	; 62
     c54:	b1 e0       	ldi	r27, 0x01	; 1
     c56:	81 91       	ld	r24, Z+
     c58:	8c 93       	st	X, r24
 */
void sal_aes_exec(uint8_t *data)
{
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
     c5a:	e2 17       	cp	r30, r18
     c5c:	f3 07       	cpc	r31, r19
     c5e:	d9 f7       	brne	.-10     	; 0xc56 <sal_aes_exec+0xc>
		trx_reg_write(RG_AES_STATE, *data++);
	}

	trx_reg_write(RG_AES_CTRL,
     c60:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <mode_byte>
     c64:	80 68       	ori	r24, 0x80	; 128
     c66:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__TEXT_REGION_LENGTH__+0x7e013c>
			mode_byte | SR_MASK(SR_AES_REQUEST, AES_START));

	/* Wait for the operation to finish - poll RG_AES_RY. */
	while (!trx_bit_read(SR_AES_DONE)) {
     c6a:	ed e3       	ldi	r30, 0x3D	; 61
     c6c:	f1 e0       	ldi	r31, 0x01	; 1
     c6e:	80 81       	ld	r24, Z
     c70:	80 ff       	sbrs	r24, 0
     c72:	fd cf       	rjmp	.-6      	; 0xc6e <sal_aes_exec+0x24>
	}
}
     c74:	08 95       	ret

00000c76 <sal_aes_setup>:
 * @return  False if some parameter was illegal, true else
 */
bool sal_aes_setup(uint8_t *key,
		uint8_t enc_mode,
		uint8_t dir)
{
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	60 97       	sbiw	r28, 0x10	; 16
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	06 2f       	mov	r16, r22
     c90:	14 2f       	mov	r17, r20
	uint8_t i;

	if (key != NULL) {
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	c9 f0       	breq	.+50     	; 0xcc8 <sal_aes_setup+0x52>
		/* Setup key. */
		dec_initialized = false;
     c96:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <dec_initialized>

		last_dir = AES_DIR_VOID;
     c9a:	22 e0       	ldi	r18, 0x02	; 2
     c9c:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <last_dir>

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);
     ca0:	20 e1       	ldi	r18, 0x10	; 16
     ca2:	fc 01       	movw	r30, r24
     ca4:	a1 e4       	ldi	r26, 0x41	; 65
     ca6:	b2 e0       	ldi	r27, 0x02	; 2
     ca8:	01 90       	ld	r0, Z+
     caa:	0d 92       	st	X+, r0
     cac:	2a 95       	dec	r18
     cae:	e1 f7       	brne	.-8      	; 0xca8 <sal_aes_setup+0x32>
     cb0:	dc 01       	movw	r26, r24
     cb2:	ac 01       	movw	r20, r24
     cb4:	40 5f       	subi	r20, 0xF0	; 240
     cb6:	5f 4f       	sbci	r21, 0xFF	; 255

		/* fill in key */
		for (i = 0; i < AES_BLOCKSIZE; ++i) {
			trx_reg_write(RG_AES_KEY, key[i]);
     cb8:	2f e3       	ldi	r18, 0x3F	; 63
     cba:	31 e0       	ldi	r19, 0x01	; 1
     cbc:	9d 91       	ld	r25, X+
     cbe:	f9 01       	movw	r30, r18
     cc0:	90 83       	st	Z, r25

		/* Save key for later use after decryption or sleep. */
		memcpy(enc_key, key, AES_KEYSIZE);

		/* fill in key */
		for (i = 0; i < AES_BLOCKSIZE; ++i) {
     cc2:	4a 17       	cp	r20, r26
     cc4:	5b 07       	cpc	r21, r27
     cc6:	d1 f7       	brne	.-12     	; 0xcbc <sal_aes_setup+0x46>
			trx_reg_write(RG_AES_KEY, key[i]);
		}
	}

	/* Set encryption direction. */
	switch (dir) {
     cc8:	11 23       	and	r17, r17
     cca:	19 f0       	breq	.+6      	; 0xcd2 <sal_aes_setup+0x5c>
     ccc:	11 30       	cpi	r17, 0x01	; 1
     cce:	89 f0       	breq	.+34     	; 0xcf2 <sal_aes_setup+0x7c>
     cd0:	48 c0       	rjmp	.+144    	; 0xd62 <sal_aes_setup+0xec>
	case AES_DIR_ENCRYPT:
		if (last_dir == AES_DIR_DECRYPT) {
     cd2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <last_dir>
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	79 f5       	brne	.+94     	; 0xd38 <sal_aes_setup+0xc2>
     cda:	e1 e4       	ldi	r30, 0x41	; 65
     cdc:	f2 e0       	ldi	r31, 0x02	; 2
     cde:	21 e5       	ldi	r18, 0x51	; 81
     ce0:	32 e0       	ldi	r19, 0x02	; 2
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, enc_key[i]);
     ce2:	af e3       	ldi	r26, 0x3F	; 63
     ce4:	b1 e0       	ldi	r27, 0x01	; 1
     ce6:	81 91       	ld	r24, Z+
     ce8:	8c 93       	st	X, r24
		if (last_dir == AES_DIR_DECRYPT) {
			/*
			 * If the last operation was decryption, the encryption
			 * key must be stored in enc_key, so re-initialize it.
			 */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
     cea:	2e 17       	cp	r18, r30
     cec:	3f 07       	cpc	r19, r31
     cee:	d9 f7       	brne	.-10     	; 0xce6 <sal_aes_setup+0x70>
     cf0:	23 c0       	rjmp	.+70     	; 0xd38 <sal_aes_setup+0xc2>
		}

		break;

	case AES_DIR_DECRYPT:
		if (last_dir != AES_DIR_DECRYPT) {
     cf2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <last_dir>
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	b1 f1       	breq	.+108    	; 0xd66 <sal_aes_setup+0xf0>
			if (!dec_initialized) {
     cfa:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <dec_initialized>
     cfe:	81 11       	cpse	r24, r1
     d00:	36 c0       	rjmp	.+108    	; 0xd6e <sal_aes_setup+0xf8>

				/* Compute decryption key and initialize unit
				 * with it. */

				/* Dummy ECB encryption. */
				mode_byte = SR_MASK(SR_AES_MODE, AES_MODE_ECB) |
     d02:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <mode_byte>
						SR_MASK(SR_AES_DIR,
						AES_DIR_ENCRYPT);
				trx_reg_write(RG_AES_CTRL, mode_byte);
     d06:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__TEXT_REGION_LENGTH__+0x7e013c>
				sal_aes_exec(dummy);
     d0a:	ce 01       	movw	r24, r28
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	9d df       	rcall	.-198    	; 0xc4a <sal_aes_exec>
     d10:	e1 e3       	ldi	r30, 0x31	; 49
     d12:	f2 e0       	ldi	r31, 0x02	; 2
     d14:	21 e4       	ldi	r18, 0x41	; 65
     d16:	32 e0       	ldi	r19, 0x02	; 2

				/* Read last round key. */
				for (i = 0; i < AES_BLOCKSIZE; ++i) {
					dec_key[i]
						= trx_reg_read(RG_AES_KEY);
     d18:	af e3       	ldi	r26, 0x3F	; 63
     d1a:	b1 e0       	ldi	r27, 0x01	; 1
     d1c:	8c 91       	ld	r24, X
     d1e:	81 93       	st	Z+, r24
						AES_DIR_ENCRYPT);
				trx_reg_write(RG_AES_CTRL, mode_byte);
				sal_aes_exec(dummy);

				/* Read last round key. */
				for (i = 0; i < AES_BLOCKSIZE; ++i) {
     d20:	2e 17       	cp	r18, r30
     d22:	3f 07       	cpc	r19, r31
     d24:	d9 f7       	brne	.-10     	; 0xd1c <sal_aes_setup+0xa6>
					dec_key[i]
						= trx_reg_read(RG_AES_KEY);
				}

				dec_initialized = true;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <dec_initialized>
     d2c:	20 c0       	rjmp	.+64     	; 0xd6e <sal_aes_setup+0xf8>
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, dec_key[i]);
     d2e:	81 91       	ld	r24, Z+
     d30:	8c 93       	st	X, r24

				dec_initialized = true;
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
     d32:	2e 17       	cp	r18, r30
     d34:	3f 07       	cpc	r19, r31
     d36:	d9 f7       	brne	.-10     	; 0xd2e <sal_aes_setup+0xb8>

	default:
		return false;
	}

	last_dir = dir;
     d38:	10 93 04 02 	sts	0x0204, r17	; 0x800204 <last_dir>

	/* Set encryption mode. */
	switch (enc_mode) {
     d3c:	02 30       	cpi	r16, 0x02	; 2
     d3e:	a8 f4       	brcc	.+42     	; 0xd6a <sal_aes_setup+0xf4>
	case AES_MODE_ECB:
	case AES_MODE_CBC:
		mode_byte
			= SR_MASK(SR_AES_MODE, enc_mode) | SR_MASK(SR_AES_DIR,
     d40:	f0 e2       	ldi	r31, 0x20	; 32
     d42:	0f 9f       	mul	r16, r31
     d44:	c0 01       	movw	r24, r0
     d46:	11 24       	eor	r1, r1
     d48:	08 2f       	mov	r16, r24
     d4a:	00 72       	andi	r16, 0x20	; 32
     d4c:	11 0f       	add	r17, r17
     d4e:	11 0f       	add	r17, r17
     d50:	11 0f       	add	r17, r17
     d52:	18 70       	andi	r17, 0x08	; 8
     d54:	10 2b       	or	r17, r16
     d56:	10 93 51 02 	sts	0x0251, r17	; 0x800251 <mode_byte>
		return (false);
	}

	/* set mode and direction */

	trx_reg_write(RG_AES_CTRL, mode_byte);
     d5a:	10 93 3c 01 	sts	0x013C, r17	; 0x80013c <__TEXT_REGION_LENGTH__+0x7e013c>

	return (true);
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	0d c0       	rjmp	.+26     	; 0xd7c <sal_aes_setup+0x106>

			break;
		}

	default:
		return false;
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0b c0       	rjmp	.+22     	; 0xd7c <sal_aes_setup+0x106>
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	09 c0       	rjmp	.+18     	; 0xd7c <sal_aes_setup+0x106>
			= SR_MASK(SR_AES_MODE, enc_mode) | SR_MASK(SR_AES_DIR,
				dir);
		break;

	default:
		return (false);
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	07 c0       	rjmp	.+14     	; 0xd7c <sal_aes_setup+0x106>
     d6e:	e1 e3       	ldi	r30, 0x31	; 49
     d70:	f2 e0       	ldi	r31, 0x02	; 2
     d72:	21 e4       	ldi	r18, 0x41	; 65
     d74:	32 e0       	ldi	r19, 0x02	; 2
				dec_initialized = true;
			}

			/* Initialize the key. */
			for (i = 0; i < AES_BLOCKSIZE; ++i) {
				trx_reg_write(RG_AES_KEY, dec_key[i]);
     d76:	af e3       	ldi	r26, 0x3F	; 63
     d78:	b1 e0       	ldi	r27, 0x01	; 1
     d7a:	d9 cf       	rjmp	.-78     	; 0xd2e <sal_aes_setup+0xb8>
	/* set mode and direction */

	trx_reg_write(RG_AES_CTRL, mode_byte);

	return (true);
}
     d7c:	60 96       	adiw	r28, 0x10	; 16
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	08 95       	ret

00000d92 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
     d92:	fc 01       	movw	r30, r24
     d94:	9c 01       	movw	r18, r24
     d96:	20 5f       	subi	r18, 0xF0	; 240
     d98:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
		*data++ = trx_reg_read(RG_AES_STATE);
     d9a:	ae e3       	ldi	r26, 0x3E	; 62
     d9c:	b1 e0       	ldi	r27, 0x01	; 1
     d9e:	8c 91       	ld	r24, X
     da0:	81 93       	st	Z+, r24
 */
void sal_aes_read(uint8_t *data)
{
	uint8_t i;

	for (i = 0; i < AES_BLOCKSIZE; ++i) {
     da2:	e2 17       	cp	r30, r18
     da4:	f3 07       	cpc	r31, r19
     da6:	d9 f7       	brne	.-10     	; 0xd9e <sal_aes_read+0xc>
		*data++ = trx_reg_read(RG_AES_STATE);
	}
}
     da8:	08 95       	ret

00000daa <tc_ovf_callback>:

/*! \brief  hw timer overflow callback
 */
void tc_ovf_callback(void)
{
	tmr_ovf_callback();
     daa:	83 ca       	rjmp	.-2810   	; 0x2b2 <tmr_ovf_callback>
     dac:	08 95       	ret

00000dae <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
void tc_cca_callback(void)
{
	tmr_cca_callback();
     dae:	b8 ca       	rjmp	.-2704   	; 0x320 <tmr_cca_callback>
     db0:	08 95       	ret

00000db2 <tmr_read_count>:
 * @return  count  in the register
 */
static inline uint16_t tc_read_count(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		return TCNT1;
     db2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     db6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
	return tc_read_count(TIMER);
}
     dba:	08 95       	ret

00000dbc <tmr_disable_cc_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
     dbc:	ef e6       	ldi	r30, 0x6F	; 111
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8d 7f       	andi	r24, 0xFD	; 253
     dc4:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_compa_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << OCF1A);
     dc6:	b1 9a       	sbi	0x16, 1	; 22
     dc8:	08 95       	ret

00000dca <tmr_enable_cc_interrupt>:
     dca:	b1 9a       	sbi	0x16, 1	; 22
 * @param tc Timer Address
 */
static inline void tc_enable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << OCIE1A);
     dcc:	ef e6       	ldi	r30, 0x6F	; 111
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	82 60       	ori	r24, 0x02	; 2
     dd4:	80 83       	st	Z, r24
     dd6:	08 95       	ret

00000dd8 <tmr_disable_ovf_interrupt>:
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
     dd8:	ef e6       	ldi	r30, 0x6F	; 111
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	81 60       	ori	r24, 0x01	; 1
     de0:	80 83       	st	Z, r24
 * @param tc Timer Address
 */
static inline void clear_ovf_flag(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIFR1 |= (1 << TOV1);
     de2:	b0 9a       	sbi	0x16, 0	; 22
     de4:	08 95       	ret

00000de6 <tmr_stop>:

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
	tc_disable(TIMER);
     de6:	80 e8       	ldi	r24, 0x80	; 128
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	84 ce       	rjmp	.-760    	; 0xaf4 <tc_disable>
     dec:	08 95       	ret

00000dee <tmr_write_cmpreg>:
 */
static inline void tc_write_cc(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t value)
{
	uint8_t *reg = (uint8_t *)tc;
	*(reg + channel_index + 1) |=  (value >> 8);
     dee:	e9 e8       	ldi	r30, 0x89	; 137
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	20 81       	ld	r18, Z
     df4:	92 2b       	or	r25, r18
     df6:	90 83       	st	Z, r25
	*(reg + channel_index) |=  value;
     df8:	e8 e8       	ldi	r30, 0x88	; 136
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	90 81       	ld	r25, Z
     dfe:	89 2b       	or	r24, r25
     e00:	80 83       	st	Z, r24
     e02:	08 95       	ret

00000e04 <save_cpu_interrupt>:
}

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	1f 92       	push	r1
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e0e:	8f b7       	in	r24, 0x3f	; 63
     e10:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e12:	f8 94       	cli
	return flags;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
	return cpu_irq_save();
}
     e16:	0f 90       	pop	r0
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	08 95       	ret

00000e1e <restore_cpu_interrupt>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e1e:	8f bf       	out	0x3f, r24	; 63
     e20:	08 95       	ret

00000e22 <tmr_init>:
}

/*! \brief  to initialiaze hw timer
 */
uint8_t tmr_init(void)
{
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
	uint8_t timer_multiplier;

	tc_enable(TIMER);
     e26:	80 e8       	ldi	r24, 0x80	; 128
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	fa dd       	rcall	.-1036   	; 0xa20 <tc_enable>

	tc_set_overflow_interrupt_callback(TIMER, tc_ovf_callback);
     e2c:	65 ed       	ldi	r22, 0xD5	; 213
     e2e:	76 e0       	ldi	r23, 0x06	; 6
     e30:	80 e8       	ldi	r24, 0x80	; 128
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	c9 de       	rcall	.-622    	; 0xbc8 <tc_set_overflow_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_enable_ovf_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 |= (1 << TOIE1);
     e36:	cf e6       	ldi	r28, 0x6F	; 111
     e38:	d0 e0       	ldi	r29, 0x00	; 0
     e3a:	88 81       	ld	r24, Y
     e3c:	81 60       	ori	r24, 0x01	; 1
     e3e:	88 83       	st	Y, r24
 */
static void configure_tc_callback(volatile void *timer)
{
	if ((&TCCR1A == timer) || (&TCCR3A == timer) ||
			(&TCCR4A == timer) || (&TCCR5A == timer)) {
		tc_set_compa_interrupt_callback(TIMER, tc_cca_callback);
     e40:	67 ed       	ldi	r22, 0xD7	; 215
     e42:	76 e0       	ldi	r23, 0x06	; 6
     e44:	80 e8       	ldi	r24, 0x80	; 128
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	df de       	rcall	.-578    	; 0xc08 <tc_set_compa_interrupt_callback>
 * @param tc Timer Address
 */
static inline void tc_disable_compa_int(volatile void *tc)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TIMSK1 &= ~(1 << OCIE1A);
     e4a:	88 81       	ld	r24, Y
     e4c:	8d 7f       	andi	r24, 0xFD	; 253
     e4e:	88 83       	st	Y, r24
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	if ((uintptr_t)tc == (uintptr_t)&TCCR1A) {
		TCCR1B |=  TC_CLKSEL_enum;
     e50:	e1 e8       	ldi	r30, 0x81	; 129
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	81 60       	ori	r24, 0x01	; 1
     e58:	80 83       	st	Z, r24
	tc_write_clock_source(TIMER, TC_CLKSEL_DIV1_gc);

	timer_multiplier = sysclk_get_peripheral_bus_hz(TIMER) / DEF_1MHZ;

	return timer_multiplier;
}
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
	SYS_TimerInit();
     e62:	79 d0       	rcall	.+242    	; 0xf56 <SYS_TimerInit>
#if SYS_SECURITY_MODE == 0
	sal_init();
     e64:	f1 de       	rcall	.-542    	; 0xc48 <sal_init>
#endif
	PHY_Init();
     e66:	37 d1       	rcall	.+622    	; 0x10d6 <PHY_Init>
     e68:	30 c2       	rjmp	.+1120   	; 0x12ca <NWK_Init>
	NWK_Init();
     e6a:	08 95       	ret

00000e6c <SYS_TaskHandler>:
     e6c:	b2 d1       	rcall	.+868    	; 0x11d2 <PHY_TaskHandler>
     e6e:	5d d2       	rcall	.+1210   	; 0x132a <NWK_TaskHandler>
*****************************************************************************/
void SYS_TaskHandler(void)
{
	PHY_TaskHandler();
	NWK_TaskHandler();
	SYS_TimerTaskHandler();
     e70:	a5 c0       	rjmp	.+330    	; 0xfbc <SYS_TimerTaskHandler>
     e72:	08 95       	ret

00000e74 <SYS_EncryptReq>:
     e74:	a0 d1       	rcall	.+832    	; 0x11b6 <PHY_EncryptReq>
	text[2] ^= text[0];
	text[3] ^= text[1];
	xtea(&text[2], key);
#endif

	SYS_EncryptConf();
     e76:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <SYS_EncryptConf>
     e7a:	08 95       	ret

00000e7c <placeTimer>:
			break;
		}

		prev = t;
	}
}
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	ec 01       	movw	r28, r24
     e86:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <timers>
     e8a:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <timers+0x1>
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	09 f4       	brne	.+2      	; 0xe94 <placeTimer+0x18>
     e92:	45 c0       	rjmp	.+138    	; 0xf1e <placeTimer+0xa2>
     e94:	4e 81       	ldd	r20, Y+6	; 0x06
     e96:	5f 81       	ldd	r21, Y+7	; 0x07
     e98:	68 85       	ldd	r22, Y+8	; 0x08
     e9a:	79 85       	ldd	r23, Y+9	; 0x09
     e9c:	fc 01       	movw	r30, r24
     e9e:	02 81       	ldd	r16, Z+2	; 0x02
     ea0:	13 81       	ldd	r17, Z+3	; 0x03
     ea2:	24 81       	ldd	r18, Z+4	; 0x04
     ea4:	35 81       	ldd	r19, Z+5	; 0x05
     ea6:	40 17       	cp	r20, r16
     ea8:	51 07       	cpc	r21, r17
     eaa:	62 07       	cpc	r22, r18
     eac:	73 07       	cpc	r23, r19
     eae:	60 f0       	brcs	.+24     	; 0xec8 <placeTimer+0x4c>
     eb0:	dc 01       	movw	r26, r24
     eb2:	17 c0       	rjmp	.+46     	; 0xee2 <placeTimer+0x66>
     eb4:	02 81       	ldd	r16, Z+2	; 0x02
     eb6:	13 81       	ldd	r17, Z+3	; 0x03
     eb8:	24 81       	ldd	r18, Z+4	; 0x04
     eba:	35 81       	ldd	r19, Z+5	; 0x05
     ebc:	40 17       	cp	r20, r16
     ebe:	51 07       	cpc	r21, r17
     ec0:	62 07       	cpc	r22, r18
     ec2:	73 07       	cpc	r23, r19
     ec4:	68 f4       	brcc	.+26     	; 0xee0 <placeTimer+0x64>
     ec6:	03 c0       	rjmp	.+6      	; 0xece <placeTimer+0x52>
     ec8:	fc 01       	movw	r30, r24
     eca:	a0 e0       	ldi	r26, 0x00	; 0
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	04 1b       	sub	r16, r20
     ed0:	15 0b       	sbc	r17, r21
     ed2:	26 0b       	sbc	r18, r22
     ed4:	37 0b       	sbc	r19, r23
     ed6:	02 83       	std	Z+2, r16	; 0x02
     ed8:	13 83       	std	Z+3, r17	; 0x03
     eda:	24 83       	std	Z+4, r18	; 0x04
     edc:	35 83       	std	Z+5, r19	; 0x05
     ede:	0a c0       	rjmp	.+20     	; 0xef4 <placeTimer+0x78>
     ee0:	df 01       	movw	r26, r30
     ee2:	40 1b       	sub	r20, r16
     ee4:	51 0b       	sbc	r21, r17
     ee6:	62 0b       	sbc	r22, r18
     ee8:	73 0b       	sbc	r23, r19
     eea:	ed 91       	ld	r30, X+
     eec:	fc 91       	ld	r31, X
     eee:	11 97       	sbiw	r26, 0x01	; 1
     ef0:	30 97       	sbiw	r30, 0x00	; 0
     ef2:	01 f7       	brne	.-64     	; 0xeb4 <placeTimer+0x38>
     ef4:	4a 83       	std	Y+2, r20	; 0x02
     ef6:	5b 83       	std	Y+3, r21	; 0x03
     ef8:	6c 83       	std	Y+4, r22	; 0x04
     efa:	7d 83       	std	Y+5, r23	; 0x05
     efc:	10 97       	sbiw	r26, 0x00	; 0
     efe:	41 f0       	breq	.+16     	; 0xf10 <placeTimer+0x94>
     f00:	8d 91       	ld	r24, X+
     f02:	9c 91       	ld	r25, X
     f04:	11 97       	sbiw	r26, 0x01	; 1
     f06:	99 83       	std	Y+1, r25	; 0x01
     f08:	88 83       	st	Y, r24
     f0a:	cd 93       	st	X+, r28
     f0c:	dc 93       	st	X, r29
     f0e:	15 c0       	rjmp	.+42     	; 0xf3a <placeTimer+0xbe>
     f10:	99 83       	std	Y+1, r25	; 0x01
     f12:	88 83       	st	Y, r24
     f14:	d0 93 54 02 	sts	0x0254, r29	; 0x800254 <timers+0x1>
     f18:	c0 93 53 02 	sts	0x0253, r28	; 0x800253 <timers>
     f1c:	0e c0       	rjmp	.+28     	; 0xf3a <placeTimer+0xbe>
     f1e:	19 82       	std	Y+1, r1	; 0x01
     f20:	18 82       	st	Y, r1
     f22:	8e 81       	ldd	r24, Y+6	; 0x06
     f24:	9f 81       	ldd	r25, Y+7	; 0x07
     f26:	a8 85       	ldd	r26, Y+8	; 0x08
     f28:	b9 85       	ldd	r27, Y+9	; 0x09
     f2a:	8a 83       	std	Y+2, r24	; 0x02
     f2c:	9b 83       	std	Y+3, r25	; 0x03
     f2e:	ac 83       	std	Y+4, r26	; 0x04
     f30:	bd 83       	std	Y+5, r27	; 0x05
     f32:	d0 93 54 02 	sts	0x0254, r29	; 0x800254 <timers+0x1>
     f36:	c0 93 53 02 	sts	0x0253, r28	; 0x800253 <timers>
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	08 95       	ret

00000f44 <SYS_HwExpiry_Cb>:
     f44:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <SysTimerIrqCount>
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	80 93 6d 0c 	sts	0x0C6D, r24	; 0x800c6d <SysTimerIrqCount>
     f4e:	80 e1       	ldi	r24, 0x10	; 16
     f50:	97 e2       	ldi	r25, 0x27	; 39
     f52:	43 c9       	rjmp	.-3450   	; 0x1da <common_tc_delay>
     f54:	08 95       	ret

00000f56 <SYS_TimerInit>:
     f56:	10 92 6d 0c 	sts	0x0C6D, r1	; 0x800c6d <SysTimerIrqCount>
     f5a:	82 ea       	ldi	r24, 0xA2	; 162
     f5c:	97 e0       	ldi	r25, 0x07	; 7
     f5e:	ee d9       	rcall	.-3108   	; 0x33c <set_common_tc_expiry_callback>
     f60:	a2 d9       	rcall	.-3260   	; 0x2a6 <common_tc_init>
     f62:	80 e1       	ldi	r24, 0x10	; 16
     f64:	97 e2       	ldi	r25, 0x27	; 39
     f66:	39 d9       	rcall	.-3470   	; 0x1da <common_tc_delay>
     f68:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <timers+0x1>
     f6c:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <timers>
     f70:	08 95       	ret

00000f72 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
     f72:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <timers>
     f76:	f0 91 54 02 	lds	r31, 0x0254	; 0x800254 <timers+0x1>
     f7a:	30 97       	sbiw	r30, 0x00	; 0
     f7c:	71 f0       	breq	.+28     	; 0xf9a <SYS_TimerStarted+0x28>
		if (t == timer) {
     f7e:	e8 17       	cp	r30, r24
     f80:	f9 07       	cpc	r31, r25
     f82:	21 f4       	brne	.+8      	; 0xf8c <SYS_TimerStarted+0x1a>
     f84:	0c c0       	rjmp	.+24     	; 0xf9e <SYS_TimerStarted+0x2c>
     f86:	8e 17       	cp	r24, r30
     f88:	9f 07       	cpc	r25, r31
     f8a:	59 f0       	breq	.+22     	; 0xfa2 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
     f8c:	01 90       	ld	r0, Z+
     f8e:	f0 81       	ld	r31, Z
     f90:	e0 2d       	mov	r30, r0
     f92:	30 97       	sbiw	r30, 0x00	; 0
     f94:	c1 f7       	brne	.-16     	; 0xf86 <SYS_TimerStarted+0x14>
		if (t == timer) {
			return true;
		}
	}
	return false;
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	08 95       	ret
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
	for (SYS_Timer_t *t = timers; t; t = t->next) {
		if (t == timer) {
			return true;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	08 95       	ret
     fa2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return false;
}
     fa4:	08 95       	ret

00000fa6 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	ec 01       	movw	r28, r24
	if (!SYS_TimerStarted(timer)) {
     fac:	e2 df       	rcall	.-60     	; 0xf72 <SYS_TimerStarted>
     fae:	81 11       	cpse	r24, r1
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <SYS_TimerStart+0x10>
		placeTimer(timer);
     fb2:	ce 01       	movw	r24, r28
     fb4:	63 df       	rcall	.-314    	; 0xe7c <placeTimer>
	}
}
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	08 95       	ret

00000fbc <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	1f 92       	push	r1
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
	uint32_t elapsed;
	uint8_t cnt;
	irqflags_t flags;

	if (0 == SysTimerIrqCount) {
     fd2:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <SysTimerIrqCount>
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <SYS_TimerTaskHandler+0x20>
     fda:	53 c0       	rjmp	.+166    	; 0x1082 <SYS_TimerTaskHandler+0xc6>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fdc:	8f b7       	in	r24, 0x3f	; 63
     fde:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     fe0:	f8 94       	cli
	return flags;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
		return;
	}

	/* Enter a critical section */
	flags = cpu_irq_save();
	cnt = SysTimerIrqCount;
     fe4:	c0 90 6d 0c 	lds	r12, 0x0C6D	; 0x800c6d <SysTimerIrqCount>
	SysTimerIrqCount = 0;
     fe8:	10 92 6d 0c 	sts	0x0C6D, r1	; 0x800c6d <SysTimerIrqCount>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fec:	8f bf       	out	0x3f, r24	; 63
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;
     fee:	d1 2c       	mov	r13, r1
     ff0:	e1 2c       	mov	r14, r1
     ff2:	f1 2c       	mov	r15, r1
     ff4:	cc 0c       	add	r12, r12
     ff6:	dd 1c       	adc	r13, r13
     ff8:	ee 1c       	adc	r14, r14
     ffa:	ff 1c       	adc	r15, r15
     ffc:	d7 01       	movw	r26, r14
     ffe:	c6 01       	movw	r24, r12
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	aa 1f       	adc	r26, r26
    1006:	bb 1f       	adc	r27, r27
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	aa 1f       	adc	r26, r26
    100e:	bb 1f       	adc	r27, r27
    1010:	c8 0e       	add	r12, r24
    1012:	d9 1e       	adc	r13, r25
    1014:	ea 1e       	adc	r14, r26
    1016:	fb 1e       	adc	r15, r27

	while (timers && (timers->timeout <= elapsed)) {
    1018:	1b c0       	rjmp	.+54     	; 0x1050 <SYS_TimerTaskHandler+0x94>
		SYS_Timer_t *timer = timers;

		elapsed -= timers->timeout;
    101a:	c8 1a       	sub	r12, r24
    101c:	d9 0a       	sbc	r13, r25
    101e:	ea 0a       	sbc	r14, r26
    1020:	fb 0a       	sbc	r15, r27
		timers = timers->next;
    1022:	d8 01       	movw	r26, r16
    1024:	8d 91       	ld	r24, X+
    1026:	9c 91       	ld	r25, X
    1028:	11 97       	sbiw	r26, 0x01	; 1
    102a:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <timers+0x1>
    102e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <timers>
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    1032:	1a 96       	adiw	r26, 0x0a	; 10
    1034:	8c 91       	ld	r24, X
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	11 f4       	brne	.+4      	; 0x103e <SYS_TimerTaskHandler+0x82>
			placeTimer(timer);
    103a:	c8 01       	movw	r24, r16
    103c:	1f df       	rcall	.-450    	; 0xe7c <placeTimer>
		}

		if (timer->handler) {
    103e:	d8 01       	movw	r26, r16
    1040:	1b 96       	adiw	r26, 0x0b	; 11
    1042:	ed 91       	ld	r30, X+
    1044:	fc 91       	ld	r31, X
    1046:	1c 97       	sbiw	r26, 0x0c	; 12
    1048:	30 97       	sbiw	r30, 0x00	; 0
    104a:	11 f0       	breq	.+4      	; 0x1050 <SYS_TimerTaskHandler+0x94>
			timer->handler(timer);
    104c:	c8 01       	movw	r24, r16
    104e:	09 95       	icall
	/* Leave the critical section */
	cpu_irq_restore(flags);

	elapsed = cnt * SYS_TIMER_INTERVAL;

	while (timers && (timers->timeout <= elapsed)) {
    1050:	00 91 53 02 	lds	r16, 0x0253	; 0x800253 <timers>
    1054:	10 91 54 02 	lds	r17, 0x0254	; 0x800254 <timers+0x1>
    1058:	01 15       	cp	r16, r1
    105a:	11 05       	cpc	r17, r1
    105c:	91 f0       	breq	.+36     	; 0x1082 <SYS_TimerTaskHandler+0xc6>
    105e:	f8 01       	movw	r30, r16
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	a4 81       	ldd	r26, Z+4	; 0x04
    1066:	b5 81       	ldd	r27, Z+5	; 0x05
    1068:	c8 16       	cp	r12, r24
    106a:	d9 06       	cpc	r13, r25
    106c:	ea 06       	cpc	r14, r26
    106e:	fb 06       	cpc	r15, r27
    1070:	a0 f6       	brcc	.-88     	; 0x101a <SYS_TimerTaskHandler+0x5e>
			timer->handler(timer);
		}
	}

	if (timers) {
		timers->timeout -= elapsed;
    1072:	8c 19       	sub	r24, r12
    1074:	9d 09       	sbc	r25, r13
    1076:	ae 09       	sbc	r26, r14
    1078:	bf 09       	sbc	r27, r15
    107a:	82 83       	std	Z+2, r24	; 0x02
    107c:	93 83       	std	Z+3, r25	; 0x03
    107e:	a4 83       	std	Z+4, r26	; 0x04
    1080:	b5 83       	std	Z+5, r27	; 0x05
	}
}
    1082:	0f 90       	pop	r0
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	08 95       	ret

00001096 <phyTrxSetState>:
	IEEE_ADDR_2_REG = *ptr_to_reg++;
	IEEE_ADDR_3_REG = *ptr_to_reg++;
	IEEE_ADDR_4_REG = *ptr_to_reg++;
	IEEE_ADDR_5_REG = *ptr_to_reg++;
	IEEE_ADDR_6_REG = *ptr_to_reg++;
	IEEE_ADDR_7_REG = *ptr_to_reg;
    1096:	a2 e4       	ldi	r26, 0x42	; 66
    1098:	b1 e0       	ldi	r27, 0x01	; 1
    109a:	23 e0       	ldi	r18, 0x03	; 3
    109c:	e1 e4       	ldi	r30, 0x41	; 65
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	2c 93       	st	X, r18
    10a2:	90 81       	ld	r25, Z
    10a4:	9f 71       	andi	r25, 0x1F	; 31
    10a6:	98 30       	cpi	r25, 0x08	; 8
    10a8:	d9 f7       	brne	.-10     	; 0x10a0 <phyTrxSetState+0xa>
    10aa:	a2 e4       	ldi	r26, 0x42	; 66
    10ac:	b1 e0       	ldi	r27, 0x01	; 1
    10ae:	e1 e4       	ldi	r30, 0x41	; 65
    10b0:	f1 e0       	ldi	r31, 0x01	; 1
    10b2:	8c 93       	st	X, r24
    10b4:	90 81       	ld	r25, Z
    10b6:	9f 71       	andi	r25, 0x1F	; 31
    10b8:	89 13       	cpse	r24, r25
    10ba:	fb cf       	rjmp	.-10     	; 0x10b2 <phyTrxSetState+0x1c>
    10bc:	08 95       	ret

000010be <phySetRxState>:
    10be:	88 e0       	ldi	r24, 0x08	; 8
    10c0:	ea df       	rcall	.-44     	; 0x1096 <phyTrxSetState>
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7e014f>
    10c8:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <phyRxState>
    10cc:	88 23       	and	r24, r24
    10ce:	11 f0       	breq	.+4      	; 0x10d4 <phySetRxState+0x16>
    10d0:	86 e1       	ldi	r24, 0x16	; 22
    10d2:	e1 cf       	rjmp	.-62     	; 0x1096 <phyTrxSetState>
    10d4:	08 95       	ret

000010d6 <PHY_Init>:
    10d6:	60 e4       	ldi	r22, 0x40	; 64
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	a3 d9       	rcall	.-3258   	; 0x422 <sysclk_enable_module>
    10dc:	e9 e3       	ldi	r30, 0x39	; 57
    10de:	f1 e0       	ldi	r31, 0x01	; 1
    10e0:	80 81       	ld	r24, Z
    10e2:	81 60       	ori	r24, 0x01	; 1
    10e4:	80 83       	st	Z, r24
    10e6:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <phyRxState>
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <phyState>
    10f0:	88 e0       	ldi	r24, 0x08	; 8
    10f2:	d1 df       	rcall	.-94     	; 0x1096 <phyTrxSetState>
    10f4:	ec e4       	ldi	r30, 0x4C	; 76
    10f6:	f1 e0       	ldi	r31, 0x01	; 1
    10f8:	80 81       	ld	r24, Z
    10fa:	80 68       	ori	r24, 0x80	; 128
    10fc:	80 83       	st	Z, r24
    10fe:	08 95       	ret

00001100 <PHY_SetRxState>:
    1100:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <phyRxState>
    1104:	dc cf       	rjmp	.-72     	; 0x10be <phySetRxState>
    1106:	08 95       	ret

00001108 <PHY_SetChannel>:
    1108:	8f 71       	andi	r24, 0x1F	; 31
    110a:	e8 e4       	ldi	r30, 0x48	; 72
    110c:	f1 e0       	ldi	r31, 0x01	; 1
    110e:	90 81       	ld	r25, Z
    1110:	90 7e       	andi	r25, 0xE0	; 224
    1112:	89 2b       	or	r24, r25
    1114:	80 83       	st	Z, r24
    1116:	08 95       	ret

00001118 <PHY_SetPanId>:
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	00 d0       	rcall	.+0      	; 0x111e <PHY_SetPanId+0x6>
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	9a 83       	std	Y+2, r25	; 0x02
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7e0162>
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x7e0163>
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	08 95       	ret

0000113a <PHY_SetShortAddr>:
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	00 d0       	rcall	.+0      	; 0x1140 <PHY_SetShortAddr+0x6>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7e0160>
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x7e0161>
    1152:	99 81       	ldd	r25, Y+1	; 0x01
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	89 0f       	add	r24, r25
    1158:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x7e016d>
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	08 95       	ret

00001166 <PHY_DataReq>:
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	ec 01       	movw	r28, r24
    116c:	89 e1       	ldi	r24, 0x19	; 25
    116e:	93 df       	rcall	.-218    	; 0x1096 <phyTrxSetState>
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x7e014f>
    1176:	88 81       	ld	r24, Y
    1178:	8e 5f       	subi	r24, 0xFE	; 254
    117a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7e0180>
    117e:	88 81       	ld	r24, Y
    1180:	88 23       	and	r24, r24
    1182:	81 f0       	breq	.+32     	; 0x11a4 <PHY_DataReq+0x3e>
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	82 2f       	mov	r24, r18
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	fc 01       	movw	r30, r24
    118c:	ef 57       	subi	r30, 0x7F	; 127
    118e:	fe 4f       	sbci	r31, 0xFE	; 254
    1190:	de 01       	movw	r26, r28
    1192:	a8 0f       	add	r26, r24
    1194:	b9 1f       	adc	r27, r25
    1196:	11 96       	adiw	r26, 0x01	; 1
    1198:	8c 91       	ld	r24, X
    119a:	80 83       	st	Z, r24
    119c:	2f 5f       	subi	r18, 0xFF	; 255
    119e:	88 81       	ld	r24, Y
    11a0:	28 17       	cp	r18, r24
    11a2:	88 f3       	brcs	.-30     	; 0x1186 <PHY_DataReq+0x20>
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <phyState>
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <PHY_EncryptReq>:
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	ec 01       	movw	r28, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	59 dd       	rcall	.-1358   	; 0xc76 <sal_aes_setup>
    11c4:	ce 01       	movw	r24, r28
    11c6:	41 dd       	rcall	.-1406   	; 0xc4a <sal_aes_exec>
    11c8:	ce 01       	movw	r24, r28
    11ca:	e3 dd       	rcall	.-1082   	; 0xd92 <sal_aes_read>
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	00 d0       	rcall	.+0      	; 0x11da <PHY_TaskHandler+0x8>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <PHY_TaskHandler+0xa>
    11dc:	1f 92       	push	r1
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	if (PHY_STATE_SLEEP == phyState) {
    11e2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <phyState>
    11e6:	82 30       	cpi	r24, 0x02	; 2
    11e8:	09 f4       	brne	.+2      	; 0x11ec <PHY_TaskHandler+0x1a>
    11ea:	66 c0       	rjmp	.+204    	; 0x12b8 <PHY_TaskHandler+0xe6>
		return;
	}

	if (IRQ_STATUS_REG_s.rxEnd) {
    11ec:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7e014f>
    11f0:	83 ff       	sbrs	r24, 3
    11f2:	3e c0       	rjmp	.+124    	; 0x1270 <PHY_TaskHandler+0x9e>
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;
    11f4:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    11f8:	6a 2f       	mov	r22, r26
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	ab 01       	movw	r20, r22
    11fe:	4f 5f       	subi	r20, 0xFF	; 255
    1200:	5f 4f       	sbci	r21, 0xFF	; 255
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	20 e0       	ldi	r18, 0x00	; 0
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1208:	fc 01       	movw	r30, r24
    120a:	e0 58       	subi	r30, 0x80	; 128
    120c:	fe 4f       	sbci	r31, 0xFE	; 254
    120e:	30 81       	ld	r19, Z
    1210:	fc 01       	movw	r30, r24
    1212:	ea 5a       	subi	r30, 0xAA	; 170
    1214:	fd 4f       	sbci	r31, 0xFD	; 253
    1216:	30 83       	st	Z, r19

	if (IRQ_STATUS_REG_s.rxEnd) {
		PHY_DataInd_t ind;
		uint8_t size = TST_RX_LENGTH_REG;

		for (uint8_t i = 0; i < size + 1 /*lqi*/; i++) {
    1218:	2f 5f       	subi	r18, 0xFF	; 255
    121a:	82 2f       	mov	r24, r18
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	84 17       	cp	r24, r20
    1220:	95 07       	cpc	r25, r21
    1222:	94 f3       	brlt	.-28     	; 0x1208 <PHY_TaskHandler+0x36>
			phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
		}

		ind.data = phyRxBuffer;
    1224:	86 e5       	ldi	r24, 0x56	; 86
    1226:	92 e0       	ldi	r25, 0x02	; 2
    1228:	9a 83       	std	Y+2, r25	; 0x02
    122a:	89 83       	std	Y+1, r24	; 0x01
		ind.size = size - PHY_CRC_SIZE;
    122c:	a2 50       	subi	r26, 0x02	; 2
    122e:	ab 83       	std	Y+3, r26	; 0x03
		ind.lqi  = phyRxBuffer[size];
    1230:	fb 01       	movw	r30, r22
    1232:	ea 5a       	subi	r30, 0xAA	; 170
    1234:	fd 4f       	sbci	r31, 0xFD	; 253
    1236:	80 81       	ld	r24, Z
    1238:	8c 83       	std	Y+4, r24	; 0x04
		ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    123a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x7e0147>
    123e:	8a 55       	subi	r24, 0x5A	; 90
    1240:	8d 83       	std	Y+5, r24	; 0x05
		PHY_DataInd(&ind);
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	5b d6       	rcall	.+3254   	; 0x1efe <PHY_DataInd>

		while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus) {
    1248:	e1 e4       	ldi	r30, 0x41	; 65
    124a:	f1 e0       	ldi	r31, 0x01	; 1
    124c:	80 81       	ld	r24, Z
    124e:	8f 71       	andi	r24, 0x1F	; 31
    1250:	86 31       	cpi	r24, 0x16	; 22
    1252:	e1 f7       	brne	.-8      	; 0x124c <PHY_TaskHandler+0x7a>
		}

		IRQ_STATUS_REG_s.rxEnd = 1;
    1254:	ef e4       	ldi	r30, 0x4F	; 79
    1256:	f1 e0       	ldi	r31, 0x01	; 1
    1258:	80 81       	ld	r24, Z
    125a:	88 60       	ori	r24, 0x08	; 8
    125c:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 0;
    125e:	ec e4       	ldi	r30, 0x4C	; 76
    1260:	f1 e0       	ldi	r31, 0x01	; 1
    1262:	80 81       	ld	r24, Z
    1264:	8f 77       	andi	r24, 0x7F	; 127
    1266:	80 83       	st	Z, r24
		TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1268:	80 81       	ld	r24, Z
    126a:	80 68       	ori	r24, 0x80	; 128
    126c:	80 83       	st	Z, r24
    126e:	24 c0       	rjmp	.+72     	; 0x12b8 <PHY_TaskHandler+0xe6>
	} else if (IRQ_STATUS_REG_s.txEnd) {
    1270:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x7e014f>
    1274:	86 ff       	sbrs	r24, 6
    1276:	20 c0       	rjmp	.+64     	; 0x12b8 <PHY_TaskHandler+0xe6>
		if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus) {
    1278:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    127c:	8f 71       	andi	r24, 0x1F	; 31
    127e:	89 31       	cpi	r24, 0x19	; 25
    1280:	b1 f4       	brne	.+44     	; 0x12ae <PHY_TaskHandler+0xdc>
			uint8_t status = TRX_STATE_REG_s.tracStatus;
    1282:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    1286:	12 95       	swap	r17
    1288:	16 95       	lsr	r17
    128a:	17 70       	andi	r17, 0x07	; 7

			if (TRAC_STATUS_SUCCESS == status) {
    128c:	49 f0       	breq	.+18     	; 0x12a0 <PHY_TaskHandler+0xce>
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
    128e:	13 30       	cpi	r17, 0x03	; 3
    1290:	21 f0       	breq	.+8      	; 0x129a <PHY_TaskHandler+0xc8>
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
			} else if (TRAC_STATUS_NO_ACK == status) {
    1292:	15 30       	cpi	r17, 0x05	; 5
    1294:	21 f0       	breq	.+8      	; 0x129e <PHY_TaskHandler+0xcc>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
    1296:	13 e0       	ldi	r17, 0x03	; 3
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <PHY_TaskHandler+0xce>

			if (TRAC_STATUS_SUCCESS == status) {
				status = PHY_STATUS_SUCCESS;
			} else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE ==
					status) {
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    129a:	11 e0       	ldi	r17, 0x01	; 1
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <PHY_TaskHandler+0xce>
				status = PHY_STATUS_NO_ACK;
			} else {
				status = PHY_STATUS_ERROR;
			}

			phySetRxState();
    129e:	12 e0       	ldi	r17, 0x02	; 2
    12a0:	0e df       	rcall	.-484    	; 0x10be <phySetRxState>
			phyState = PHY_STATE_IDLE;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <phyState>

			PHY_DataConf(status);
    12a8:	81 2f       	mov	r24, r17
    12aa:	0e 94 9b 14 	call	0x2936	; 0x2936 <PHY_DataConf>
		}

		IRQ_STATUS_REG_s.txEnd = 1;
    12ae:	ef e4       	ldi	r30, 0x4F	; 79
    12b0:	f1 e0       	ldi	r31, 0x01	; 1
    12b2:	80 81       	ld	r24, Z
    12b4:	80 64       	ori	r24, 0x40	; 64
    12b6:	80 83       	st	Z, r24
	}
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	08 95       	ret

000012ca <NWK_Init>:

		cl += 25;
	}

	return 255;
}
    12ca:	ee e6       	ldi	r30, 0x6E	; 110
    12cc:	fc e0       	ldi	r31, 0x0C	; 12
    12ce:	14 82       	std	Z+4, r1	; 0x04
    12d0:	15 82       	std	Z+5, r1	; 0x05
    12d2:	11 82       	std	Z+1, r1	; 0x01
    12d4:	10 82       	st	Z, r1
    12d6:	17 aa       	std	Z+55, r1	; 0x37
    12d8:	16 aa       	std	Z+54, r1	; 0x36
    12da:	e4 e7       	ldi	r30, 0x74	; 116
    12dc:	fc e0       	ldi	r31, 0x0C	; 12
    12de:	84 e9       	ldi	r24, 0x94	; 148
    12e0:	9c e0       	ldi	r25, 0x0C	; 12
    12e2:	11 92       	st	Z+, r1
    12e4:	11 92       	st	Z+, r1
    12e6:	e8 17       	cp	r30, r24
    12e8:	f9 07       	cpc	r31, r25
    12ea:	d9 f7       	brne	.-10     	; 0x12e2 <NWK_Init+0x18>
    12ec:	0e 94 af 13 	call	0x275e	; 0x275e <nwkTxInit>
    12f0:	e9 d5       	rcall	.+3026   	; 0x1ec4 <nwkRxInit>
    12f2:	1a d1       	rcall	.+564    	; 0x1528 <nwkFrameInit>
    12f4:	44 d0       	rcall	.+136    	; 0x137e <nwkDataReqInit>
    12f6:	9d d1       	rcall	.+826    	; 0x1632 <nwkRouteInit>
    12f8:	0e 94 05 12 	call	0x240a	; 0x240a <nwkSecurityInit>
    12fc:	69 c4       	rjmp	.+2258   	; 0x1bd0 <nwkRouteDiscoveryInit>
    12fe:	08 95       	ret

00001300 <NWK_SetAddr>:
    1300:	90 93 6f 0c 	sts	0x0C6F, r25	; 0x800c6f <nwkIb+0x1>
    1304:	80 93 6e 0c 	sts	0x0C6E, r24	; 0x800c6e <nwkIb>
    1308:	18 cf       	rjmp	.-464    	; 0x113a <PHY_SetShortAddr>
    130a:	08 95       	ret

0000130c <NWK_SetPanId>:
    130c:	90 93 71 0c 	sts	0x0C71, r25	; 0x800c71 <nwkIb+0x3>
    1310:	80 93 70 0c 	sts	0x0C70, r24	; 0x800c70 <nwkIb+0x2>
    1314:	01 cf       	rjmp	.-510    	; 0x1118 <PHY_SetPanId>
    1316:	08 95       	ret

00001318 <NWK_OpenEndpoint>:
    1318:	e8 2f       	mov	r30, r24
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	ec 58       	subi	r30, 0x8C	; 140
    1322:	f3 4f       	sbci	r31, 0xF3	; 243
    1324:	71 83       	std	Z+1, r23	; 0x01
    1326:	60 83       	st	Z, r22
    1328:	08 95       	ret

0000132a <NWK_TaskHandler>:
/*************************************************************************//**
*  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
	nwkRxTaskHandler();
    132a:	1d d6       	rcall	.+3130   	; 0x1f66 <nwkRxTaskHandler>
	nwkTxTaskHandler();
    132c:	0e 94 be 14 	call	0x297c	; 0x297c <nwkTxTaskHandler>
	nwkDataReqTaskHandler();
    1330:	4f d0       	rcall	.+158    	; 0x13d0 <nwkDataReqTaskHandler>
#ifdef NWK_ENABLE_SECURITY
	nwkSecurityTaskHandler();
    1332:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <nwkSecurityTaskHandler>
    1336:	08 95       	ret

00001338 <nwkDataReqTxConf>:
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1338:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <nwkDataReqQueue>
    133c:	f0 91 d8 02 	lds	r31, 0x02D8	; 0x8002d8 <nwkDataReqQueue+0x1>
    1340:	30 97       	sbiw	r30, 0x00	; 0
    1342:	d9 f0       	breq	.+54     	; 0x137a <nwkDataReqTxConf+0x42>
		if (req->frame == frame) {
    1344:	22 81       	ldd	r18, Z+2	; 0x02
    1346:	33 81       	ldd	r19, Z+3	; 0x03
    1348:	82 17       	cp	r24, r18
    134a:	93 07       	cpc	r25, r19
    134c:	89 f4       	brne	.+34     	; 0x1370 <nwkDataReqTxConf+0x38>
    134e:	05 c0       	rjmp	.+10     	; 0x135a <nwkDataReqTxConf+0x22>
    1350:	22 81       	ldd	r18, Z+2	; 0x02
    1352:	33 81       	ldd	r19, Z+3	; 0x03
    1354:	28 17       	cp	r18, r24
    1356:	39 07       	cpc	r19, r25
    1358:	59 f4       	brne	.+22     	; 0x1370 <nwkDataReqTxConf+0x38>
			req->status = frame->tx.status;
    135a:	dc 01       	movw	r26, r24
    135c:	ad 57       	subi	r26, 0x7D	; 125
    135e:	bf 4f       	sbci	r27, 0xFF	; 255
    1360:	2c 91       	ld	r18, X
    1362:	27 87       	std	Z+15, r18	; 0x0f
			req->control = frame->tx.control;
    1364:	13 96       	adiw	r26, 0x03	; 3
    1366:	2c 91       	ld	r18, X
    1368:	20 8b       	std	Z+16, r18	; 0x10
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
    136a:	22 e0       	ldi	r18, 0x02	; 2
    136c:	24 83       	std	Z+4, r18	; 0x04
			break;
    136e:	05 c0       	rjmp	.+10     	; 0x137a <nwkDataReqTxConf+0x42>
*  @brief Frame transmission confirmation handler
*  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1370:	01 90       	ld	r0, Z+
    1372:	f0 81       	ld	r31, Z
    1374:	e0 2d       	mov	r30, r0
    1376:	30 97       	sbiw	r30, 0x00	; 0
    1378:	59 f7       	brne	.-42     	; 0x1350 <nwkDataReqTxConf+0x18>
			req->state = NWK_DATA_REQ_STATE_CONFIRM;
			break;
		}
	}

	nwkFrameFree(frame);
    137a:	18 c1       	rjmp	.+560    	; 0x15ac <nwkFrameFree>
    137c:	08 95       	ret

0000137e <nwkDataReqInit>:
/*************************************************************************//**
*  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
	nwkDataReqQueue = NULL;
    137e:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <nwkDataReqQueue+0x1>
    1382:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <nwkDataReqQueue>
    1386:	08 95       	ret

00001388 <NWK_DataReq>:
/*************************************************************************//**
*  @brief Adds request @a req to the queue of outgoing requests
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    1388:	fc 01       	movw	r30, r24
	req->state = NWK_DATA_REQ_STATE_INITIAL;
    138a:	14 82       	std	Z+4, r1	; 0x04
	req->status = NWK_SUCCESS_STATUS;
    138c:	17 86       	std	Z+15, r1	; 0x0f
	req->frame = NULL;
    138e:	13 82       	std	Z+3, r1	; 0x03
    1390:	12 82       	std	Z+2, r1	; 0x02

	nwkIb.lock++;
    1392:	ae e6       	ldi	r26, 0x6E	; 110
    1394:	bc e0       	ldi	r27, 0x0C	; 12
    1396:	d6 96       	adiw	r26, 0x36	; 54
    1398:	8d 91       	ld	r24, X+
    139a:	9c 91       	ld	r25, X
    139c:	d7 97       	sbiw	r26, 0x37	; 55
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	d7 96       	adiw	r26, 0x37	; 55
    13a2:	9c 93       	st	X, r25
    13a4:	8e 93       	st	-X, r24
    13a6:	d6 97       	sbiw	r26, 0x36	; 54

	if (NULL == nwkDataReqQueue) {
    13a8:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <nwkDataReqQueue>
    13ac:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <nwkDataReqQueue+0x1>
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	39 f4       	brne	.+14     	; 0x13c2 <NWK_DataReq+0x3a>
		req->next = NULL;
    13b4:	11 82       	std	Z+1, r1	; 0x01
    13b6:	10 82       	st	Z, r1
		nwkDataReqQueue = req;
    13b8:	f0 93 d8 02 	sts	0x02D8, r31	; 0x8002d8 <nwkDataReqQueue+0x1>
    13bc:	e0 93 d7 02 	sts	0x02D7, r30	; 0x8002d7 <nwkDataReqQueue>
    13c0:	08 95       	ret
	} else {
		req->next = nwkDataReqQueue;
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
		nwkDataReqQueue = req;
    13c6:	f0 93 d8 02 	sts	0x02D8, r31	; 0x8002d8 <nwkDataReqQueue+0x1>
    13ca:	e0 93 d7 02 	sts	0x02D7, r30	; 0x8002d7 <nwkDataReqQueue>
    13ce:	08 95       	ret

000013d0 <nwkDataReqTaskHandler>:

/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    13d8:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <nwkDataReqQueue>
    13dc:	f0 91 d8 02 	lds	r31, 0x02D8	; 0x8002d8 <nwkDataReqQueue+0x1>
    13e0:	30 97       	sbiw	r30, 0x00	; 0
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <nwkDataReqTaskHandler+0x16>
    13e4:	9c c0       	rjmp	.+312    	; 0x151e <nwkDataReqTaskHandler+0x14e>
    13e6:	ef 01       	movw	r28, r30
		switch (req->state) {
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	88 23       	and	r24, r24
    13ec:	21 f0       	breq	.+8      	; 0x13f6 <nwkDataReqTaskHandler+0x26>
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <nwkDataReqTaskHandler+0x24>
    13f2:	6f c0       	rjmp	.+222    	; 0x14d2 <nwkDataReqTaskHandler+0x102>
    13f4:	8e c0       	rjmp	.+284    	; 0x1512 <nwkDataReqTaskHandler+0x142>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
	NwkFrame_t *frame;

	if (NULL == (frame = nwkFrameAlloc())) {
    13f6:	a3 d0       	rcall	.+326    	; 0x153e <nwkFrameAlloc>
    13f8:	8c 01       	movw	r16, r24
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	21 f4       	brne	.+8      	; 0x1406 <nwkDataReqTaskHandler+0x36>
		req->state = NWK_DATA_REQ_STATE_CONFIRM;
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	8c 83       	std	Y+4, r24	; 0x04
		req->status = NWK_OUT_OF_MEMORY_STATUS;
    1402:	8f 87       	std	Y+15, r24	; 0x0f
    1404:	8c c0       	rjmp	.+280    	; 0x151e <nwkDataReqTaskHandler+0x14e>
		return;
	}

	req->frame = frame;
    1406:	9b 83       	std	Y+3, r25	; 0x03
    1408:	8a 83       	std	Y+2, r24	; 0x02
	req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	8c 83       	std	Y+4, r24	; 0x04

	frame->tx.confirm = nwkDataReqTxConf;
    140e:	f8 01       	movw	r30, r16
    1410:	e9 57       	subi	r30, 0x79	; 121
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	8c e9       	ldi	r24, 0x9C	; 156
    1416:	99 e0       	ldi	r25, 0x09	; 9
    1418:	91 83       	std	Z+1, r25	; 0x01
    141a:	80 83       	st	Z, r24
	frame->tx.control = req->options &
    141c:	31 97       	sbiw	r30, 0x01	; 1
    141e:	89 85       	ldd	r24, Y+9	; 0x09
    1420:	82 fb       	bst	r24, 2
    1422:	88 27       	eor	r24, r24
    1424:	80 f9       	bld	r24, 0
    1426:	80 83       	st	Z, r24
			NWK_OPT_BROADCAST_PAN_ID ?
			NWK_TX_CONTROL_BROADCAST_PAN_ID
			: 0;

	frame->header.nwkFcf.ackRequest = req->options &
    1428:	99 85       	ldd	r25, Y+9	; 0x09
    142a:	d8 01       	movw	r26, r16
    142c:	1b 96       	adiw	r26, 0x0b	; 11
    142e:	8c 91       	ld	r24, X
    1430:	1b 97       	sbiw	r26, 0x0b	; 11
    1432:	90 fb       	bst	r25, 0
    1434:	80 f9       	bld	r24, 0
    1436:	1b 96       	adiw	r26, 0x0b	; 11
    1438:	8c 93       	st	X, r24
    143a:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_ACK_REQUEST ? 1 : 0;
	frame->header.nwkFcf.linkLocal = req->options &
    143c:	99 85       	ldd	r25, Y+9	; 0x09
    143e:	93 fb       	bst	r25, 3
    1440:	99 27       	eor	r25, r25
    1442:	90 f9       	bld	r25, 0
    1444:	90 fb       	bst	r25, 0
    1446:	82 f9       	bld	r24, 2
    1448:	1b 96       	adiw	r26, 0x0b	; 11
    144a:	8c 93       	st	X, r24
    144c:	1b 97       	sbiw	r26, 0x0b	; 11
			NWK_OPT_LINK_LOCAL ? 1 : 0;

#ifdef NWK_ENABLE_SECURITY
	frame->header.nwkFcf.security = req->options &
    144e:	99 85       	ldd	r25, Y+9	; 0x09
    1450:	96 95       	lsr	r25
    1452:	91 70       	andi	r25, 0x01	; 1
    1454:	90 fb       	bst	r25, 0
    1456:	81 f9       	bld	r24, 1
    1458:	1b 96       	adiw	r26, 0x0b	; 11
    145a:	8c 93       	st	X, r24
    145c:	1b 97       	sbiw	r26, 0x0b	; 11
		frame->payload += sizeof(NwkFrameMulticastHeader_t);
		frame->size += sizeof(NwkFrameMulticastHeader_t);
	}
#endif

	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    145e:	ee e6       	ldi	r30, 0x6E	; 110
    1460:	fc e0       	ldi	r31, 0x0C	; 12
    1462:	84 81       	ldd	r24, Z+4	; 0x04
    1464:	8f 5f       	subi	r24, 0xFF	; 255
    1466:	84 83       	std	Z+4, r24	; 0x04
    1468:	1c 96       	adiw	r26, 0x0c	; 12
    146a:	8c 93       	st	X, r24
    146c:	1c 97       	sbiw	r26, 0x0c	; 12
	frame->header.nwkSrcAddr = nwkIb.addr;
    146e:	80 81       	ld	r24, Z
    1470:	91 81       	ldd	r25, Z+1	; 0x01
    1472:	1e 96       	adiw	r26, 0x0e	; 14
    1474:	9c 93       	st	X, r25
    1476:	8e 93       	st	-X, r24
    1478:	1d 97       	sbiw	r26, 0x0d	; 13
	frame->header.nwkDstAddr = req->dstAddr;
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	50 96       	adiw	r26, 0x10	; 16
    1480:	9c 93       	st	X, r25
    1482:	8e 93       	st	-X, r24
    1484:	1f 97       	sbiw	r26, 0x0f	; 15
	frame->header.nwkSrcEndpoint = req->srcEndpoint;
    1486:	88 85       	ldd	r24, Y+8	; 0x08
    1488:	98 2f       	mov	r25, r24
    148a:	9f 70       	andi	r25, 0x0F	; 15
    148c:	51 96       	adiw	r26, 0x11	; 17
    148e:	8c 91       	ld	r24, X
    1490:	51 97       	sbiw	r26, 0x11	; 17
    1492:	80 7f       	andi	r24, 0xF0	; 240
    1494:	89 2b       	or	r24, r25
    1496:	51 96       	adiw	r26, 0x11	; 17
    1498:	8c 93       	st	X, r24
    149a:	51 97       	sbiw	r26, 0x11	; 17
	frame->header.nwkDstEndpoint = req->dstEndpoint;
    149c:	9f 81       	ldd	r25, Y+7	; 0x07
    149e:	92 95       	swap	r25
    14a0:	90 7f       	andi	r25, 0xF0	; 240
    14a2:	8f 70       	andi	r24, 0x0F	; 15
    14a4:	89 2b       	or	r24, r25
    14a6:	51 96       	adiw	r26, 0x11	; 17
    14a8:	8c 93       	st	X, r24

	memcpy(frame->payload, req->data, req->size);
    14aa:	f8 01       	movw	r30, r16
    14ac:	ef 57       	subi	r30, 0x7F	; 127
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	4c 85       	ldd	r20, Y+12	; 0x0c
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	6a 85       	ldd	r22, Y+10	; 0x0a
    14b6:	7b 85       	ldd	r23, Y+11	; 0x0b
    14b8:	80 81       	ld	r24, Z
    14ba:	91 81       	ldd	r25, Z+1	; 0x01
    14bc:	0e 94 dd 15 	call	0x2bba	; 0x2bba <memcpy>
	frame->size += req->size;
    14c0:	f8 01       	movw	r30, r16
    14c2:	91 81       	ldd	r25, Z+1	; 0x01
    14c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    14c6:	89 0f       	add	r24, r25
    14c8:	81 83       	std	Z+1, r24	; 0x01

	nwkTxFrame(frame);
    14ca:	c8 01       	movw	r24, r16
    14cc:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <nwkTxFrame>
    14d0:	26 c0       	rjmp	.+76     	; 0x151e <nwkDataReqTaskHandler+0x14e>
*  @brief Confirms request @req to the application and remove it from the queue
*  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
	if (nwkDataReqQueue == req) {
    14d2:	ec 17       	cp	r30, r28
    14d4:	fd 07       	cpc	r31, r29
    14d6:	41 f4       	brne	.+16     	; 0x14e8 <nwkDataReqTaskHandler+0x118>
		nwkDataReqQueue = nwkDataReqQueue->next;
    14d8:	80 81       	ld	r24, Z
    14da:	91 81       	ldd	r25, Z+1	; 0x01
    14dc:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <nwkDataReqQueue+0x1>
    14e0:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <nwkDataReqQueue>
    14e4:	0a c0       	rjmp	.+20     	; 0x14fa <nwkDataReqTaskHandler+0x12a>
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
			prev = prev->next;
    14e6:	fc 01       	movw	r30, r24
{
	if (nwkDataReqQueue == req) {
		nwkDataReqQueue = nwkDataReqQueue->next;
	} else {
		NWK_DataReq_t *prev = nwkDataReqQueue;
		while (prev->next != req) {
    14e8:	80 81       	ld	r24, Z
    14ea:	91 81       	ldd	r25, Z+1	; 0x01
    14ec:	8c 17       	cp	r24, r28
    14ee:	9d 07       	cpc	r25, r29
    14f0:	d1 f7       	brne	.-12     	; 0x14e6 <nwkDataReqTaskHandler+0x116>
			prev = prev->next;
		}
		prev->next = ((NWK_DataReq_t *)prev->next)->next;
    14f2:	88 81       	ld	r24, Y
    14f4:	99 81       	ldd	r25, Y+1	; 0x01
    14f6:	91 83       	std	Z+1, r25	; 0x01
    14f8:	80 83       	st	Z, r24
	}

	nwkIb.lock--;
    14fa:	ee e6       	ldi	r30, 0x6E	; 110
    14fc:	fc e0       	ldi	r31, 0x0C	; 12
    14fe:	86 a9       	ldd	r24, Z+54	; 0x36
    1500:	97 a9       	ldd	r25, Z+55	; 0x37
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	97 ab       	std	Z+55, r25	; 0x37
    1506:	86 ab       	std	Z+54, r24	; 0x36
	req->confirm(req);
    1508:	ed 85       	ldd	r30, Y+13	; 0x0d
    150a:	fe 85       	ldd	r31, Y+14	; 0x0e
    150c:	ce 01       	movw	r24, r28
    150e:	09 95       	icall
    1510:	06 c0       	rjmp	.+12     	; 0x151e <nwkDataReqTaskHandler+0x14e>
/*************************************************************************//**
*  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
	for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next) {
    1512:	09 90       	ld	r0, Y+
    1514:	d8 81       	ld	r29, Y
    1516:	c0 2d       	mov	r28, r0
    1518:	20 97       	sbiw	r28, 0x00	; 0
    151a:	09 f0       	breq	.+2      	; 0x151e <nwkDataReqTaskHandler+0x14e>
    151c:	65 cf       	rjmp	.-310    	; 0x13e8 <nwkDataReqTaskHandler+0x18>

		default:
			break;
		}
	}
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	08 95       	ret

00001528 <nwkFrameInit>:

/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    1528:	e9 ed       	ldi	r30, 0xD9	; 217
    152a:	f2 e0       	ldi	r31, 0x02	; 2
    152c:	83 e3       	ldi	r24, 0x33	; 51
    152e:	98 e0       	ldi	r25, 0x08	; 8
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1530:	10 82       	st	Z, r1
    1532:	e7 57       	subi	r30, 0x77	; 119
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
*  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    1536:	e8 17       	cp	r30, r24
    1538:	f9 07       	cpc	r31, r25
    153a:	d1 f7       	brne	.-12     	; 0x1530 <nwkFrameInit+0x8>
		nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
	}
}
    153c:	08 95       	ret

0000153e <nwkFrameAlloc>:
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
		if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state) {
    153e:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <nwkFrameFrames>
    1542:	88 23       	and	r24, r24
    1544:	49 f0       	breq	.+18     	; 0x1558 <nwkFrameAlloc+0x1a>
    1546:	e2 e6       	ldi	r30, 0x62	; 98
    1548:	f3 e0       	ldi	r31, 0x03	; 3
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	ac 01       	movw	r20, r24
    1550:	20 81       	ld	r18, Z
    1552:	21 11       	cpse	r18, r1
    1554:	22 c0       	rjmp	.+68     	; 0x159a <nwkFrameAlloc+0x5c>
    1556:	02 c0       	rjmp	.+4      	; 0x155c <nwkFrameAlloc+0x1e>
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	50 e0       	ldi	r21, 0x00	; 0
			memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    155c:	69 e8       	ldi	r22, 0x89	; 137
    155e:	64 9f       	mul	r22, r20
    1560:	90 01       	movw	r18, r0
    1562:	65 9f       	mul	r22, r21
    1564:	30 0d       	add	r19, r0
    1566:	11 24       	eor	r1, r1
    1568:	c9 01       	movw	r24, r18
    156a:	87 52       	subi	r24, 0x27	; 39
    156c:	9d 4f       	sbci	r25, 0xFD	; 253
    156e:	fc 01       	movw	r30, r24
    1570:	11 92       	st	Z+, r1
    1572:	6a 95       	dec	r22
    1574:	e9 f7       	brne	.-6      	; 0x1570 <nwkFrameAlloc+0x32>
			nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    1576:	40 e1       	ldi	r20, 0x10	; 16
    1578:	fc 01       	movw	r30, r24
    157a:	41 83       	std	Z+1, r20	; 0x01
			nwkFrameFrames[i].payload = nwkFrameFrames[i].data +
    157c:	ef 57       	subi	r30, 0x7F	; 127
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	25 51       	subi	r18, 0x15	; 21
    1582:	3d 4f       	sbci	r19, 0xFD	; 253
    1584:	31 83       	std	Z+1, r19	; 0x01
    1586:	20 83       	st	Z, r18
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
    1588:	ee e6       	ldi	r30, 0x6E	; 110
    158a:	fc e0       	ldi	r31, 0x0C	; 12
    158c:	26 a9       	ldd	r18, Z+54	; 0x36
    158e:	37 a9       	ldd	r19, Z+55	; 0x37
    1590:	2f 5f       	subi	r18, 0xFF	; 255
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	37 ab       	std	Z+55, r19	; 0x37
    1596:	26 ab       	std	Z+54, r18	; 0x36
			return &nwkFrameFrames[i];
    1598:	08 95       	ret
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	e7 57       	subi	r30, 0x77	; 119
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
*  @brief Allocates an empty frame from the buffer pool
*  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
	for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++) {
    15a0:	8a 30       	cpi	r24, 0x0A	; 10
    15a2:	91 05       	cpc	r25, r1
    15a4:	a1 f6       	brne	.-88     	; 0x154e <nwkFrameAlloc+0x10>
					sizeof(NwkFrameHeader_t);
			nwkIb.lock++;
			return &nwkFrameFrames[i];
		}
	}
	return NULL;
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
}
    15aa:	08 95       	ret

000015ac <nwkFrameFree>:
*  @brief Frees a @a frame and returns it to the buffer pool
*  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
	frame->state = NWK_FRAME_STATE_FREE;
    15ac:	fc 01       	movw	r30, r24
    15ae:	10 82       	st	Z, r1
	nwkIb.lock--;
    15b0:	ee e6       	ldi	r30, 0x6E	; 110
    15b2:	fc e0       	ldi	r31, 0x0C	; 12
    15b4:	86 a9       	ldd	r24, Z+54	; 0x36
    15b6:	97 a9       	ldd	r25, Z+55	; 0x37
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	97 ab       	std	Z+55, r25	; 0x37
    15bc:	86 ab       	std	Z+54, r24	; 0x36
    15be:	08 95       	ret

000015c0 <nwkFrameNext>:
*  @param[in] frame Pointer to the current frame or @c NULL for the first frame
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	41 f0       	breq	.+16     	; 0x15d4 <nwkFrameNext+0x14>
		frame = nwkFrameFrames;
	} else {
		frame++;
    15c4:	fc 01       	movw	r30, r24
    15c6:	e7 57       	subi	r30, 0x77	; 119
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    15ca:	88 e0       	ldi	r24, 0x08	; 8
    15cc:	e3 33       	cpi	r30, 0x33	; 51
    15ce:	f8 07       	cpc	r31, r24
    15d0:	18 f0       	brcs	.+6      	; 0x15d8 <nwkFrameNext+0x18>
    15d2:	12 c0       	rjmp	.+36     	; 0x15f8 <nwkFrameNext+0x38>
*  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
	if (NULL == frame) {
		frame = nwkFrameFrames;
    15d4:	e9 ed       	ldi	r30, 0xD9	; 217
    15d6:	f2 e0       	ldi	r31, 0x02	; 2
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    15d8:	80 81       	ld	r24, Z
    15da:	88 23       	and	r24, r24
    15dc:	21 f0       	breq	.+8      	; 0x15e6 <nwkFrameNext+0x26>
    15de:	0f c0       	rjmp	.+30     	; 0x15fe <nwkFrameNext+0x3e>
    15e0:	80 81       	ld	r24, Z
    15e2:	81 11       	cpse	r24, r1
    15e4:	0f c0       	rjmp	.+30     	; 0x1604 <nwkFrameNext+0x44>
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    15e6:	e7 57       	subi	r30, 0x77	; 119
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	88 e0       	ldi	r24, 0x08	; 8
    15ec:	e3 33       	cpi	r30, 0x33	; 51
    15ee:	f8 07       	cpc	r31, r24
    15f0:	b8 f3       	brcs	.-18     	; 0x15e0 <nwkFrameNext+0x20>
		if (NWK_FRAME_STATE_FREE != frame->state) {
			return frame;
		}
	}

	return NULL;
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	08 95       	ret
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	08 95       	ret
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
		if (NWK_FRAME_STATE_FREE != frame->state) {
    15fe:	8e 2f       	mov	r24, r30
    1600:	9f 2f       	mov	r25, r31
    1602:	08 95       	ret
		frame = nwkFrameFrames;
	} else {
		frame++;
	}

	for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++) {
    1604:	8e 2f       	mov	r24, r30
    1606:	9f 2f       	mov	r25, r31
			return frame;
		}
	}

	return NULL;
}
    1608:	08 95       	ret

0000160a <nwkFrameCommandInit>:
/*************************************************************************//**
*  @brief Sets default parameters for the the command @a frame
*  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    160a:	fc 01       	movw	r30, r24
	frame->tx.status = NWK_SUCCESS_STATUS;
    160c:	dc 01       	movw	r26, r24
    160e:	ad 57       	subi	r26, 0x7D	; 125
    1610:	bf 4f       	sbci	r27, 0xFF	; 255
    1612:	1c 92       	st	X, r1
	frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1614:	ae e6       	ldi	r26, 0x6E	; 110
    1616:	bc e0       	ldi	r27, 0x0C	; 12
    1618:	14 96       	adiw	r26, 0x04	; 4
    161a:	9c 91       	ld	r25, X
    161c:	14 97       	sbiw	r26, 0x04	; 4
    161e:	9f 5f       	subi	r25, 0xFF	; 255
    1620:	14 96       	adiw	r26, 0x04	; 4
    1622:	9c 93       	st	X, r25
    1624:	14 97       	sbiw	r26, 0x04	; 4
    1626:	94 87       	std	Z+12, r25	; 0x0c
	frame->header.nwkSrcAddr = nwkIb.addr;
    1628:	8d 91       	ld	r24, X+
    162a:	9c 91       	ld	r25, X
    162c:	96 87       	std	Z+14, r25	; 0x0e
    162e:	85 87       	std	Z+13, r24	; 0x0d
    1630:	08 95       	ret

00001632 <nwkRouteInit>:
/*************************************************************************//**
*****************************************************************************/
NWK_RouteTableEntry_t *NWK_RouteTable(void)
{
	return nwkRouteTable;
}
    1632:	a4 e3       	ldi	r26, 0x34	; 52
    1634:	b8 e0       	ldi	r27, 0x08	; 8
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	4f ef       	ldi	r20, 0xFF	; 255
    163c:	5f ef       	ldi	r21, 0xFF	; 255
    163e:	11 96       	adiw	r26, 0x01	; 1
    1640:	5c 93       	st	X, r21
    1642:	4e 93       	st	-X, r20
    1644:	fc 01       	movw	r30, r24
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	e8 1b       	sub	r30, r24
    1654:	f9 0b       	sbc	r31, r25
    1656:	ed 5c       	subi	r30, 0xCD	; 205
    1658:	f7 4f       	sbci	r31, 0xF7	; 247
    165a:	20 81       	ld	r18, Z
    165c:	2e 7f       	andi	r18, 0xFE	; 254
    165e:	20 83       	st	Z, r18
    1660:	14 96       	adiw	r26, 0x04	; 4
    1662:	1c 92       	st	X, r1
    1664:	14 97       	sbiw	r26, 0x04	; 4
    1666:	01 96       	adiw	r24, 0x01	; 1
    1668:	17 96       	adiw	r26, 0x07	; 7
    166a:	84 36       	cpi	r24, 0x64	; 100
    166c:	91 05       	cpc	r25, r1
    166e:	39 f7       	brne	.-50     	; 0x163e <nwkRouteInit+0xc>
    1670:	08 95       	ret

00001672 <NWK_RouteFindEntry>:
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	e4 e3       	ldi	r30, 0x34	; 52
    167c:	f8 e0       	ldi	r31, 0x08	; 8
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	06 2f       	mov	r16, r22
    1684:	10 e0       	ldi	r17, 0x00	; 0
    1686:	40 81       	ld	r20, Z
    1688:	51 81       	ldd	r21, Z+1	; 0x01
    168a:	48 17       	cp	r20, r24
    168c:	59 07       	cpc	r21, r25
    168e:	b1 f4       	brne	.+44     	; 0x16bc <NWK_RouteFindEntry+0x4a>
    1690:	d9 01       	movw	r26, r18
    1692:	aa 0f       	add	r26, r26
    1694:	bb 1f       	adc	r27, r27
    1696:	aa 0f       	add	r26, r26
    1698:	bb 1f       	adc	r27, r27
    169a:	aa 0f       	add	r26, r26
    169c:	bb 1f       	adc	r27, r27
    169e:	a2 1b       	sub	r26, r18
    16a0:	b3 0b       	sbc	r27, r19
    16a2:	ad 5c       	subi	r26, 0xCD	; 205
    16a4:	b7 4f       	sbci	r27, 0xF7	; 247
    16a6:	4c 91       	ld	r20, X
    16a8:	46 95       	lsr	r20
    16aa:	41 70       	andi	r20, 0x01	; 1
    16ac:	c4 2f       	mov	r28, r20
    16ae:	40 e0       	ldi	r20, 0x00	; 0
    16b0:	d4 2f       	mov	r29, r20
    16b2:	c0 17       	cp	r28, r16
    16b4:	d1 07       	cpc	r29, r17
    16b6:	11 f4       	brne	.+4      	; 0x16bc <NWK_RouteFindEntry+0x4a>
    16b8:	cd 01       	movw	r24, r26
    16ba:	08 c0       	rjmp	.+16     	; 0x16cc <NWK_RouteFindEntry+0x5a>
    16bc:	2f 5f       	subi	r18, 0xFF	; 255
    16be:	3f 4f       	sbci	r19, 0xFF	; 255
    16c0:	37 96       	adiw	r30, 0x07	; 7
    16c2:	24 36       	cpi	r18, 0x64	; 100
    16c4:	31 05       	cpc	r19, r1
    16c6:	f9 f6       	brne	.-66     	; 0x1686 <NWK_RouteFindEntry+0x14>
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	08 95       	ret

000016d6 <NWK_RouteNewEntry>:
    16d6:	a0 e0       	ldi	r26, 0x00	; 0
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e3 e3       	ldi	r30, 0x33	; 51
    16dc:	f8 e0       	ldi	r31, 0x08	; 8
    16de:	80 81       	ld	r24, Z
    16e0:	80 fd       	sbrc	r24, 0
    16e2:	0d c0       	rjmp	.+26     	; 0x16fe <NWK_RouteNewEntry+0x28>
    16e4:	85 81       	ldd	r24, Z+5	; 0x05
    16e6:	88 23       	and	r24, r24
    16e8:	81 f0       	breq	.+32     	; 0x170a <NWK_RouteNewEntry+0x34>
    16ea:	10 97       	sbiw	r26, 0x00	; 0
    16ec:	39 f0       	breq	.+14     	; 0x16fc <NWK_RouteNewEntry+0x26>
    16ee:	15 96       	adiw	r26, 0x05	; 5
    16f0:	9c 91       	ld	r25, X
    16f2:	15 97       	sbiw	r26, 0x05	; 5
    16f4:	89 17       	cp	r24, r25
    16f6:	18 f4       	brcc	.+6      	; 0x16fe <NWK_RouteNewEntry+0x28>
    16f8:	df 01       	movw	r26, r30
    16fa:	01 c0       	rjmp	.+2      	; 0x16fe <NWK_RouteNewEntry+0x28>
    16fc:	df 01       	movw	r26, r30
    16fe:	37 96       	adiw	r30, 0x07	; 7
    1700:	8a e0       	ldi	r24, 0x0A	; 10
    1702:	ef 3e       	cpi	r30, 0xEF	; 239
    1704:	f8 07       	cpc	r31, r24
    1706:	59 f7       	brne	.-42     	; 0x16de <NWK_RouteNewEntry+0x8>
    1708:	fd 01       	movw	r30, r26
    170a:	80 81       	ld	r24, Z
    170c:	8d 70       	andi	r24, 0x0D	; 13
    170e:	80 63       	ori	r24, 0x30	; 48
    1710:	80 83       	st	Z, r24
    1712:	80 e8       	ldi	r24, 0x80	; 128
    1714:	85 83       	std	Z+5, r24	; 0x05
    1716:	cf 01       	movw	r24, r30
    1718:	08 95       	ret

0000171a <NWK_RouteFreeEntry>:
    171a:	fc 01       	movw	r30, r24
    171c:	80 81       	ld	r24, Z
    171e:	80 fd       	sbrc	r24, 0
    1720:	05 c0       	rjmp	.+10     	; 0x172c <NWK_RouteFreeEntry+0x12>
    1722:	8f ef       	ldi	r24, 0xFF	; 255
    1724:	9f ef       	ldi	r25, 0xFF	; 255
    1726:	92 83       	std	Z+2, r25	; 0x02
    1728:	81 83       	std	Z+1, r24	; 0x01
    172a:	15 82       	std	Z+5, r1	; 0x05
    172c:	08 95       	ret

0000172e <NWK_RouteNextHop>:
    172e:	a1 df       	rcall	.-190    	; 0x1672 <NWK_RouteFindEntry>
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	21 f0       	breq	.+8      	; 0x173c <NWK_RouteNextHop+0xe>
    1734:	fc 01       	movw	r30, r24
    1736:	83 81       	ldd	r24, Z+3	; 0x03
    1738:	94 81       	ldd	r25, Z+4	; 0x04
    173a:	08 95       	ret
    173c:	8f ef       	ldi	r24, 0xFF	; 255
    173e:	9f ef       	ldi	r25, 0xFF	; 255
    1740:	08 95       	ret

00001742 <nwkRouteUpdateEntry>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteUpdateEntry(uint16_t dst, uint8_t multicast, uint16_t nextHop,
		uint8_t lqi)
{
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	8c 01       	movw	r16, r24
    1750:	c6 2f       	mov	r28, r22
    1752:	7a 01       	movw	r14, r20
    1754:	d2 2f       	mov	r29, r18
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    1756:	8d df       	rcall	.-230    	; 0x1672 <NWK_RouteFindEntry>
    1758:	fc 01       	movw	r30, r24

	if (NULL == entry) {
    175a:	89 2b       	or	r24, r25
		entry = NWK_RouteNewEntry();
    175c:	11 f4       	brne	.+4      	; 0x1762 <nwkRouteUpdateEntry+0x20>
    175e:	bb df       	rcall	.-138    	; 0x16d6 <NWK_RouteNewEntry>
    1760:	fc 01       	movw	r30, r24
	}

	entry->dstAddr = dst;
    1762:	12 83       	std	Z+2, r17	; 0x02
    1764:	01 83       	std	Z+1, r16	; 0x01
	entry->nextHopAddr = nextHop;
    1766:	f4 82       	std	Z+4, r15	; 0x04
    1768:	e3 82       	std	Z+3, r14	; 0x03
	entry->multicast = multicast;
    176a:	80 81       	ld	r24, Z
    176c:	c0 fb       	bst	r28, 0
    176e:	81 f9       	bld	r24, 1
	entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1770:	8f 70       	andi	r24, 0x0F	; 15
    1772:	80 63       	ori	r24, 0x30	; 48
    1774:	80 83       	st	Z, r24
	entry->rank = NWK_ROUTE_DEFAULT_RANK;
    1776:	80 e8       	ldi	r24, 0x80	; 128
    1778:	85 83       	std	Z+5, r24	; 0x05
	entry->lqi = lqi;
    177a:	d6 83       	std	Z+6, r29	; 0x06
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	08 95       	ret

0000178a <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
	NWK_RouteTableEntry_t *entry;

	entry = NWK_RouteFindEntry(dst, multicast);
    178a:	73 df       	rcall	.-282    	; 0x1672 <NWK_RouteFindEntry>
	if (entry) {
    178c:	00 97       	sbiw	r24, 0x00	; 0
		NWK_RouteFreeEntry(entry);
    178e:	09 f0       	breq	.+2      	; 0x1792 <nwkRouteRemove+0x8>
    1790:	c4 cf       	rjmp	.-120    	; 0x171a <NWK_RouteFreeEntry>
    1792:	08 95       	ret

00001794 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    1794:	08 95       	ret

00001796 <nwkRouteFrameSent>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	fc 01       	movw	r30, r24
	NWK_RouteTableEntry_t *entry;

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
    179c:	87 85       	ldd	r24, Z+15	; 0x0f
    179e:	90 89       	ldd	r25, Z+16	; 0x10
    17a0:	8f 3f       	cpi	r24, 0xFF	; 255
    17a2:	2f ef       	ldi	r18, 0xFF	; 255
    17a4:	92 07       	cpc	r25, r18
    17a6:	d9 f1       	breq	.+118    	; 0x181e <nwkRouteFrameSent+0x88>
    17a8:	ef 01       	movw	r28, r30
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
			frame->header.nwkFcf.multicast);
    17aa:	63 85       	ldd	r22, Z+11	; 0x0b
    17ac:	63 fb       	bst	r22, 3
    17ae:	66 27       	eor	r22, r22
    17b0:	60 f9       	bld	r22, 0

	if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr) {
		return;
	}

	entry = NWK_RouteFindEntry(frame->header.nwkDstAddr,
    17b2:	5f df       	rcall	.-322    	; 0x1672 <NWK_RouteFindEntry>
    17b4:	dc 01       	movw	r26, r24
			frame->header.nwkFcf.multicast);

	if (NULL == entry || entry->fixed) {
    17b6:	89 2b       	or	r24, r25
    17b8:	91 f1       	breq	.+100    	; 0x181e <nwkRouteFrameSent+0x88>
    17ba:	8c 91       	ld	r24, X
    17bc:	80 fd       	sbrc	r24, 0
    17be:	2f c0       	rjmp	.+94     	; 0x181e <nwkRouteFrameSent+0x88>
		return;
	}

	if (NWK_SUCCESS_STATUS == frame->tx.status) {
    17c0:	fe 01       	movw	r30, r28
    17c2:	ed 57       	subi	r30, 0x7D	; 125
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	80 81       	ld	r24, Z
    17c8:	81 11       	cpse	r24, r1
    17ca:	19 c0       	rjmp	.+50     	; 0x17fe <nwkRouteFrameSent+0x68>
		entry->score = NWK_ROUTE_DEFAULT_SCORE;
    17cc:	8c 91       	ld	r24, X
    17ce:	8f 70       	andi	r24, 0x0F	; 15
    17d0:	80 63       	ori	r24, 0x30	; 48
    17d2:	8c 93       	st	X, r24

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
    17d4:	15 96       	adiw	r26, 0x05	; 5
    17d6:	8c 91       	ld	r24, X
    17d8:	15 97       	sbiw	r26, 0x05	; 5
    17da:	8f 5f       	subi	r24, 0xFF	; 255
    17dc:	15 96       	adiw	r26, 0x05	; 5
    17de:	8c 93       	st	X, r24
    17e0:	8f 3f       	cpi	r24, 0xFF	; 255
    17e2:	e9 f4       	brne	.+58     	; 0x181e <nwkRouteFrameSent+0x88>
    17e4:	e8 e3       	ldi	r30, 0x38	; 56
    17e6:	f8 e0       	ldi	r31, 0x08	; 8
    17e8:	24 ef       	ldi	r18, 0xF4	; 244
    17ea:	3a e0       	ldi	r19, 0x0A	; 10
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
		nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    17ec:	80 81       	ld	r24, Z
    17ee:	86 95       	lsr	r24
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
    17f2:	80 83       	st	Z, r24
    17f4:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++) {
    17f6:	e2 17       	cp	r30, r18
    17f8:	f3 07       	cpc	r31, r19
    17fa:	c1 f7       	brne	.-16     	; 0x17ec <nwkRouteFrameSent+0x56>
    17fc:	10 c0       	rjmp	.+32     	; 0x181e <nwkRouteFrameSent+0x88>

		if (NWK_ROUTE_MAX_RANK == ++entry->rank) {
			nwkRouteNormalizeRanks();
		}
	} else {
		if (0 == --entry->score) {
    17fe:	9c 91       	ld	r25, X
    1800:	89 2f       	mov	r24, r25
    1802:	82 95       	swap	r24
    1804:	8f 70       	andi	r24, 0x0F	; 15
    1806:	81 5f       	subi	r24, 0xF1	; 241
    1808:	8f 70       	andi	r24, 0x0F	; 15
    180a:	28 2f       	mov	r18, r24
    180c:	22 95       	swap	r18
    180e:	20 7f       	andi	r18, 0xF0	; 240
    1810:	9f 70       	andi	r25, 0x0F	; 15
    1812:	92 2b       	or	r25, r18
    1814:	9c 93       	st	X, r25
    1816:	81 11       	cpse	r24, r1
    1818:	02 c0       	rjmp	.+4      	; 0x181e <nwkRouteFrameSent+0x88>
			NWK_RouteFreeEntry(entry);
    181a:	cd 01       	movw	r24, r26
    181c:	7e df       	rcall	.-260    	; 0x171a <NWK_RouteFreeEntry>
		}
	}
}
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	08 95       	ret

00001824 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	fc 01       	movw	r30, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr) {
    182a:	87 85       	ldd	r24, Z+15	; 0x0f
    182c:	90 89       	ldd	r25, Z+16	; 0x10
    182e:	8f 3f       	cpi	r24, 0xFF	; 255
    1830:	2f ef       	ldi	r18, 0xFF	; 255
    1832:	92 07       	cpc	r25, r18
    1834:	29 f4       	brne	.+10     	; 0x1840 <nwkRoutePrepareTx+0x1c>
		header->macDstAddr = NWK_BROADCAST_ADDR;
    1836:	8f ef       	ldi	r24, 0xFF	; 255
    1838:	9f ef       	ldi	r25, 0xFF	; 255
    183a:	90 87       	std	Z+8, r25	; 0x08
    183c:	87 83       	std	Z+7, r24	; 0x07
    183e:	12 c0       	rjmp	.+36     	; 0x1864 <nwkRoutePrepareTx+0x40>
	} else if (header->nwkFcf.linkLocal) {
    1840:	23 85       	ldd	r18, Z+11	; 0x0b
    1842:	22 ff       	sbrs	r18, 2
    1844:	03 c0       	rjmp	.+6      	; 0x184c <nwkRoutePrepareTx+0x28>
		header->macDstAddr = header->nwkDstAddr;
    1846:	90 87       	std	Z+8, r25	; 0x08
    1848:	87 83       	std	Z+7, r24	; 0x07
    184a:	0c c0       	rjmp	.+24     	; 0x1864 <nwkRoutePrepareTx+0x40>
    184c:	ef 01       	movw	r28, r30
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
				header->nwkFcf.multicast);
    184e:	63 85       	ldd	r22, Z+11	; 0x0b
    1850:	63 fb       	bst	r22, 3
    1852:	66 27       	eor	r22, r22
    1854:	60 f9       	bld	r22, 0
		header->nwkFcf.linkLocal = 1;
	}
#endif

	else {
		header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr,
    1856:	6b df       	rcall	.-298    	; 0x172e <NWK_RouteNextHop>
    1858:	98 87       	std	Y+8, r25	; 0x08
    185a:	8f 83       	std	Y+7, r24	; 0x07
				header->nwkFcf.multicast);

  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
		if (NWK_ROUTE_UNKNOWN == header->macDstAddr) {
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	11 f4       	brne	.+4      	; 0x1864 <nwkRoutePrepareTx+0x40>
			nwkRouteDiscoveryRequest(frame);
    1860:	ce 01       	movw	r24, r28
    1862:	d2 d1       	rcall	.+932    	; 0x1c08 <nwkRouteDiscoveryRequest>
		}
  #endif
	}
}
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	08 95       	ret

0000186a <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    186a:	af 92       	push	r10
    186c:	bf 92       	push	r11
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	1f 93       	push	r17
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	ec 01       	movw	r28, r24
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
    187e:	1b 85       	ldd	r17, Y+11	; 0x0b
    1880:	13 fb       	bst	r17, 3
    1882:	11 27       	eor	r17, r17
    1884:	10 f9       	bld	r17, 0
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
			NWK_RouteNextHop(header->nwkDstAddr,
    1886:	cf 84       	ldd	r12, Y+15	; 0x0f
    1888:	d8 88       	ldd	r13, Y+16	; 0x10
    188a:	61 2f       	mov	r22, r17
    188c:	c6 01       	movw	r24, r12
    188e:	4f df       	rcall	.-354    	; 0x172e <NWK_RouteNextHop>
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	if (NWK_ROUTE_UNKNOWN !=
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	59 f0       	breq	.+22     	; 0x18aa <nwkRouteFrame+0x40>
			NWK_RouteNextHop(header->nwkDstAddr,
			header->nwkFcf.multicast)) {
		frame->tx.confirm = NULL;
    1894:	fe 01       	movw	r30, r28
    1896:	e9 57       	subi	r30, 0x79	; 121
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	11 82       	std	Z+1, r1	; 0x01
    189c:	10 82       	st	Z, r1
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
    189e:	31 97       	sbiw	r30, 0x01	; 1
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	80 83       	st	Z, r24
		nwkTxFrame(frame);
    18a4:	ce 01       	movw	r24, r28
    18a6:	7e d7       	rcall	.+3836   	; 0x27a4 <nwkTxFrame>
    18a8:	22 c0       	rjmp	.+68     	; 0x18ee <nwkRouteFrame+0x84>
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
    18aa:	ad 84       	ldd	r10, Y+13	; 0x0d
		uint8_t multicast)
{
	NwkFrame_t *frame;
	NwkCommandRouteError_t *command;

	if (NULL == (frame = nwkFrameAlloc())) {
    18ac:	be 84       	ldd	r11, Y+14	; 0x0e
    18ae:	47 de       	rcall	.-882    	; 0x153e <nwkFrameAlloc>
    18b0:	7c 01       	movw	r14, r24
    18b2:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(frame);
    18b4:	d1 f0       	breq	.+52     	; 0x18ea <nwkRouteFrame+0x80>
    18b6:	a9 de       	rcall	.-686    	; 0x160a <nwkFrameCommandInit>

	frame->size += sizeof(NwkCommandRouteError_t);
    18b8:	f7 01       	movw	r30, r14
    18ba:	81 81       	ldd	r24, Z+1	; 0x01
    18bc:	8a 5f       	subi	r24, 0xFA	; 250
    18be:	81 83       	std	Z+1, r24	; 0x01
	frame->tx.confirm = NULL;
    18c0:	e9 57       	subi	r30, 0x79	; 121
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	11 82       	std	Z+1, r1	; 0x01
    18c6:	10 82       	st	Z, r1

	frame->header.nwkDstAddr = src;
    18c8:	f7 01       	movw	r30, r14
    18ca:	b0 8a       	std	Z+16, r11	; 0x10
    18cc:	a7 86       	std	Z+15, r10	; 0x0f

	command = (NwkCommandRouteError_t *)frame->payload;
    18ce:	ef 57       	subi	r30, 0x7F	; 127
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	01 90       	ld	r0, Z+
    18d4:	f0 81       	ld	r31, Z
    18d6:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ROUTE_ERROR;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	80 83       	st	Z, r24
	command->srcAddr = src;
    18dc:	b2 82       	std	Z+2, r11	; 0x02
    18de:	a1 82       	std	Z+1, r10	; 0x01
	command->dstAddr = dst;
    18e0:	d4 82       	std	Z+4, r13	; 0x04
	command->multicast = multicast;

	nwkTxFrame(frame);
    18e2:	c3 82       	std	Z+3, r12	; 0x03
    18e4:	15 83       	std	Z+5, r17	; 0x05
    18e6:	c7 01       	movw	r24, r14
		frame->tx.control = NWK_TX_CONTROL_ROUTING;
		nwkTxFrame(frame);
	} else {
		nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr,
				header->nwkFcf.multicast);
		nwkFrameFree(frame);
    18e8:	5d d7       	rcall	.+3770   	; 0x27a4 <nwkTxFrame>
    18ea:	ce 01       	movw	r24, r28
    18ec:	5f de       	rcall	.-834    	; 0x15ac <nwkFrameFree>
	}
}
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	ff 90       	pop	r15
    18f6:	ef 90       	pop	r14
    18f8:	df 90       	pop	r13
    18fa:	cf 90       	pop	r12
    18fc:	bf 90       	pop	r11
    18fe:	af 90       	pop	r10
    1900:	08 95       	ret

00001902 <nwkRouteErrorReceived>:
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
    1902:	fc 01       	movw	r30, r24
    1904:	21 85       	ldd	r18, Z+9	; 0x09
    1906:	26 30       	cpi	r18, 0x06	; 6
    1908:	49 f4       	brne	.+18     	; 0x191c <nwkRouteErrorReceived+0x1a>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    190a:	07 80       	ldd	r0, Z+7	; 0x07
    190c:	f0 85       	ldd	r31, Z+8	; 0x08
    190e:	e0 2d       	mov	r30, r0

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
	}

	nwkRouteRemove(command->dstAddr, command->multicast);
    1910:	65 81       	ldd	r22, Z+5	; 0x05
    1912:	83 81       	ldd	r24, Z+3	; 0x03
    1914:	94 81       	ldd	r25, Z+4	; 0x04
    1916:	39 df       	rcall	.-398    	; 0x178a <nwkRouteRemove>

	return true;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

	if (sizeof(NwkCommandRouteError_t) != ind->size) {
		return false;
    191c:	80 e0       	ldi	r24, 0x00	; 0
	}

	nwkRouteRemove(command->dstAddr, command->multicast);

	return true;
}
    191e:	08 95       	ret

00001920 <nwkRouteDiscoveryFindEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	ec ef       	ldi	r30, 0xFC	; 252
    192a:	fa e0       	ldi	r31, 0x0A	; 10
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (nwkRouteDiscoveryTable[i].timeout > 0 &&
    1930:	89 01       	movw	r16, r18
    1932:	a1 85       	ldd	r26, Z+9	; 0x09
    1934:	b2 85       	ldd	r27, Z+10	; 0x0a
    1936:	ab 2b       	or	r26, r27
    1938:	b1 f0       	breq	.+44     	; 0x1966 <nwkRouteDiscoveryFindEntry+0x46>
    193a:	a0 81       	ld	r26, Z
    193c:	b1 81       	ldd	r27, Z+1	; 0x01
    193e:	a8 17       	cp	r26, r24
    1940:	b9 07       	cpc	r27, r25
    1942:	89 f4       	brne	.+34     	; 0x1966 <nwkRouteDiscoveryFindEntry+0x46>
				nwkRouteDiscoveryTable[i].srcAddr == src &&
    1944:	a2 81       	ldd	r26, Z+2	; 0x02
    1946:	b3 81       	ldd	r27, Z+3	; 0x03
    1948:	a6 17       	cp	r26, r22
    194a:	b7 07       	cpc	r27, r23
    194c:	61 f4       	brne	.+24     	; 0x1966 <nwkRouteDiscoveryFindEntry+0x46>
				nwkRouteDiscoveryTable[i].dstAddr == dst &&
    194e:	54 81       	ldd	r21, Z+4	; 0x04
    1950:	54 13       	cpse	r21, r20
    1952:	09 c0       	rjmp	.+18     	; 0x1966 <nwkRouteDiscoveryFindEntry+0x46>
				nwkRouteDiscoveryTable[i].multicast ==
				multicast) {
			return &nwkRouteDiscoveryTable[i];
    1954:	2b e0       	ldi	r18, 0x0B	; 11
    1956:	20 9f       	mul	r18, r16
    1958:	c0 01       	movw	r24, r0
    195a:	21 9f       	mul	r18, r17
    195c:	90 0d       	add	r25, r0
    195e:	11 24       	eor	r1, r1
    1960:	84 50       	subi	r24, 0x04	; 4
    1962:	95 4f       	sbci	r25, 0xF5	; 245
    1964:	08 c0       	rjmp	.+16     	; 0x1976 <nwkRouteDiscoveryFindEntry+0x56>
    1966:	2f 5f       	subi	r18, 0xFF	; 255
    1968:	3f 4f       	sbci	r19, 0xFF	; 255
    196a:	3b 96       	adiw	r30, 0x0b	; 11
/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryFindEntry(uint16_t src,
		uint16_t dst, uint8_t multicast)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    196c:	25 30       	cpi	r18, 0x05	; 5
    196e:	31 05       	cpc	r19, r1
    1970:	f9 f6       	brne	.-66     	; 0x1930 <nwkRouteDiscoveryFindEntry+0x10>
				multicast) {
			return &nwkRouteDiscoveryTable[i];
		}
	}

	return NULL;
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	90 e0       	ldi	r25, 0x00	; 0
}
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	08 95       	ret

00001980 <nwkRouteDiscoveryNewEntry>:

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		if (0 == nwkRouteDiscoveryTable[i].timeout) {
    1984:	80 91 05 0b 	lds	r24, 0x0B05	; 0x800b05 <nwkRouteDiscoveryTable+0x9>
    1988:	90 91 06 0b 	lds	r25, 0x0B06	; 0x800b06 <nwkRouteDiscoveryTable+0xa>
    198c:	89 2b       	or	r24, r25
    198e:	51 f0       	breq	.+20     	; 0x19a4 <nwkRouteDiscoveryNewEntry+0x24>
    1990:	e0 e1       	ldi	r30, 0x10	; 16
    1992:	fb e0       	ldi	r31, 0x0B	; 11
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	ac 01       	movw	r20, r24
    199a:	20 81       	ld	r18, Z
    199c:	31 81       	ldd	r19, Z+1	; 0x01
    199e:	23 2b       	or	r18, r19
    19a0:	a9 f4       	brne	.+42     	; 0x19cc <nwkRouteDiscoveryNewEntry+0x4c>
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <nwkRouteDiscoveryNewEntry+0x28>
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	50 e0       	ldi	r21, 0x00	; 0
			entry = &nwkRouteDiscoveryTable[i];
    19a8:	8b e0       	ldi	r24, 0x0B	; 11
    19aa:	84 9f       	mul	r24, r20
    19ac:	e0 01       	movw	r28, r0
    19ae:	85 9f       	mul	r24, r21
    19b0:	d0 0d       	add	r29, r0
    19b2:	11 24       	eor	r1, r1
    19b4:	c4 50       	subi	r28, 0x04	; 4
    19b6:	d5 4f       	sbci	r29, 0xF5	; 245
			break;
		}
	}

	if (entry) {
		entry->forwardLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    19b8:	1f 82       	std	Y+7, r1	; 0x07
		entry->reverseLinkQuality = NWK_ROUTE_DISCOVERY_NO_LINK;
    19ba:	18 86       	std	Y+8, r1	; 0x08
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
    19bc:	88 ee       	ldi	r24, 0xE8	; 232
    19be:	93 e0       	ldi	r25, 0x03	; 3
    19c0:	9a 87       	std	Y+10, r25	; 0x0a
    19c2:	89 87       	std	Y+9, r24	; 0x09
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
    19c4:	8f ee       	ldi	r24, 0xEF	; 239
    19c6:	9a e0       	ldi	r25, 0x0A	; 10
    19c8:	ee da       	rcall	.-2596   	; 0xfa6 <SYS_TimerStart>
    19ca:	07 c0       	rjmp	.+14     	; 0x19da <nwkRouteDiscoveryNewEntry+0x5a>
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	3b 96       	adiw	r30, 0x0b	; 11
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
	NwkRouteDiscoveryTableEntry_t *entry = NULL;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    19d0:	85 30       	cpi	r24, 0x05	; 5
    19d2:	91 05       	cpc	r25, r1
    19d4:	09 f7       	brne	.-62     	; 0x1998 <nwkRouteDiscoveryNewEntry+0x18>

/*************************************************************************//**
*****************************************************************************/
static NwkRouteDiscoveryTableEntry_t *nwkRouteDiscoveryNewEntry(void)
{
	NwkRouteDiscoveryTableEntry_t *entry = NULL;
    19d6:	c0 e0       	ldi	r28, 0x00	; 0
    19d8:	d0 e0       	ldi	r29, 0x00	; 0
		entry->timeout = NWK_ROUTE_DISCOVERY_TIMEOUT;
		SYS_TimerStart(&nwkRouteDiscoveryTimer);
	}

	return entry;
}
    19da:	ce 01       	movw	r24, r28
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	08 95       	ret

000019e2 <nwkRouteDiscoveryTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
    19e2:	3f 92       	push	r3
    19e4:	4f 92       	push	r4
    19e6:	5f 92       	push	r5
    19e8:	6f 92       	push	r6
    19ea:	7f 92       	push	r7
    19ec:	8f 92       	push	r8
    19ee:	9f 92       	push	r9
    19f0:	af 92       	push	r10
    19f2:	bf 92       	push	r11
    19f4:	cf 92       	push	r12
    19f6:	df 92       	push	r13
    19f8:	ef 92       	push	r14
    19fa:	ff 92       	push	r15
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	5c 01       	movw	r10, r24
    1a06:	cc ef       	ldi	r28, 0xFC	; 252
    1a08:	da e0       	ldi	r29, 0x0A	; 10
    1a0a:	0f 2e       	mov	r0, r31
    1a0c:	f3 e3       	ldi	r31, 0x33	; 51
    1a0e:	ef 2e       	mov	r14, r31
    1a10:	fb e0       	ldi	r31, 0x0B	; 11
    1a12:	ff 2e       	mov	r15, r31
    1a14:	f0 2d       	mov	r31, r0
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;
    1a16:	41 2c       	mov	r4, r1
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
			restart = true;
		} else {
			entry->timeout = 0;

			if (entry->srcAddr == nwkIb.addr) {
    1a18:	0f 2e       	mov	r0, r31
    1a1a:	fe e6       	ldi	r31, 0x6E	; 110
    1a1c:	cf 2e       	mov	r12, r31
    1a1e:	fc e0       	ldi	r31, 0x0C	; 12
    1a20:	df 2e       	mov	r13, r31
    1a22:	f0 2d       	mov	r31, r0
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;
    1a24:	51 2c       	mov	r5, r1
    1a26:	61 2c       	mov	r6, r1
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		entry = &nwkRouteDiscoveryTable[i];

		if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL) {
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
			restart = true;
    1a28:	77 24       	eor	r7, r7
    1a2a:	73 94       	inc	r7
    1a2c:	8e 01       	movw	r16, r28
	bool restart = false;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		entry = &nwkRouteDiscoveryTable[i];

		if (entry->timeout > NWK_ROUTE_DISCOVERY_TIMER_INTERVAL) {
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	85 36       	cpi	r24, 0x65	; 101
    1a34:	91 05       	cpc	r25, r1
    1a36:	30 f0       	brcs	.+12     	; 0x1a44 <nwkRouteDiscoveryTimerHandler+0x62>
			entry->timeout -= NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    1a38:	84 56       	subi	r24, 0x64	; 100
    1a3a:	91 09       	sbc	r25, r1
    1a3c:	9a 87       	std	Y+10, r25	; 0x0a
    1a3e:	89 87       	std	Y+9, r24	; 0x09
			restart = true;
    1a40:	47 2c       	mov	r4, r7
    1a42:	30 c0       	rjmp	.+96     	; 0x1aa4 <nwkRouteDiscoveryTimerHandler+0xc2>
		} else {
			entry->timeout = 0;
    1a44:	1a 86       	std	Y+10, r1	; 0x0a
    1a46:	19 86       	std	Y+9, r1	; 0x09

			if (entry->srcAddr == nwkIb.addr) {
    1a48:	28 81       	ld	r18, Y
    1a4a:	39 81       	ldd	r19, Y+1	; 0x01
    1a4c:	f6 01       	movw	r30, r12
    1a4e:	80 81       	ld	r24, Z
    1a50:	91 81       	ldd	r25, Z+1	; 0x01
    1a52:	28 17       	cp	r18, r24
    1a54:	39 07       	cpc	r19, r25
    1a56:	31 f5       	brne	.+76     	; 0x1aa4 <nwkRouteDiscoveryTimerHandler+0xc2>
				nwkRouteDiscoveryDone(entry,
						entry->reverseLinkQuality >
    1a58:	38 84       	ldd	r3, Y+8	; 0x08
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;
    1a5a:	85 2c       	mov	r8, r5
    1a5c:	96 2c       	mov	r9, r6
    1a5e:	1d c0       	rjmp	.+58     	; 0x1a9a <nwkRouteDiscoveryTimerHandler+0xb8>

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
    1a60:	f4 01       	movw	r30, r8
    1a62:	80 81       	ld	r24, Z
    1a64:	80 34       	cpi	r24, 0x40	; 64
    1a66:	c9 f4       	brne	.+50     	; 0x1a9a <nwkRouteDiscoveryTimerHandler+0xb8>
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    1a68:	f8 01       	movw	r30, r16
    1a6a:	22 81       	ldd	r18, Z+2	; 0x02
    1a6c:	33 81       	ldd	r19, Z+3	; 0x03
    1a6e:	f4 01       	movw	r30, r8
    1a70:	87 85       	ldd	r24, Z+15	; 0x0f
    1a72:	90 89       	ldd	r25, Z+16	; 0x10
    1a74:	28 17       	cp	r18, r24
    1a76:	39 07       	cpc	r19, r25
    1a78:	81 f4       	brne	.+32     	; 0x1a9a <nwkRouteDiscoveryTimerHandler+0xb8>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
    1a7a:	83 85       	ldd	r24, Z+11	; 0x0b
    1a7c:	83 fb       	bst	r24, 3
    1a7e:	88 27       	eor	r24, r24
    1a80:	80 f9       	bld	r24, 0
	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_RD_STATE_WAIT_FOR_ROUTE != frame->state) {
			continue;
		}

		if (entry->dstAddr != frame->header.nwkDstAddr ||
    1a82:	f8 01       	movw	r30, r16
    1a84:	94 81       	ldd	r25, Z+4	; 0x04
    1a86:	98 13       	cpse	r25, r24
    1a88:	08 c0       	rjmp	.+16     	; 0x1a9a <nwkRouteDiscoveryTimerHandler+0xb8>
				entry->multicast !=
				frame->header.nwkFcf.multicast) {
			continue;
		}

		if (status) {
    1a8a:	33 20       	and	r3, r3
    1a8c:	19 f0       	breq	.+6      	; 0x1a94 <nwkRouteDiscoveryTimerHandler+0xb2>
			nwkTxFrame(frame);
    1a8e:	c4 01       	movw	r24, r8
    1a90:	89 d6       	rcall	.+3346   	; 0x27a4 <nwkTxFrame>
    1a92:	03 c0       	rjmp	.+6      	; 0x1a9a <nwkRouteDiscoveryTimerHandler+0xb8>
		} else {
			nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    1a94:	61 e1       	ldi	r22, 0x11	; 17
    1a96:	c4 01       	movw	r24, r8
    1a98:	43 d7       	rcall	.+3718   	; 0x2920 <nwkTxConfirm>
static void nwkRouteDiscoveryDone(NwkRouteDiscoveryTableEntry_t *entry,
		bool status)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1a9a:	c4 01       	movw	r24, r8
    1a9c:	91 dd       	rcall	.-1246   	; 0x15c0 <nwkFrameNext>
    1a9e:	4c 01       	movw	r8, r24
    1aa0:	89 2b       	or	r24, r25
    1aa2:	f1 f6       	brne	.-68     	; 0x1a60 <nwkRouteDiscoveryTimerHandler+0x7e>
    1aa4:	2b 96       	adiw	r28, 0x0b	; 11
    1aa6:	ce 15       	cp	r28, r14
static void nwkRouteDiscoveryTimerHandler(SYS_Timer_t *timer)
{
	NwkRouteDiscoveryTableEntry_t *entry;
	bool restart = false;

	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
    1aa8:	df 05       	cpc	r29, r15
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <nwkRouteDiscoveryTimerHandler+0xcc>
    1aac:	bf cf       	rjmp	.-130    	; 0x1a2c <nwkRouteDiscoveryTimerHandler+0x4a>
    1aae:	44 20       	and	r4, r4
						0);
			}
		}
	}

	if (restart) {
    1ab0:	11 f0       	breq	.+4      	; 0x1ab6 <nwkRouteDiscoveryTimerHandler+0xd4>
		SYS_TimerStart(timer);
    1ab2:	c5 01       	movw	r24, r10
    1ab4:	78 da       	rcall	.-2832   	; 0xfa6 <SYS_TimerStart>
    1ab6:	df 91       	pop	r29
	}
}
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	cf 90       	pop	r12
    1ac6:	bf 90       	pop	r11
    1ac8:	af 90       	pop	r10
    1aca:	9f 90       	pop	r9
    1acc:	8f 90       	pop	r8
    1ace:	7f 90       	pop	r7
    1ad0:	6f 90       	pop	r6
    1ad2:	5f 90       	pop	r5
    1ad4:	4f 90       	pop	r4
    1ad6:	3f 90       	pop	r3
    1ad8:	08 95       	ret

00001ada <nwkRouteDiscoverySendRequest>:
    1ada:	ff 92       	push	r15

/*************************************************************************//**
*****************************************************************************/
static bool nwkRouteDiscoverySendRequest(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t lq)
{
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	8c 01       	movw	r16, r24
    1ae6:	f6 2e       	mov	r15, r22
	NwkFrame_t *req;
	NwkCommandRouteRequest_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    1ae8:	2a dd       	rcall	.-1452   	; 0x153e <nwkFrameAlloc>
    1aea:	ec 01       	movw	r28, r24
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	51 f1       	breq	.+84     	; 0x1b44 <nwkRouteDiscoverySendRequest+0x6a>
		return false;
	}

	nwkFrameCommandInit(req);
    1af0:	8c dd       	rcall	.-1256   	; 0x160a <nwkFrameCommandInit>
    1af2:	89 81       	ldd	r24, Y+1	; 0x01

	req->size += sizeof(NwkCommandRouteRequest_t);
    1af4:	89 5f       	subi	r24, 0xF9	; 249
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	fe 01       	movw	r30, r28
	req->tx.confirm = NULL;
    1afa:	e9 57       	subi	r30, 0x79	; 121
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	11 82       	std	Z+1, r1	; 0x01
    1b00:	10 82       	st	Z, r1
    1b02:	8b 85       	ldd	r24, Y+11	; 0x0b

	req->header.nwkFcf.linkLocal = 1;
    1b04:	84 60       	ori	r24, 0x04	; 4
    1b06:	8b 87       	std	Y+11, r24	; 0x0b
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
	req->header.nwkDstAddr = NWK_BROADCAST_ADDR;
    1b0a:	9f ef       	ldi	r25, 0xFF	; 255
    1b0c:	98 8b       	std	Y+16, r25	; 0x10
    1b0e:	8f 87       	std	Y+15, r24	; 0x0f
    1b10:	36 97       	sbiw	r30, 0x06	; 6

	command = (NwkCommandRouteRequest_t *)req->payload;
    1b12:	01 90       	ld	r0, Z+
    1b14:	f0 81       	ld	r31, Z
    1b16:	e0 2d       	mov	r30, r0
    1b18:	82 e0       	ldi	r24, 0x02	; 2
	command->id = NWK_COMMAND_ROUTE_REQUEST;
    1b1a:	80 83       	st	Z, r24
    1b1c:	d8 01       	movw	r26, r16
	command->srcAddr = entry->srcAddr;
    1b1e:	8d 91       	ld	r24, X+
    1b20:	9c 91       	ld	r25, X
    1b22:	11 97       	sbiw	r26, 0x01	; 1
    1b24:	92 83       	std	Z+2, r25	; 0x02
    1b26:	81 83       	std	Z+1, r24	; 0x01
    1b28:	12 96       	adiw	r26, 0x02	; 2
	command->dstAddr = entry->dstAddr;
    1b2a:	8d 91       	ld	r24, X+
    1b2c:	9c 91       	ld	r25, X
    1b2e:	13 97       	sbiw	r26, 0x03	; 3
    1b30:	94 83       	std	Z+4, r25	; 0x04
    1b32:	83 83       	std	Z+3, r24	; 0x03
    1b34:	14 96       	adiw	r26, 0x04	; 4
	command->multicast = entry->multicast;
    1b36:	8c 91       	ld	r24, X
    1b38:	85 83       	std	Z+5, r24	; 0x05
    1b3a:	f6 82       	std	Z+6, r15	; 0x06
	command->linkQuality = lq;

	nwkTxFrame(req);
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	32 d6       	rcall	.+3172   	; 0x27a4 <nwkTxFrame>
    1b40:	81 e0       	ldi	r24, 0x01	; 1

	return true;
    1b42:	01 c0       	rjmp	.+2      	; 0x1b46 <nwkRouteDiscoverySendRequest+0x6c>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
{
	NwkFrame_t *req;
	NwkCommandRouteRequest_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
		return false;
    1b46:	df 91       	pop	r29
	command->linkQuality = lq;

	nwkTxFrame(req);

	return true;
}
    1b48:	cf 91       	pop	r28
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	ff 90       	pop	r15
    1b50:	08 95       	ret

00001b52 <nwkRouteDiscoverySendReply>:
    1b52:	ef 92       	push	r14

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteDiscoverySendReply(NwkRouteDiscoveryTableEntry_t *entry,
		uint8_t flq, uint8_t rlq)
{
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	8c 01       	movw	r16, r24
    1b60:	e6 2e       	mov	r14, r22
    1b62:	f4 2e       	mov	r15, r20
	NwkFrame_t *req;
	NwkCommandRouteReply_t *command;

	if (NULL == (req = nwkFrameAlloc())) {
    1b64:	ec dc       	rcall	.-1576   	; 0x153e <nwkFrameAlloc>
    1b66:	ec 01       	movw	r28, r24
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	59 f1       	breq	.+86     	; 0x1bc2 <nwkRouteDiscoverySendReply+0x70>
		return;
	}

	nwkFrameCommandInit(req);
    1b6c:	4e dd       	rcall	.-1380   	; 0x160a <nwkFrameCommandInit>
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01

	req->size += sizeof(NwkCommandRouteReply_t);
    1b70:	88 5f       	subi	r24, 0xF8	; 248
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	fe 01       	movw	r30, r28
	req->tx.confirm = NULL;
    1b76:	e9 57       	subi	r30, 0x79	; 121
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	11 82       	std	Z+1, r1	; 0x01
    1b7c:	10 82       	st	Z, r1
    1b7e:	31 97       	sbiw	r30, 0x01	; 1
	req->tx.control = NWK_TX_CONTROL_DIRECT_LINK;
    1b80:	84 e0       	ldi	r24, 0x04	; 4
    1b82:	80 83       	st	Z, r24
    1b84:	d8 01       	movw	r26, r16

	req->header.nwkDstAddr = entry->senderAddr;
    1b86:	15 96       	adiw	r26, 0x05	; 5
    1b88:	8d 91       	ld	r24, X+
    1b8a:	9c 91       	ld	r25, X
    1b8c:	16 97       	sbiw	r26, 0x06	; 6
    1b8e:	98 8b       	std	Y+16, r25	; 0x10
    1b90:	8f 87       	std	Y+15, r24	; 0x0f
    1b92:	35 97       	sbiw	r30, 0x05	; 5

	command = (NwkCommandRouteReply_t *)req->payload;
    1b94:	01 90       	ld	r0, Z+
    1b96:	f0 81       	ld	r31, Z
    1b98:	e0 2d       	mov	r30, r0
    1b9a:	83 e0       	ldi	r24, 0x03	; 3
	command->id = NWK_COMMAND_ROUTE_REPLY;
    1b9c:	80 83       	st	Z, r24
    1b9e:	8d 91       	ld	r24, X+
	command->srcAddr = entry->srcAddr;
    1ba0:	9c 91       	ld	r25, X
    1ba2:	11 97       	sbiw	r26, 0x01	; 1
    1ba4:	92 83       	std	Z+2, r25	; 0x02
    1ba6:	81 83       	std	Z+1, r24	; 0x01
    1ba8:	12 96       	adiw	r26, 0x02	; 2
	command->dstAddr = entry->dstAddr;
    1baa:	8d 91       	ld	r24, X+
    1bac:	9c 91       	ld	r25, X
    1bae:	13 97       	sbiw	r26, 0x03	; 3
    1bb0:	94 83       	std	Z+4, r25	; 0x04
    1bb2:	83 83       	std	Z+3, r24	; 0x03
    1bb4:	14 96       	adiw	r26, 0x04	; 4
	command->multicast = entry->multicast;
    1bb6:	8c 91       	ld	r24, X
    1bb8:	85 83       	std	Z+5, r24	; 0x05
    1bba:	e6 82       	std	Z+6, r14	; 0x06
	command->forwardLinkQuality = flq;
    1bbc:	f7 82       	std	Z+7, r15	; 0x07
	command->reverseLinkQuality = rlq;

	nwkTxFrame(req);
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	f1 d5       	rcall	.+3042   	; 0x27a4 <nwkTxFrame>
    1bc2:	df 91       	pop	r29
}
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	ff 90       	pop	r15
    1bcc:	ef 90       	pop	r14
    1bce:	08 95       	ret

00001bd0 <nwkRouteDiscoveryInit>:
    1bd0:	ec ef       	ldi	r30, 0xFC	; 252
*  @brief Initializes the Route Discovery module
*****************************************************************************/
void nwkRouteDiscoveryInit(void)
{
	for (uint8_t i = 0; i < NWK_ROUTE_DISCOVERY_TABLE_SIZE; i++) {
		nwkRouteDiscoveryTable[i].timeout = 0;
    1bd2:	fa e0       	ldi	r31, 0x0A	; 10
    1bd4:	12 86       	std	Z+10, r1	; 0x0a
    1bd6:	11 86       	std	Z+9, r1	; 0x09
    1bd8:	15 8a       	std	Z+21, r1	; 0x15
    1bda:	14 8a       	std	Z+20, r1	; 0x14
    1bdc:	10 a2       	std	Z+32, r1	; 0x20
    1bde:	17 8e       	std	Z+31, r1	; 0x1f
    1be0:	13 a6       	std	Z+43, r1	; 0x2b
    1be2:	12 a6       	std	Z+42, r1	; 0x2a
    1be4:	16 aa       	std	Z+54, r1	; 0x36
    1be6:	15 aa       	std	Z+53, r1	; 0x35
	}

	nwkRouteDiscoveryTimer.interval = NWK_ROUTE_DISCOVERY_TIMER_INTERVAL;
    1be8:	ef ee       	ldi	r30, 0xEF	; 239
    1bea:	fa e0       	ldi	r31, 0x0A	; 10
    1bec:	84 e6       	ldi	r24, 0x64	; 100
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a0 e0       	ldi	r26, 0x00	; 0
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	86 83       	std	Z+6, r24	; 0x06
    1bf6:	97 83       	std	Z+7, r25	; 0x07
    1bf8:	a0 87       	std	Z+8, r26	; 0x08
    1bfa:	b1 87       	std	Z+9, r27	; 0x09
	nwkRouteDiscoveryTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1bfc:	12 86       	std	Z+10, r1	; 0x0a
	nwkRouteDiscoveryTimer.handler = nwkRouteDiscoveryTimerHandler;
    1bfe:	81 ef       	ldi	r24, 0xF1	; 241
    1c00:	9c e0       	ldi	r25, 0x0C	; 12
    1c02:	94 87       	std	Z+12, r25	; 0x0c
    1c04:	83 87       	std	Z+11, r24	; 0x0b
    1c06:	08 95       	ret

00001c08 <nwkRouteDiscoveryRequest>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	ec 01       	movw	r28, r24
	NwkFrameHeader_t *header = &frame->header;
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
			header->nwkFcf.multicast);
    1c0e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c10:	43 fb       	bst	r20, 3
    1c12:	44 27       	eor	r20, r20
    1c14:	40 f9       	bld	r20, 0
void nwkRouteDiscoveryRequest(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NwkRouteDiscoveryTableEntry_t *entry;

	entry = nwkRouteDiscoveryFindEntry(nwkIb.addr, header->nwkDstAddr,
    1c16:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c18:	78 89       	ldd	r23, Y+16	; 0x10
    1c1a:	80 91 6e 0c 	lds	r24, 0x0C6E	; 0x800c6e <nwkIb>
    1c1e:	90 91 6f 0c 	lds	r25, 0x0C6F	; 0x800c6f <nwkIb+0x1>
    1c22:	7e de       	rcall	.-772    	; 0x1920 <nwkRouteDiscoveryFindEntry>
			header->nwkFcf.multicast);

	if (entry) {
    1c24:	89 2b       	or	r24, r25
    1c26:	19 f0       	breq	.+6      	; 0x1c2e <nwkRouteDiscoveryRequest+0x26>
		frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    1c28:	80 e4       	ldi	r24, 0x40	; 64
    1c2a:	88 83       	st	Y, r24
		return;
	}

	entry = nwkRouteDiscoveryNewEntry();
    1c2c:	21 c0       	rjmp	.+66     	; 0x1c70 <nwkRouteDiscoveryRequest+0x68>
    1c2e:	a8 de       	rcall	.-688    	; 0x1980 <nwkRouteDiscoveryNewEntry>

	if (entry) {
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	d9 f0       	breq	.+54     	; 0x1c6a <nwkRouteDiscoveryRequest+0x62>
		entry->srcAddr = nwkIb.addr;
    1c34:	20 91 6e 0c 	lds	r18, 0x0C6E	; 0x800c6e <nwkIb>
    1c38:	30 91 6f 0c 	lds	r19, 0x0C6F	; 0x800c6f <nwkIb+0x1>
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	31 83       	std	Z+1, r19	; 0x01
    1c40:	20 83       	st	Z, r18
		entry->dstAddr = header->nwkDstAddr;
    1c42:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c44:	38 89       	ldd	r19, Y+16	; 0x10
    1c46:	33 83       	std	Z+3, r19	; 0x03
    1c48:	22 83       	std	Z+2, r18	; 0x02
		entry->multicast = header->nwkFcf.multicast;
    1c4a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c4c:	23 fb       	bst	r18, 3
    1c4e:	22 27       	eor	r18, r18
    1c50:	20 f9       	bld	r18, 0
    1c52:	24 83       	std	Z+4, r18	; 0x04
		entry->senderAddr = NWK_BROADCAST_ADDR;
    1c54:	2f ef       	ldi	r18, 0xFF	; 255
    1c56:	3f ef       	ldi	r19, 0xFF	; 255
    1c58:	36 83       	std	Z+6, r19	; 0x06

		if (nwkRouteDiscoverySendRequest(entry,
    1c5a:	25 83       	std	Z+5, r18	; 0x05
    1c5c:	6f ef       	ldi	r22, 0xFF	; 255
    1c5e:	3d df       	rcall	.-390    	; 0x1ada <nwkRouteDiscoverySendRequest>
    1c60:	88 23       	and	r24, r24
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <nwkRouteDiscoveryRequest+0x62>
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY)) {
			frame->state = NWK_RD_STATE_WAIT_FOR_ROUTE;
    1c64:	80 e4       	ldi	r24, 0x40	; 64
    1c66:	88 83       	st	Y, r24
			return;
		}
	}

	nwkTxConfirm(frame, NWK_NO_ROUTE_STATUS);
    1c68:	03 c0       	rjmp	.+6      	; 0x1c70 <nwkRouteDiscoveryRequest+0x68>
    1c6a:	61 e1       	ldi	r22, 0x11	; 17
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	58 d6       	rcall	.+3248   	; 0x2920 <nwkTxConfirm>
}
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	08 95       	ret

00001c76 <nwkRouteDiscoveryRequestReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryRequestReceived(NWK_DataInd_t *ind)
{
    1c76:	af 92       	push	r10
    1c78:	bf 92       	push	r11
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;

	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	19 96       	adiw	r26, 0x09	; 9
    1c8e:	2c 91       	ld	r18, X
    1c90:	19 97       	sbiw	r26, 0x09	; 9
    1c92:	27 30       	cpi	r18, 0x07	; 7
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <nwkRouteDiscoveryRequestReceived+0x22>
    1c96:	62 c0       	rjmp	.+196    	; 0x1d5c <nwkRouteDiscoveryRequestReceived+0xe6>

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryRequestReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteRequest_t *command
    1c98:	17 96       	adiw	r26, 0x07	; 7
    1c9a:	cd 91       	ld	r28, X+
    1c9c:	dc 91       	ld	r29, X
    1c9e:	18 97       	sbiw	r26, 0x08	; 8
	if (1 == command->multicast && NWK_GroupIsMember(command->dstAddr)) {
		reply = true;
	}
#endif

	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
    1ca0:	4d 81       	ldd	r20, Y+5	; 0x05
    1ca2:	41 11       	cpse	r20, r1
    1ca4:	67 c0       	rjmp	.+206    	; 0x1d74 <nwkRouteDiscoveryRequestReceived+0xfe>
    1ca6:	6b 81       	ldd	r22, Y+3	; 0x03
    1ca8:	7c 81       	ldd	r23, Y+4	; 0x04
    1caa:	20 91 6e 0c 	lds	r18, 0x0C6E	; 0x800c6e <nwkIb>
    1cae:	30 91 6f 0c 	lds	r19, 0x0C6F	; 0x800c6f <nwkIb+0x1>
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
    1cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb6:	2e 17       	cp	r18, r30
    1cb8:	3f 07       	cpc	r19, r31
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <nwkRouteDiscoveryRequestReceived+0x48>
    1cbc:	51 c0       	rjmp	.+162    	; 0x1d60 <nwkRouteDiscoveryRequestReceived+0xea>
		return true;
	}

	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
    1cbe:	62 17       	cp	r22, r18
    1cc0:	73 07       	cpc	r23, r19
    1cc2:	29 f0       	breq	.+10     	; 0x1cce <nwkRouteDiscoveryRequestReceived+0x58>
    1cc4:	33 23       	and	r19, r19
    1cc6:	0c f4       	brge	.+2      	; 0x1cca <nwkRouteDiscoveryRequestReceived+0x54>
    1cc8:	4d c0       	rjmp	.+154    	; 0x1d64 <nwkRouteDiscoveryRequestReceived+0xee>
    1cca:	b1 2c       	mov	r11, r1
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <nwkRouteDiscoveryRequestReceived+0x5c>
{
	NwkCommandRouteRequest_t *command
		= (NwkCommandRouteRequest_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;
    1cce:	bb 24       	eor	r11, r11
    1cd0:	b3 94       	inc	r11
    1cd2:	8c 01       	movw	r16, r24

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
	return ((uint16_t)lqa * lqb) >> 8;
    1cd4:	ce 80       	ldd	r12, Y+6	; 0x06
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	1a 96       	adiw	r26, 0x0a	; 10
    1cda:	8c 91       	ld	r24, X
    1cdc:	c8 9e       	mul	r12, r24
    1cde:	60 01       	movw	r12, r0
    1ce0:	11 24       	eor	r1, r1
		return true;
	}

	linkQuality = nwkRouteDiscoveryUpdateLq(command->linkQuality, ind->lqi);

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    1ce2:	6b 81       	ldd	r22, Y+3	; 0x03
    1ce4:	7c 81       	ldd	r23, Y+4	; 0x04
    1ce6:	cf 01       	movw	r24, r30
    1ce8:	1b de       	rcall	.-970    	; 0x1920 <nwkRouteDiscoveryFindEntry>
    1cea:	7c 01       	movw	r14, r24
			command->multicast);

	if (entry) {
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	29 f0       	breq	.+10     	; 0x1cfa <nwkRouteDiscoveryRequestReceived+0x84>
		if (linkQuality <= entry->forwardLinkQuality) {
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	87 81       	ldd	r24, Z+7	; 0x07
    1cf4:	8d 15       	cp	r24, r13
    1cf6:	28 f0       	brcs	.+10     	; 0x1d02 <nwkRouteDiscoveryRequestReceived+0x8c>
			return true;
		}
	} else {
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
    1cf8:	37 c0       	rjmp	.+110    	; 0x1d68 <nwkRouteDiscoveryRequestReceived+0xf2>
    1cfa:	42 de       	rcall	.-892    	; 0x1980 <nwkRouteDiscoveryNewEntry>
    1cfc:	7c 01       	movw	r14, r24
    1cfe:	89 2b       	or	r24, r25
    1d00:	a9 f1       	breq	.+106    	; 0x1d6c <nwkRouteDiscoveryRequestReceived+0xf6>
			return true;
		}
	}

	entry->srcAddr = command->srcAddr;
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	9a 81       	ldd	r25, Y+2	; 0x02
    1d06:	d7 01       	movw	r26, r14
    1d08:	11 96       	adiw	r26, 0x01	; 1
    1d0a:	9c 93       	st	X, r25
    1d0c:	8e 93       	st	-X, r24
	entry->dstAddr = command->dstAddr;
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	13 96       	adiw	r26, 0x03	; 3
    1d14:	9c 93       	st	X, r25
    1d16:	8e 93       	st	-X, r24
    1d18:	12 97       	sbiw	r26, 0x02	; 2
	entry->multicast = command->multicast;
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	14 96       	adiw	r26, 0x04	; 4
    1d1e:	8c 93       	st	X, r24
    1d20:	14 97       	sbiw	r26, 0x04	; 4
	entry->senderAddr = ind->srcAddr;
    1d22:	f8 01       	movw	r30, r16
    1d24:	80 81       	ld	r24, Z
    1d26:	91 81       	ldd	r25, Z+1	; 0x01
    1d28:	16 96       	adiw	r26, 0x06	; 6
    1d2a:	9c 93       	st	X, r25
    1d2c:	8e 93       	st	-X, r24
    1d2e:	15 97       	sbiw	r26, 0x05	; 5
	entry->forwardLinkQuality = linkQuality;
    1d30:	17 96       	adiw	r26, 0x07	; 7
    1d32:	dc 92       	st	X, r13

	if (reply) {
    1d34:	bb 20       	and	r11, r11
    1d36:	69 f0       	breq	.+26     	; 0x1d52 <nwkRouteDiscoveryRequestReceived+0xdc>
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
    1d38:	40 81       	ld	r20, Z
    1d3a:	51 81       	ldd	r21, Z+1	; 0x01
    1d3c:	2d 2d       	mov	r18, r13
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	9a 81       	ldd	r25, Y+2	; 0x02
    1d44:	fe dc       	rcall	.-1540   	; 0x1742 <nwkRouteUpdateEntry>
				linkQuality);
		nwkRouteDiscoverySendReply(entry, linkQuality,
    1d46:	4f ef       	ldi	r20, 0xFF	; 255
    1d48:	6d 2d       	mov	r22, r13
    1d4a:	c7 01       	movw	r24, r14
    1d4c:	02 df       	rcall	.-508    	; 0x1b52 <nwkRouteDiscoverySendReply>
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
	}

	return true;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
		nwkRouteUpdateEntry(command->srcAddr, 0, ind->srcAddr,
				linkQuality);
		nwkRouteDiscoverySendReply(entry, linkQuality,
				NWK_ROUTE_DISCOVERY_BEST_LINK_QUALITY);
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
    1d50:	1c c0       	rjmp	.+56     	; 0x1d8a <nwkRouteDiscoveryRequestReceived+0x114>
    1d52:	6d 2d       	mov	r22, r13
    1d54:	c7 01       	movw	r24, r14
    1d56:	c1 de       	rcall	.-638    	; 0x1ada <nwkRouteDiscoverySendRequest>
	}

	return true;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	17 c0       	rjmp	.+46     	; 0x1d8a <nwkRouteDiscoveryRequestReceived+0x114>
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;
	bool reply = false;

	if (sizeof(NwkCommandRouteRequest_t) != ind->size) {
		return false;
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	15 c0       	rjmp	.+42     	; 0x1d8a <nwkRouteDiscoveryRequestReceived+0x114>
	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
		return true;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	13 c0       	rjmp	.+38     	; 0x1d8a <nwkRouteDiscoveryRequestReceived+0x114>
	}

	if (false == reply && nwkIb.addr & NWK_ROUTE_NON_ROUTING) {
		return true;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	11 c0       	rjmp	.+34     	; 0x1d8a <nwkRouteDiscoveryRequestReceived+0x114>
	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
			command->multicast);

	if (entry) {
		if (linkQuality <= entry->forwardLinkQuality) {
			return true;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <nwkRouteDiscoveryRequestReceived+0x114>
		}
	} else {
		if (NULL == (entry = nwkRouteDiscoveryNewEntry())) {
			return true;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	0d c0       	rjmp	.+26     	; 0x1d8a <nwkRouteDiscoveryRequestReceived+0x114>
	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
		return true;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	0b c0       	rjmp	.+22     	; 0x1d8a <nwkRouteDiscoveryRequestReceived+0x114>

	if (0 == command->multicast && command->dstAddr == nwkIb.addr) {
		reply = true;
	}

	if (command->srcAddr == nwkIb.addr) {
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	20 91 6e 0c 	lds	r18, 0x0C6E	; 0x800c6e <nwkIb>
    1d7c:	30 91 6f 0c 	lds	r19, 0x0C6F	; 0x800c6f <nwkIb+0x1>
    1d80:	e2 17       	cp	r30, r18
    1d82:	f3 07       	cpc	r31, r19
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <nwkRouteDiscoveryRequestReceived+0x112>
    1d86:	9e cf       	rjmp	.-196    	; 0x1cc4 <nwkRouteDiscoveryRequestReceived+0x4e>
    1d88:	f3 cf       	rjmp	.-26     	; 0x1d70 <nwkRouteDiscoveryRequestReceived+0xfa>
	} else {
		nwkRouteDiscoverySendRequest(entry, linkQuality);
	}

	return true;
}
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	df 90       	pop	r13
    1d98:	cf 90       	pop	r12
    1d9a:	bf 90       	pop	r11
    1d9c:	af 90       	pop	r10
    1d9e:	08 95       	ret

00001da0 <nwkRouteDiscoveryReplyReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryReplyReceived(NWK_DataInd_t *ind)
{
    1da0:	cf 92       	push	r12
    1da2:	df 92       	push	r13
    1da4:	ef 92       	push	r14
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
    1db0:	fc 01       	movw	r30, r24
    1db2:	21 85       	ldd	r18, Z+9	; 0x09
    1db4:	28 30       	cpi	r18, 0x08	; 8
    1db6:	09 f0       	breq	.+2      	; 0x1dba <nwkRouteDiscoveryReplyReceived+0x1a>
    1db8:	42 c0       	rjmp	.+132    	; 0x1e3e <nwkRouteDiscoveryReplyReceived+0x9e>
    1dba:	8c 01       	movw	r16, r24

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteDiscoveryReplyReceived(NWK_DataInd_t *ind)
{
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
    1dbc:	c7 81       	ldd	r28, Z+7	; 0x07
    1dbe:	d0 85       	ldd	r29, Z+8	; 0x08

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
		return false;
	}

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
    1dc0:	6b 81       	ldd	r22, Y+3	; 0x03
    1dc2:	7c 81       	ldd	r23, Y+4	; 0x04
    1dc4:	4d 81       	ldd	r20, Y+5	; 0x05
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dca:	aa dd       	rcall	.-1196   	; 0x1920 <nwkRouteDiscoveryFindEntry>
    1dcc:	7c 01       	movw	r14, r24
			command->multicast);

	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
			ind->lqi);

	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
    1dce:	89 2b       	or	r24, r25
    1dd0:	c1 f1       	breq	.+112    	; 0x1e42 <nwkRouteDiscoveryReplyReceived+0xa2>
    1dd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd4:	f7 01       	movw	r30, r14
    1dd6:	90 85       	ldd	r25, Z+8	; 0x08
    1dd8:	98 17       	cp	r25, r24
    1dda:	a8 f5       	brcc	.+106    	; 0x1e46 <nwkRouteDiscoveryReplyReceived+0xa6>
	}

	entry = nwkRouteDiscoveryFindEntry(command->srcAddr, command->dstAddr,
			command->multicast);

	linkQuality = nwkRouteDiscoveryUpdateLq(command->reverseLinkQuality,
    1ddc:	f8 01       	movw	r30, r16
    1dde:	c2 84       	ldd	r12, Z+10	; 0x0a
    1de0:	9f 81       	ldd	r25, Y+7	; 0x07
			ind->lqi);

	if (entry && command->forwardLinkQuality > entry->reverseLinkQuality) {
		entry->reverseLinkQuality = command->forwardLinkQuality;
    1de2:	f7 01       	movw	r30, r14
    1de4:	80 87       	std	Z+8, r24	; 0x08

		if (command->srcAddr == nwkIb.addr) {
    1de6:	49 81       	ldd	r20, Y+1	; 0x01
    1de8:	5a 81       	ldd	r21, Y+2	; 0x02
    1dea:	20 91 6e 0c 	lds	r18, 0x0C6E	; 0x800c6e <nwkIb>
    1dee:	30 91 6f 0c 	lds	r19, 0x0C6F	; 0x800c6f <nwkIb+0x1>
    1df2:	42 17       	cp	r20, r18
    1df4:	53 07       	cpc	r21, r19
    1df6:	51 f4       	brne	.+20     	; 0x1e0c <nwkRouteDiscoveryReplyReceived+0x6c>
			nwkRouteUpdateEntry(command->dstAddr,
    1df8:	f8 01       	movw	r30, r16
    1dfa:	40 81       	ld	r20, Z
    1dfc:	51 81       	ldd	r21, Z+1	; 0x01
    1dfe:	2e 81       	ldd	r18, Y+6	; 0x06
    1e00:	6d 81       	ldd	r22, Y+5	; 0x05
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	9c 81       	ldd	r25, Y+4	; 0x04
    1e06:	9d dc       	rcall	.-1734   	; 0x1742 <nwkRouteUpdateEntry>
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	1e c0       	rjmp	.+60     	; 0x1e48 <nwkRouteDiscoveryReplyReceived+0xa8>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkRouteDiscoveryUpdateLq(uint8_t lqa, uint8_t lqb)
{
	return ((uint16_t)lqa * lqb) >> 8;
    1e0c:	9c 9d       	mul	r25, r12
    1e0e:	60 01       	movw	r12, r0
    1e10:	11 24       	eor	r1, r1
			nwkRouteUpdateEntry(command->dstAddr,
					command->multicast, ind->srcAddr,
					command->forwardLinkQuality);
			/* nwkRouteDiscoveryDone(entry, true); */
		} else {
			nwkRouteUpdateEntry(command->dstAddr,
    1e12:	f8 01       	movw	r30, r16
    1e14:	40 81       	ld	r20, Z
    1e16:	51 81       	ldd	r21, Z+1	; 0x01
    1e18:	2d 2d       	mov	r18, r13
    1e1a:	6d 81       	ldd	r22, Y+5	; 0x05
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	90 dc       	rcall	.-1760   	; 0x1742 <nwkRouteUpdateEntry>
					command->multicast, ind->srcAddr,
					linkQuality);
			nwkRouteUpdateEntry(command->srcAddr, 0,
    1e22:	f7 01       	movw	r30, r14
    1e24:	45 81       	ldd	r20, Z+5	; 0x05
    1e26:	56 81       	ldd	r21, Z+6	; 0x06
    1e28:	27 81       	ldd	r18, Z+7	; 0x07
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	88 dc       	rcall	.-1776   	; 0x1742 <nwkRouteUpdateEntry>
					entry->senderAddr,
					entry->forwardLinkQuality);
			nwkRouteDiscoverySendReply(entry,
    1e32:	4d 2d       	mov	r20, r13
    1e34:	6e 81       	ldd	r22, Y+6	; 0x06
    1e36:	c7 01       	movw	r24, r14
    1e38:	8c de       	rcall	.-744    	; 0x1b52 <nwkRouteDiscoverySendReply>
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    1e3c:	05 c0       	rjmp	.+10     	; 0x1e48 <nwkRouteDiscoveryReplyReceived+0xa8>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
	NwkCommandRouteReply_t *command = (NwkCommandRouteReply_t *)ind->data;
	NwkRouteDiscoveryTableEntry_t *entry;
	uint8_t linkQuality;

	if (sizeof(NwkCommandRouteReply_t) != ind->size) {
		return false;
    1e40:	03 c0       	rjmp	.+6      	; 0x1e48 <nwkRouteDiscoveryReplyReceived+0xa8>
    1e42:	81 e0       	ldi	r24, 0x01	; 1
					command->forwardLinkQuality,
					linkQuality);
		}
	}

	return true;
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <nwkRouteDiscoveryReplyReceived+0xa8>
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	df 91       	pop	r29
}
    1e4a:	cf 91       	pop	r28
    1e4c:	1f 91       	pop	r17
    1e4e:	0f 91       	pop	r16
    1e50:	ff 90       	pop	r15
    1e52:	ef 90       	pop	r14
    1e54:	df 90       	pop	r13
    1e56:	cf 90       	pop	r12
    1e58:	08 95       	ret

00001e5a <nwkRxSeriveDataInd>:
    1e5a:	dc 01       	movw	r26, r24

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
	nwkRxAckControl = control;
    1e5c:	19 96       	adiw	r26, 0x09	; 9
    1e5e:	2c 91       	ld	r18, X
    1e60:	19 97       	sbiw	r26, 0x09	; 9
    1e62:	22 23       	and	r18, r18
    1e64:	a9 f0       	breq	.+42     	; 0x1e90 <nwkRxSeriveDataInd+0x36>
    1e66:	17 96       	adiw	r26, 0x07	; 7
    1e68:	ed 91       	ld	r30, X+
    1e6a:	fc 91       	ld	r31, X
    1e6c:	18 97       	sbiw	r26, 0x08	; 8
    1e6e:	20 81       	ld	r18, Z
    1e70:	21 30       	cpi	r18, 0x01	; 1
    1e72:	41 f0       	breq	.+16     	; 0x1e84 <nwkRxSeriveDataInd+0x2a>
    1e74:	28 f0       	brcs	.+10     	; 0x1e80 <nwkRxSeriveDataInd+0x26>
    1e76:	22 30       	cpi	r18, 0x02	; 2
    1e78:	39 f0       	breq	.+14     	; 0x1e88 <nwkRxSeriveDataInd+0x2e>
    1e7a:	23 30       	cpi	r18, 0x03	; 3
    1e7c:	39 f0       	breq	.+14     	; 0x1e8c <nwkRxSeriveDataInd+0x32>
    1e7e:	0a c0       	rjmp	.+20     	; 0x1e94 <nwkRxSeriveDataInd+0x3a>
    1e80:	29 c5       	rjmp	.+2642   	; 0x28d4 <nwkTxAckReceived>
    1e82:	08 95       	ret
    1e84:	3e cd       	rjmp	.-1412   	; 0x1902 <nwkRouteErrorReceived>
    1e86:	08 95       	ret
    1e88:	f6 ce       	rjmp	.-532    	; 0x1c76 <nwkRouteDiscoveryRequestReceived>
    1e8a:	08 95       	ret
    1e8c:	89 cf       	rjmp	.-238    	; 0x1da0 <nwkRouteDiscoveryReplyReceived>
    1e8e:	08 95       	ret
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	08 95       	ret
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	08 95       	ret

00001e98 <nwkRxDuplicateRejectionTimerHandler>:
    1e98:	bc 01       	movw	r22, r24
    1e9a:	e5 e4       	ldi	r30, 0x45	; 69
    1e9c:	fb e0       	ldi	r31, 0x0B	; 11
    1e9e:	2f e3       	ldi	r18, 0x3F	; 63
    1ea0:	3c e0       	ldi	r19, 0x0C	; 12
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	51 e0       	ldi	r21, 0x01	; 1
    1ea6:	90 81       	ld	r25, Z
    1ea8:	99 23       	and	r25, r25
    1eaa:	19 f0       	breq	.+6      	; 0x1eb2 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    1eac:	91 50       	subi	r25, 0x01	; 1
    1eae:	90 83       	st	Z, r25
    1eb0:	45 2f       	mov	r20, r21
    1eb2:	35 96       	adiw	r30, 0x05	; 5
    1eb4:	e2 17       	cp	r30, r18
    1eb6:	f3 07       	cpc	r31, r19
    1eb8:	b1 f7       	brne	.-20     	; 0x1ea6 <nwkRxDuplicateRejectionTimerHandler+0xe>
    1eba:	44 23       	and	r20, r20
    1ebc:	11 f0       	breq	.+4      	; 0x1ec2 <nwkRxDuplicateRejectionTimerHandler+0x2a>
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	72 c8       	rjmp	.-3868   	; 0xfa6 <SYS_TimerStart>
    1ec2:	08 95       	ret

00001ec4 <nwkRxInit>:
    1ec4:	e5 e4       	ldi	r30, 0x45	; 69
    1ec6:	fb e0       	ldi	r31, 0x0B	; 11
    1ec8:	8f e3       	ldi	r24, 0x3F	; 63
    1eca:	9c e0       	ldi	r25, 0x0C	; 12
    1ecc:	10 82       	st	Z, r1
    1ece:	35 96       	adiw	r30, 0x05	; 5
    1ed0:	e8 17       	cp	r30, r24
    1ed2:	f9 07       	cpc	r31, r25
    1ed4:	d9 f7       	brne	.-10     	; 0x1ecc <nwkRxInit+0x8>
    1ed6:	e3 e3       	ldi	r30, 0x33	; 51
    1ed8:	fb e0       	ldi	r31, 0x0B	; 11
    1eda:	84 e6       	ldi	r24, 0x64	; 100
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a0 e0       	ldi	r26, 0x00	; 0
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	86 83       	std	Z+6, r24	; 0x06
    1ee4:	97 83       	std	Z+7, r25	; 0x07
    1ee6:	a0 87       	std	Z+8, r26	; 0x08
    1ee8:	b1 87       	std	Z+9, r27	; 0x09
    1eea:	12 86       	std	Z+10, r1	; 0x0a
    1eec:	8c e4       	ldi	r24, 0x4C	; 76
    1eee:	9f e0       	ldi	r25, 0x0F	; 15
    1ef0:	94 87       	std	Z+12, r25	; 0x0c
    1ef2:	83 87       	std	Z+11, r24	; 0x0b
    1ef4:	6d e2       	ldi	r22, 0x2D	; 45
    1ef6:	7f e0       	ldi	r23, 0x0F	; 15
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	0e ca       	rjmp	.-3044   	; 0x1318 <NWK_OpenEndpoint>
    1efc:	08 95       	ret

00001efe <PHY_DataInd>:
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	dc 01       	movw	r26, r24
    1f04:	ed 91       	ld	r30, X+
    1f06:	fc 91       	ld	r31, X
    1f08:	11 97       	sbiw	r26, 0x01	; 1
    1f0a:	21 81       	ldd	r18, Z+1	; 0x01
    1f0c:	28 38       	cpi	r18, 0x88	; 136
    1f0e:	f1 f4       	brne	.+60     	; 0x1f4c <PHY_DataInd+0x4e>
    1f10:	20 81       	ld	r18, Z
    1f12:	2f 7d       	andi	r18, 0xDF	; 223
    1f14:	21 34       	cpi	r18, 0x41	; 65
    1f16:	d1 f4       	brne	.+52     	; 0x1f4c <PHY_DataInd+0x4e>
    1f18:	12 96       	adiw	r26, 0x02	; 2
    1f1a:	2c 91       	ld	r18, X
    1f1c:	20 31       	cpi	r18, 0x10	; 16
    1f1e:	b0 f0       	brcs	.+44     	; 0x1f4c <PHY_DataInd+0x4e>
    1f20:	ec 01       	movw	r28, r24
    1f22:	0d db       	rcall	.-2534   	; 0x153e <nwkFrameAlloc>
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	91 f0       	breq	.+36     	; 0x1f4c <PHY_DataInd+0x4e>
    1f28:	20 e2       	ldi	r18, 0x20	; 32
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	20 83       	st	Z, r18
    1f2e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f30:	21 83       	std	Z+1, r18	; 0x01
    1f32:	2b 81       	ldd	r18, Y+3	; 0x03
    1f34:	ed 57       	subi	r30, 0x7D	; 125
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	20 83       	st	Z, r18
    1f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3c:	31 96       	adiw	r30, 0x01	; 1
    1f3e:	20 83       	st	Z, r18
    1f40:	4a 81       	ldd	r20, Y+2	; 0x02
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	68 81       	ld	r22, Y
    1f46:	79 81       	ldd	r23, Y+1	; 0x01
    1f48:	02 96       	adiw	r24, 0x02	; 2
    1f4a:	37 d6       	rcall	.+3182   	; 0x2bba <memcpy>
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	08 95       	ret

00001f52 <nwkRxDecryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkRxDecryptConf(NwkFrame_t *frame, bool status)
{
	if (status) {
    1f52:	66 23       	and	r22, r22
    1f54:	21 f0       	breq	.+8      	; 0x1f5e <nwkRxDecryptConf+0xc>
		frame->state = NWK_RX_STATE_INDICATE;
    1f56:	22 e2       	ldi	r18, 0x22	; 34
    1f58:	fc 01       	movw	r30, r24
    1f5a:	20 83       	st	Z, r18
    1f5c:	08 95       	ret
	} else {
		frame->state = NWK_RX_STATE_FINISH;
    1f5e:	24 e2       	ldi	r18, 0x24	; 36
    1f60:	fc 01       	movw	r30, r24
    1f62:	20 83       	st	Z, r18
    1f64:	08 95       	ret

00001f66 <nwkRxTaskHandler>:

/*************************************************************************//**
*  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1f66:	2f 92       	push	r2
    1f68:	3f 92       	push	r3
    1f6a:	4f 92       	push	r4
    1f6c:	5f 92       	push	r5
    1f6e:	6f 92       	push	r6
    1f70:	7f 92       	push	r7
    1f72:	8f 92       	push	r8
    1f74:	9f 92       	push	r9
    1f76:	af 92       	push	r10
    1f78:	bf 92       	push	r11
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	2c 97       	sbiw	r28, 0x0c	; 12
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
	NwkFrame_t *frame = NULL;
    1f9a:	00 e0       	ldi	r16, 0x00	; 0
    1f9c:	10 e0       	ldi	r17, 0x00	; 0

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    1f9e:	0f 2e       	mov	r0, r31
    1fa0:	f4 e2       	ldi	r31, 0x24	; 36
    1fa2:	bf 2e       	mov	r11, r31
    1fa4:	f0 2d       	mov	r31, r0

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    1fa6:	0f 2e       	mov	r0, r31
    1fa8:	fe e6       	ldi	r31, 0x6E	; 110
    1faa:	ef 2e       	mov	r14, r31
    1fac:	fc e0       	ldi	r31, 0x0C	; 12
    1fae:	ff 2e       	mov	r15, r31
    1fb0:	f0 2d       	mov	r31, r0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
			nwkIb.addr == frame->header.nwkDstAddr &&
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    1fb2:	44 24       	eor	r4, r4
    1fb4:	43 94       	inc	r4
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    1fb6:	68 94       	set
    1fb8:	77 24       	eor	r7, r7
    1fba:	74 f8       	bld	r7, 4
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    1fbc:	68 94       	set
    1fbe:	66 24       	eor	r6, r6
    1fc0:	63 f8       	bld	r6, 3
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    1fc2:	68 94       	set
    1fc4:	55 24       	eor	r5, r5
    1fc6:	52 f8       	bld	r5, 2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1fc8:	21 2c       	mov	r2, r1
    1fca:	31 2c       	mov	r3, r1
	}

	freeEntry->src = header->nwkSrcAddr;
	freeEntry->seq = header->nwkSeq;
	freeEntry->mask = 1;
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1fcc:	0f 2e       	mov	r0, r31
    1fce:	f5 e1       	ldi	r31, 0x15	; 21
    1fd0:	af 2e       	mov	r10, r31
    1fd2:	f0 2d       	mov	r31, r0
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    1fd4:	cc 24       	eor	r12, r12
    1fd6:	c3 94       	inc	r12
    1fd8:	d1 2c       	mov	r13, r1
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    1fda:	f0 c1       	rjmp	.+992    	; 0x23bc <nwkRxTaskHandler+0x456>
		switch (frame->state) {
    1fdc:	d8 01       	movw	r26, r16
    1fde:	8c 91       	ld	r24, X
    1fe0:	82 32       	cpi	r24, 0x22	; 34
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <nwkRxTaskHandler+0x80>
    1fe4:	1b c1       	rjmp	.+566    	; 0x221c <nwkRxTaskHandler+0x2b6>
    1fe6:	30 f4       	brcc	.+12     	; 0x1ff4 <nwkRxTaskHandler+0x8e>
    1fe8:	80 32       	cpi	r24, 0x20	; 32
    1fea:	59 f0       	breq	.+22     	; 0x2002 <nwkRxTaskHandler+0x9c>
    1fec:	81 32       	cpi	r24, 0x21	; 33
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <nwkRxTaskHandler+0x8c>
    1ff0:	11 c1       	rjmp	.+546    	; 0x2214 <nwkRxTaskHandler+0x2ae>
    1ff2:	e4 c1       	rjmp	.+968    	; 0x23bc <nwkRxTaskHandler+0x456>
    1ff4:	83 32       	cpi	r24, 0x23	; 35
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <nwkRxTaskHandler+0x94>
    1ff8:	dc c1       	rjmp	.+952    	; 0x23b2 <nwkRxTaskHandler+0x44c>
    1ffa:	84 32       	cpi	r24, 0x24	; 36
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <nwkRxTaskHandler+0x9a>
    1ffe:	dc c1       	rjmp	.+952    	; 0x23b8 <nwkRxTaskHandler+0x452>
    2000:	dd c1       	rjmp	.+954    	; 0x23bc <nwkRxTaskHandler+0x456>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;

	frame->state = NWK_RX_STATE_FINISH;
    2002:	f8 01       	movw	r30, r16
    2004:	b0 82       	st	Z, r11
	if (header->nwkFcf.multicast && header->nwkFcf.ackRequest) {
		return;
	}

#else
	if (header->nwkFcf.multicast) {
    2006:	83 85       	ldd	r24, Z+11	; 0x0b
    2008:	83 fd       	sbrc	r24, 3
    200a:	d8 c1       	rjmp	.+944    	; 0x23bc <nwkRxTaskHandler+0x456>
		return;
	}
#endif

	if (NWK_BROADCAST_PANID == header->macDstPanId) {
    200c:	25 81       	ldd	r18, Z+5	; 0x05
    200e:	36 81       	ldd	r19, Z+6	; 0x06
    2010:	2f 3f       	cpi	r18, 0xFF	; 255
    2012:	3f 4f       	sbci	r19, 0xFF	; 255
    2014:	c9 f4       	brne	.+50     	; 0x2048 <nwkRxTaskHandler+0xe2>
		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    2016:	d8 01       	movw	r26, r16
    2018:	1f 96       	adiw	r26, 0x0f	; 15
    201a:	2d 91       	ld	r18, X+
    201c:	3c 91       	ld	r19, X
    201e:	50 97       	sbiw	r26, 0x10	; 16
    2020:	f7 01       	movw	r30, r14
    2022:	40 81       	ld	r20, Z
    2024:	51 81       	ldd	r21, Z+1	; 0x01
    2026:	42 17       	cp	r20, r18
    2028:	53 07       	cpc	r21, r19
    202a:	21 f0       	breq	.+8      	; 0x2034 <nwkRxTaskHandler+0xce>
    202c:	2f 3f       	cpi	r18, 0xFF	; 255
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	09 f0       	breq	.+2      	; 0x2034 <nwkRxTaskHandler+0xce>
    2032:	c4 c1       	rjmp	.+904    	; 0x23bc <nwkRxTaskHandler+0x456>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    2034:	81 ff       	sbrs	r24, 1
    2036:	04 c0       	rjmp	.+8      	; 0x2040 <nwkRxTaskHandler+0xda>
				frame->state = NWK_RX_STATE_DECRYPT;
    2038:	e1 e2       	ldi	r30, 0x21	; 33
    203a:	d8 01       	movw	r26, r16
    203c:	ec 93       	st	X, r30
    203e:	be c1       	rjmp	.+892    	; 0x23bc <nwkRxTaskHandler+0x456>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    2040:	e2 e2       	ldi	r30, 0x22	; 34
    2042:	d8 01       	movw	r26, r16
    2044:	ec 93       	st	X, r30
    2046:	ba c1       	rjmp	.+884    	; 0x23bc <nwkRxTaskHandler+0x456>
	if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi)) {
		return;
	}
#endif

	if (NWK_BROADCAST_ADDR == header->nwkDstAddr &&
    2048:	d8 01       	movw	r26, r16
    204a:	1f 96       	adiw	r26, 0x0f	; 15
    204c:	2d 91       	ld	r18, X+
    204e:	3c 91       	ld	r19, X
    2050:	50 97       	sbiw	r26, 0x10	; 16
    2052:	2f 3f       	cpi	r18, 0xFF	; 255
    2054:	3f 4f       	sbci	r19, 0xFF	; 255
    2056:	11 f4       	brne	.+4      	; 0x205c <nwkRxTaskHandler+0xf6>
    2058:	80 fd       	sbrc	r24, 0
    205a:	b0 c1       	rjmp	.+864    	; 0x23bc <nwkRxTaskHandler+0x456>
			header->nwkFcf.ackRequest) {
		return;
	}

	if (nwkIb.addr == header->nwkSrcAddr) {
    205c:	f7 01       	movw	r30, r14
    205e:	20 81       	ld	r18, Z
    2060:	31 81       	ldd	r19, Z+1	; 0x01
    2062:	d8 01       	movw	r26, r16
    2064:	1d 96       	adiw	r26, 0x0d	; 13
    2066:	8d 91       	ld	r24, X+
    2068:	9c 91       	ld	r25, X
    206a:	1e 97       	sbiw	r26, 0x0e	; 14
    206c:	28 17       	cp	r18, r24
    206e:	39 07       	cpc	r19, r25
    2070:	09 f4       	brne	.+2      	; 0x2074 <nwkRxTaskHandler+0x10e>
    2072:	a4 c1       	rjmp	.+840    	; 0x23bc <nwkRxTaskHandler+0x456>
		return;
	}

#ifdef NWK_ENABLE_ROUTING
	nwkRouteFrameReceived(frame);
    2074:	c8 01       	movw	r24, r16
    2076:	8e db       	rcall	.-2276   	; 0x1794 <nwkRouteFrameReceived>
    2078:	e1 e4       	ldi	r30, 0x41	; 65
    207a:	fb e0       	ldi	r31, 0x0B	; 11
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    2080:	82 2c       	mov	r8, r2
    2082:	93 2c       	mov	r9, r3

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
		entry = &nwkRxDuplicateRejectionTable[i];
    2084:	9c 01       	movw	r18, r24

		if (entry->ttl && header->nwkSrcAddr == entry->src) {
    2086:	44 81       	ldd	r20, Z+4	; 0x04
    2088:	44 23       	and	r20, r20
    208a:	09 f4       	brne	.+2      	; 0x208e <nwkRxTaskHandler+0x128>
    208c:	74 c0       	rjmp	.+232    	; 0x2176 <nwkRxTaskHandler+0x210>
    208e:	d8 01       	movw	r26, r16
    2090:	1d 96       	adiw	r26, 0x0d	; 13
    2092:	6d 91       	ld	r22, X+
    2094:	7c 91       	ld	r23, X
    2096:	1e 97       	sbiw	r26, 0x0e	; 14
    2098:	40 81       	ld	r20, Z
    209a:	51 81       	ldd	r21, Z+1	; 0x01
    209c:	64 17       	cp	r22, r20
    209e:	75 07       	cpc	r23, r21
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <nwkRxTaskHandler+0x13e>
    20a2:	6a c0       	rjmp	.+212    	; 0x2178 <nwkRxTaskHandler+0x212>
			uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    20a4:	1c 96       	adiw	r26, 0x0c	; 12
    20a6:	8c 91       	ld	r24, X
    20a8:	1c 97       	sbiw	r26, 0x0c	; 12
    20aa:	f9 01       	movw	r30, r18
    20ac:	ee 0f       	add	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	ee 0f       	add	r30, r30
    20b2:	ff 1f       	adc	r31, r31
    20b4:	e2 0f       	add	r30, r18
    20b6:	f3 1f       	adc	r31, r19
    20b8:	ef 5b       	subi	r30, 0xBF	; 191
    20ba:	f4 4f       	sbci	r31, 0xF4	; 244
    20bc:	92 81       	ldd	r25, Z+2	; 0x02
    20be:	98 1b       	sub	r25, r24

			if (diff < 8) {
    20c0:	98 30       	cpi	r25, 0x08	; 8
    20c2:	08 f0       	brcs	.+2      	; 0x20c6 <nwkRxTaskHandler+0x160>
    20c4:	3e c0       	rjmp	.+124    	; 0x2142 <nwkRxTaskHandler+0x1dc>
				if (entry->mask & (1 << diff)) {
    20c6:	f9 01       	movw	r30, r18
    20c8:	ee 0f       	add	r30, r30
    20ca:	ff 1f       	adc	r31, r31
    20cc:	ee 0f       	add	r30, r30
    20ce:	ff 1f       	adc	r31, r31
    20d0:	e2 0f       	add	r30, r18
    20d2:	f3 1f       	adc	r31, r19
    20d4:	ef 5b       	subi	r30, 0xBF	; 191
    20d6:	f4 4f       	sbci	r31, 0xF4	; 244
    20d8:	83 81       	ldd	r24, Z+3	; 0x03
    20da:	48 2f       	mov	r20, r24
    20dc:	50 e0       	ldi	r21, 0x00	; 0
    20de:	09 2e       	mov	r0, r25
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <nwkRxTaskHandler+0x180>
    20e2:	55 95       	asr	r21
    20e4:	47 95       	ror	r20
    20e6:	0a 94       	dec	r0
    20e8:	e2 f7       	brpl	.-8      	; 0x20e2 <nwkRxTaskHandler+0x17c>
    20ea:	40 ff       	sbrs	r20, 0
    20ec:	17 c0       	rjmp	.+46     	; 0x211c <nwkRxTaskHandler+0x1b6>
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
    20ee:	f7 01       	movw	r30, r14
    20f0:	20 81       	ld	r18, Z
    20f2:	31 81       	ldd	r19, Z+1	; 0x01
    20f4:	17 96       	adiw	r26, 0x07	; 7
    20f6:	8d 91       	ld	r24, X+
    20f8:	9c 91       	ld	r25, X
    20fa:	18 97       	sbiw	r26, 0x08	; 8
    20fc:	28 17       	cp	r18, r24
    20fe:	39 07       	cpc	r19, r25
    2100:	09 f0       	breq	.+2      	; 0x2104 <nwkRxTaskHandler+0x19e>
    2102:	5c c1       	rjmp	.+696    	; 0x23bc <nwkRxTaskHandler+0x456>
						nwkRouteRemove(
								header->nwkDstAddr,
								header->nwkFcf.multicast);
    2104:	1b 96       	adiw	r26, 0x0b	; 11
    2106:	6c 91       	ld	r22, X
    2108:	1b 97       	sbiw	r26, 0x0b	; 11
    210a:	63 fb       	bst	r22, 3
    210c:	66 27       	eor	r22, r22
    210e:	60 f9       	bld	r22, 0

			if (diff < 8) {
				if (entry->mask & (1 << diff)) {
	#ifdef NWK_ENABLE_ROUTING
					if (nwkIb.addr == header->macDstAddr) {
						nwkRouteRemove(
    2110:	1f 96       	adiw	r26, 0x0f	; 15
    2112:	8d 91       	ld	r24, X+
    2114:	9c 91       	ld	r25, X
    2116:	50 97       	sbiw	r26, 0x10	; 16
    2118:	38 db       	rcall	.-2448   	; 0x178a <nwkRouteRemove>
    211a:	50 c1       	rjmp	.+672    	; 0x23bc <nwkRxTaskHandler+0x456>
					}
	#endif
					return true;
				}

				entry->mask |= (1 << diff);
    211c:	f9 01       	movw	r30, r18
    211e:	ee 0f       	add	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	ee 0f       	add	r30, r30
    2124:	ff 1f       	adc	r31, r31
    2126:	2e 0f       	add	r18, r30
    2128:	3f 1f       	adc	r19, r31
    212a:	f9 01       	movw	r30, r18
    212c:	ef 5b       	subi	r30, 0xBF	; 191
    212e:	f4 4f       	sbci	r31, 0xF4	; 244
    2130:	96 01       	movw	r18, r12
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <nwkRxTaskHandler+0x1d2>
    2134:	22 0f       	add	r18, r18
    2136:	33 1f       	adc	r19, r19
    2138:	9a 95       	dec	r25
    213a:	e2 f7       	brpl	.-8      	; 0x2134 <nwkRxTaskHandler+0x1ce>
    213c:	82 2b       	or	r24, r18
    213e:	83 83       	std	Z+3, r24	; 0x03
    2140:	44 c1       	rjmp	.+648    	; 0x23ca <nwkRxTaskHandler+0x464>
				return false;
			} else {
				uint8_t shift = -(int8_t)diff;

				entry->seq = header->nwkSeq;
    2142:	f9 01       	movw	r30, r18
    2144:	ee 0f       	add	r30, r30
    2146:	ff 1f       	adc	r31, r31
    2148:	ee 0f       	add	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	2e 0f       	add	r18, r30
    214e:	3f 1f       	adc	r19, r31
    2150:	f9 01       	movw	r30, r18
    2152:	ef 5b       	subi	r30, 0xBF	; 191
    2154:	f4 4f       	sbci	r31, 0xF4	; 244
    2156:	82 83       	std	Z+2, r24	; 0x02
				entry->mask = (entry->mask << shift) | 1;
    2158:	83 81       	ldd	r24, Z+3	; 0x03
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	91 95       	neg	r25
    2160:	a9 01       	movw	r20, r18
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <nwkRxTaskHandler+0x202>
    2164:	44 0f       	add	r20, r20
    2166:	55 1f       	adc	r21, r21
    2168:	9a 95       	dec	r25
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <nwkRxTaskHandler+0x1fe>
    216c:	ca 01       	movw	r24, r20
    216e:	81 60       	ori	r24, 0x01	; 1
    2170:	83 83       	std	Z+3, r24	; 0x03
				entry->ttl = DUPLICATE_REJECTION_TTL;
    2172:	a4 82       	std	Z+4, r10	; 0x04
    2174:	2a c1       	rjmp	.+596    	; 0x23ca <nwkRxTaskHandler+0x464>
				return false;
			}
		}

		if (0 == entry->ttl) {
			freeEntry = entry;
    2176:	4f 01       	movw	r8, r30
    2178:	01 96       	adiw	r24, 0x01	; 1
    217a:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
	NwkDuplicateRejectionEntry_t *entry;
	NwkDuplicateRejectionEntry_t *freeEntry = NULL;

	for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++) {
    217c:	82 33       	cpi	r24, 0x32	; 50
    217e:	91 05       	cpc	r25, r1
    2180:	09 f0       	breq	.+2      	; 0x2184 <nwkRxTaskHandler+0x21e>
    2182:	80 cf       	rjmp	.-256    	; 0x2084 <nwkRxTaskHandler+0x11e>
		if (0 == entry->ttl) {
			freeEntry = entry;
		}
	}

	if (NULL == freeEntry) {
    2184:	81 14       	cp	r8, r1
    2186:	91 04       	cpc	r9, r1
    2188:	09 f4       	brne	.+2      	; 0x218c <nwkRxTaskHandler+0x226>
    218a:	18 c1       	rjmp	.+560    	; 0x23bc <nwkRxTaskHandler+0x456>
		return true;
	}

	freeEntry->src = header->nwkSrcAddr;
    218c:	d8 01       	movw	r26, r16
    218e:	1d 96       	adiw	r26, 0x0d	; 13
    2190:	8d 91       	ld	r24, X+
    2192:	9c 91       	ld	r25, X
    2194:	1e 97       	sbiw	r26, 0x0e	; 14
    2196:	f4 01       	movw	r30, r8
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
	freeEntry->seq = header->nwkSeq;
    219c:	1c 96       	adiw	r26, 0x0c	; 12
    219e:	8c 91       	ld	r24, X
    21a0:	82 83       	std	Z+2, r24	; 0x02
	freeEntry->mask = 1;
    21a2:	43 82       	std	Z+3, r4	; 0x03
	freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    21a4:	a4 82       	std	Z+4, r10	; 0x04

	SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    21a6:	83 e3       	ldi	r24, 0x33	; 51
    21a8:	9b e0       	ldi	r25, 0x0B	; 11
    21aa:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <SYS_TimerStart>
    21ae:	0d c1       	rjmp	.+538    	; 0x23ca <nwkRxTaskHandler+0x464>
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    21b0:	d7 01       	movw	r26, r14
    21b2:	2d 91       	ld	r18, X+
    21b4:	3c 91       	ld	r19, X
				header->nwkDstAddr &&
    21b6:	f8 01       	movw	r30, r16
    21b8:	87 85       	ldd	r24, Z+15	; 0x0f
    21ba:	90 89       	ldd	r25, Z+16	; 0x10
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    21bc:	28 17       	cp	r18, r24
    21be:	39 07       	cpc	r19, r25
    21c0:	81 f0       	breq	.+32     	; 0x21e2 <nwkRxTaskHandler+0x27c>
				header->nwkDstAddr &&
    21c2:	43 85       	ldd	r20, Z+11	; 0x0b
    21c4:	42 fd       	sbrc	r20, 2
				0 == header->nwkFcf.linkLocal) {
			nwkTxBroadcastFrame(frame);
    21c6:	0b c0       	rjmp	.+22     	; 0x21de <nwkRxTaskHandler+0x278>
    21c8:	c8 01       	movw	r24, r16
    21ca:	40 d3       	rcall	.+1664   	; 0x284c <nwkTxBroadcastFrame>
		}

		if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR ==
    21cc:	d7 01       	movw	r26, r14
    21ce:	2d 91       	ld	r18, X+
    21d0:	3c 91       	ld	r19, X
    21d2:	f8 01       	movw	r30, r16
    21d4:	87 85       	ldd	r24, Z+15	; 0x0f
    21d6:	90 89       	ldd	r25, Z+16	; 0x10
    21d8:	28 17       	cp	r18, r24
    21da:	39 07       	cpc	r19, r25
    21dc:	11 f0       	breq	.+4      	; 0x21e2 <nwkRxTaskHandler+0x27c>
    21de:	01 96       	adiw	r24, 0x01	; 1
    21e0:	69 f4       	brne	.+26     	; 0x21fc <nwkRxTaskHandler+0x296>
				header->nwkDstAddr) {
    #ifdef NWK_ENABLE_SECURITY
			if (header->nwkFcf.security) {
    21e2:	d8 01       	movw	r26, r16
    21e4:	1b 96       	adiw	r26, 0x0b	; 11
    21e6:	8c 91       	ld	r24, X
    21e8:	1b 97       	sbiw	r26, 0x0b	; 11
    21ea:	81 ff       	sbrs	r24, 1
    21ec:	03 c0       	rjmp	.+6      	; 0x21f4 <nwkRxTaskHandler+0x28e>
				frame->state = NWK_RX_STATE_DECRYPT;
    21ee:	e1 e2       	ldi	r30, 0x21	; 33
    21f0:	ec 93       	st	X, r30
    21f2:	e4 c0       	rjmp	.+456    	; 0x23bc <nwkRxTaskHandler+0x456>
			} else
    #endif
			frame->state = NWK_RX_STATE_INDICATE;
    21f4:	e2 e2       	ldi	r30, 0x22	; 34
    21f6:	d8 01       	movw	r26, r16
    21f8:	ec 93       	st	X, r30
    21fa:	e0 c0       	rjmp	.+448    	; 0x23bc <nwkRxTaskHandler+0x456>
		}

  #ifdef NWK_ENABLE_ROUTING
		else if (nwkIb.addr == header->macDstAddr) {
    21fc:	d8 01       	movw	r26, r16
    21fe:	17 96       	adiw	r26, 0x07	; 7
    2200:	8d 91       	ld	r24, X+
    2202:	9c 91       	ld	r25, X
    2204:	18 97       	sbiw	r26, 0x08	; 8
    2206:	82 17       	cp	r24, r18
    2208:	93 07       	cpc	r25, r19
    220a:	09 f0       	breq	.+2      	; 0x220e <nwkRxTaskHandler+0x2a8>
    220c:	d7 c0       	rjmp	.+430    	; 0x23bc <nwkRxTaskHandler+0x456>
			frame->state = NWK_RX_STATE_ROUTE;
    220e:	e3 e2       	ldi	r30, 0x23	; 35
    2210:	ec 93       	st	X, r30
		break;

#ifdef NWK_ENABLE_SECURITY
		case NWK_RX_STATE_DECRYPT:
		{
			nwkSecurityProcess(frame, false);
    2212:	d4 c0       	rjmp	.+424    	; 0x23bc <nwkRxTaskHandler+0x456>
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	c8 01       	movw	r24, r16
    2218:	ff d0       	rcall	.+510    	; 0x2418 <nwkSecurityProcess>
		}
		break;
    221a:	d0 c0       	rjmp	.+416    	; 0x23bc <nwkRxTaskHandler+0x456>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
	bool ack;

	nwkRxAckControl = 0;
    221c:	10 92 40 0b 	sts	0x0B40, r1	; 0x800b40 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
    2220:	d8 01       	movw	r26, r16
    2222:	51 96       	adiw	r26, 0x11	; 17
    2224:	8c 91       	ld	r24, X
    2226:	51 97       	sbiw	r26, 0x11	; 17
    2228:	82 95       	swap	r24
    222a:	8f 70       	andi	r24, 0x0F	; 15
    222c:	e8 2f       	mov	r30, r24
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	ee 0f       	add	r30, r30
    2232:	ff 1f       	adc	r31, r31
    2234:	ec 58       	subi	r30, 0x8C	; 140
    2236:	f3 4f       	sbci	r31, 0xF3	; 243
    2238:	01 90       	ld	r0, Z+
    223a:	f0 81       	ld	r31, Z
    223c:	e0 2d       	mov	r30, r0
    223e:	30 97       	sbiw	r30, 0x00	; 0
    2240:	09 f4       	brne	.+2      	; 0x2244 <nwkRxTaskHandler+0x2de>
    2242:	60 c0       	rjmp	.+192    	; 0x2304 <nwkRxTaskHandler+0x39e>
		return false;
	}

	ind.srcAddr = header->nwkSrcAddr;
    2244:	1d 96       	adiw	r26, 0x0d	; 13
    2246:	2d 91       	ld	r18, X+
    2248:	3c 91       	ld	r19, X
    224a:	1e 97       	sbiw	r26, 0x0e	; 14
    224c:	3a 83       	std	Y+2, r19	; 0x02
    224e:	29 83       	std	Y+1, r18	; 0x01
	ind.dstAddr = header->nwkDstAddr;
    2250:	1f 96       	adiw	r26, 0x0f	; 15
    2252:	4d 91       	ld	r20, X+
    2254:	5c 91       	ld	r21, X
    2256:	50 97       	sbiw	r26, 0x10	; 16
    2258:	5c 83       	std	Y+4, r21	; 0x04
    225a:	4b 83       	std	Y+3, r20	; 0x03
	ind.srcEndpoint = header->nwkSrcEndpoint;
    225c:	51 96       	adiw	r26, 0x11	; 17
    225e:	9c 91       	ld	r25, X
    2260:	51 97       	sbiw	r26, 0x11	; 17
    2262:	9f 70       	andi	r25, 0x0F	; 15
    2264:	9d 83       	std	Y+5, r25	; 0x05
	ind.dstEndpoint = header->nwkDstEndpoint;
    2266:	8e 83       	std	Y+6, r24	; 0x06
	ind.data = frame->payload;
    2268:	af 57       	subi	r26, 0x7F	; 127
    226a:	bf 4f       	sbci	r27, 0xFF	; 255
    226c:	8d 91       	ld	r24, X+
    226e:	9c 91       	ld	r25, X
    2270:	99 87       	std	Y+9, r25	; 0x09
    2272:	88 87       	std	Y+8, r24	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
	return frame->size - (frame->payload - frame->data);
    2274:	b8 01       	movw	r22, r16
    2276:	6e 5f       	subi	r22, 0xFE	; 254
    2278:	7f 4f       	sbci	r23, 0xFF	; 255
	ind.size = nwkFramePayloadSize(frame);
    227a:	86 1b       	sub	r24, r22
    227c:	97 0b       	sbc	r25, r23
    227e:	d8 01       	movw	r26, r16
    2280:	11 96       	adiw	r26, 0x01	; 1
    2282:	9c 91       	ld	r25, X
    2284:	11 97       	sbiw	r26, 0x01	; 1
    2286:	98 1b       	sub	r25, r24
    2288:	9a 87       	std	Y+10, r25	; 0x0a
	ind.lqi = frame->rx.lqi;
    228a:	ad 57       	subi	r26, 0x7D	; 125
    228c:	bf 4f       	sbci	r27, 0xFF	; 255
    228e:	8c 91       	ld	r24, X
    2290:	8b 87       	std	Y+11, r24	; 0x0b
	ind.rssi = frame->rx.rssi;
    2292:	11 96       	adiw	r26, 0x01	; 1
    2294:	8c 91       	ld	r24, X
    2296:	8c 87       	std	Y+12, r24	; 0x0c

	ind.options
		= (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    2298:	d8 01       	movw	r26, r16
    229a:	1b 96       	adiw	r26, 0x0b	; 11
    229c:	9c 91       	ld	r25, X
	ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    229e:	69 2f       	mov	r22, r25
    22a0:	63 70       	andi	r22, 0x03	; 3
	ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    22a2:	92 fd       	sbrc	r25, 2
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <nwkRxTaskHandler+0x344>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	01 c0       	rjmp	.+2      	; 0x22ac <nwkRxTaskHandler+0x346>
    22aa:	80 e2       	ldi	r24, 0x20	; 32
    22ac:	86 2b       	or	r24, r22
	ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    22ae:	93 fd       	sbrc	r25, 3
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <nwkRxTaskHandler+0x350>
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <nwkRxTaskHandler+0x352>
    22b6:	90 e4       	ldi	r25, 0x40	; 64
    22b8:	89 2b       	or	r24, r25
	ind.options
		|= (NWK_BROADCAST_ADDR ==
    22ba:	4f 3f       	cpi	r20, 0xFF	; 255
    22bc:	5f 4f       	sbci	r21, 0xFF	; 255
    22be:	11 f0       	breq	.+4      	; 0x22c4 <nwkRxTaskHandler+0x35e>
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	01 c0       	rjmp	.+2      	; 0x22c6 <nwkRxTaskHandler+0x360>
    22c4:	95 2d       	mov	r25, r5
    22c6:	89 2b       	or	r24, r25
			header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
	ind.options
		|= (header->nwkSrcAddr ==
    22c8:	d8 01       	movw	r26, r16
    22ca:	19 96       	adiw	r26, 0x09	; 9
    22cc:	4d 91       	ld	r20, X+
    22ce:	5c 91       	ld	r21, X
    22d0:	1a 97       	sbiw	r26, 0x0a	; 10
    22d2:	24 17       	cp	r18, r20
    22d4:	35 07       	cpc	r19, r21
    22d6:	11 f0       	breq	.+4      	; 0x22dc <nwkRxTaskHandler+0x376>
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	01 c0       	rjmp	.+2      	; 0x22de <nwkRxTaskHandler+0x378>
    22dc:	96 2d       	mov	r25, r6
    22de:	89 2b       	or	r24, r25
    22e0:	8f 83       	std	Y+7, r24	; 0x07
			header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
	ind.options
		|= (NWK_BROADCAST_PANID ==
    22e2:	d8 01       	movw	r26, r16
    22e4:	15 96       	adiw	r26, 0x05	; 5
    22e6:	2d 91       	ld	r18, X+
    22e8:	3c 91       	ld	r19, X
    22ea:	16 97       	sbiw	r26, 0x06	; 6
    22ec:	2f 3f       	cpi	r18, 0xFF	; 255
    22ee:	3f 4f       	sbci	r19, 0xFF	; 255
    22f0:	11 f0       	breq	.+4      	; 0x22f6 <nwkRxTaskHandler+0x390>
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	01 c0       	rjmp	.+2      	; 0x22f8 <nwkRxTaskHandler+0x392>
    22f6:	97 2d       	mov	r25, r7
    22f8:	89 2b       	or	r24, r25
    22fa:	8f 83       	std	Y+7, r24	; 0x07
			header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;

	return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	09 95       	icall
    2302:	01 c0       	rjmp	.+2      	; 0x2306 <nwkRxTaskHandler+0x3a0>
{
	NwkFrameHeader_t *header = &frame->header;
	NWK_DataInd_t ind;

	if (NULL == nwkIb.endpoint[header->nwkDstEndpoint]) {
		return false;
    2304:	80 e0       	ldi	r24, 0x00	; 0
	bool ack;

	nwkRxAckControl = 0;
	ack = nwkRxIndicateFrame(frame);

	if (0 == frame->header.nwkFcf.ackRequest) {
    2306:	f8 01       	movw	r30, r16
    2308:	93 85       	ldd	r25, Z+11	; 0x0b
    230a:	90 ff       	sbrs	r25, 0
		ack = false;
    230c:	80 e0       	ldi	r24, 0x00	; 0
	}

	if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    230e:	d8 01       	movw	r26, r16
    2310:	17 96       	adiw	r26, 0x07	; 7
    2312:	2d 91       	ld	r18, X+
    2314:	3c 91       	ld	r19, X
    2316:	18 97       	sbiw	r26, 0x08	; 8
    2318:	2f 3f       	cpi	r18, 0xFF	; 255
    231a:	3f 4f       	sbci	r19, 0xFF	; 255
    231c:	69 f4       	brne	.+26     	; 0x2338 <nwkRxTaskHandler+0x3d2>
    231e:	f7 01       	movw	r30, r14
    2320:	40 81       	ld	r20, Z
    2322:	51 81       	ldd	r21, Z+1	; 0x01
    2324:	d8 01       	movw	r26, r16
    2326:	1f 96       	adiw	r26, 0x0f	; 15
    2328:	2d 91       	ld	r18, X+
    232a:	3c 91       	ld	r19, X
    232c:	50 97       	sbiw	r26, 0x10	; 16
    232e:	42 17       	cp	r20, r18
    2330:	53 07       	cpc	r21, r19
    2332:	11 f4       	brne	.+4      	; 0x2338 <nwkRxTaskHandler+0x3d2>
			nwkIb.addr == frame->header.nwkDstAddr &&
    2334:	93 ff       	sbrs	r25, 3
			0 == frame->header.nwkFcf.multicast) {
		ack = true;
    2336:	84 2d       	mov	r24, r4
	}

	if (NWK_BROADCAST_PANID == frame->header.macDstPanId) {
    2338:	f8 01       	movw	r30, r16
    233a:	25 81       	ldd	r18, Z+5	; 0x05
    233c:	36 81       	ldd	r19, Z+6	; 0x06
    233e:	2f 3f       	cpi	r18, 0xFF	; 255
    2340:	3f 4f       	sbci	r19, 0xFF	; 255
    2342:	a1 f1       	breq	.+104    	; 0x23ac <nwkRxTaskHandler+0x446>
		ack = false;
	}

	if (NWK_BROADCAST_ADDR == nwkIb.addr) {
    2344:	d7 01       	movw	r26, r14
    2346:	2d 91       	ld	r18, X+
    2348:	3c 91       	ld	r19, X
    234a:	2f 3f       	cpi	r18, 0xFF	; 255
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
		ack = false;
	}

	if (ack) {
    234e:	71 f1       	breq	.+92     	; 0x23ac <nwkRxTaskHandler+0x446>
    2350:	88 23       	and	r24, r24
static void nwkRxSendAck(NwkFrame_t *frame)
{
	NwkFrame_t *ack;
	NwkCommandAck_t *command;

	if (NULL == (ack = nwkFrameAlloc())) {
    2352:	61 f1       	breq	.+88     	; 0x23ac <nwkRxTaskHandler+0x446>
    2354:	f4 d8       	rcall	.-3608   	; 0x153e <nwkFrameAlloc>
    2356:	4c 01       	movw	r8, r24
    2358:	00 97       	sbiw	r24, 0x00	; 0
		return;
	}

	nwkFrameCommandInit(ack);
    235a:	41 f1       	breq	.+80     	; 0x23ac <nwkRxTaskHandler+0x446>
    235c:	56 d9       	rcall	.-3412   	; 0x160a <nwkFrameCommandInit>

	ack->size += sizeof(NwkCommandAck_t);
    235e:	f4 01       	movw	r30, r8
    2360:	81 81       	ldd	r24, Z+1	; 0x01
    2362:	8d 5f       	subi	r24, 0xFD	; 253
    2364:	81 83       	std	Z+1, r24	; 0x01
	ack->tx.confirm = NULL;
    2366:	e9 57       	subi	r30, 0x79	; 121
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	11 82       	std	Z+1, r1	; 0x01
    236c:	10 82       	st	Z, r1

	ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    236e:	d8 01       	movw	r26, r16
    2370:	1b 96       	adiw	r26, 0x0b	; 11
    2372:	8c 91       	ld	r24, X
    2374:	1b 97       	sbiw	r26, 0x0b	; 11
    2376:	86 95       	lsr	r24
    2378:	81 70       	andi	r24, 0x01	; 1
    237a:	f4 01       	movw	r30, r8
    237c:	93 85       	ldd	r25, Z+11	; 0x0b
    237e:	80 fb       	bst	r24, 0
    2380:	91 f9       	bld	r25, 1
    2382:	93 87       	std	Z+11, r25	; 0x0b
	ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    2384:	1d 96       	adiw	r26, 0x0d	; 13
    2386:	8d 91       	ld	r24, X+
    2388:	9c 91       	ld	r25, X
    238a:	1e 97       	sbiw	r26, 0x0e	; 14
    238c:	90 8b       	std	Z+16, r25	; 0x10
    238e:	87 87       	std	Z+15, r24	; 0x0f

	command = (NwkCommandAck_t *)ack->payload;
    2390:	ef 57       	subi	r30, 0x7F	; 127
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	01 90       	ld	r0, Z+
    2396:	f0 81       	ld	r31, Z
    2398:	e0 2d       	mov	r30, r0
	command->id = NWK_COMMAND_ACK;
    239a:	10 82       	st	Z, r1
	command->control = nwkRxAckControl;
    239c:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <nwkRxAckControl>
	command->seq = frame->header.nwkSeq;
    23a0:	82 83       	std	Z+2, r24	; 0x02
    23a2:	1c 96       	adiw	r26, 0x0c	; 12
    23a4:	8c 91       	ld	r24, X

	nwkTxFrame(ack);
    23a6:	81 83       	std	Z+1, r24	; 0x01
    23a8:	c4 01       	movw	r24, r8

	if (ack) {
		nwkRxSendAck(frame);
	}

	frame->state = NWK_RX_STATE_FINISH;
    23aa:	fc d1       	rcall	.+1016   	; 0x27a4 <nwkTxFrame>
    23ac:	d8 01       	movw	r26, r16
		break;

#ifdef NWK_ENABLE_ROUTING
		case NWK_RX_STATE_ROUTE:
		{
			nwkRouteFrame(frame);
    23ae:	bc 92       	st	X, r11
    23b0:	05 c0       	rjmp	.+10     	; 0x23bc <nwkRxTaskHandler+0x456>
    23b2:	c8 01       	movw	r24, r16
		}
		break;
    23b4:	5a da       	rcall	.-2892   	; 0x186a <nwkRouteFrame>
#endif

		case NWK_RX_STATE_FINISH:
		{
			nwkFrameFree(frame);
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <nwkRxTaskHandler+0x456>
    23b8:	c8 01       	movw	r24, r16
    23ba:	f8 d8       	rcall	.-3600   	; 0x15ac <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    23bc:	c8 01       	movw	r24, r16
    23be:	00 d9       	rcall	.-3584   	; 0x15c0 <nwkFrameNext>
    23c0:	8c 01       	movw	r16, r24
    23c2:	89 2b       	or	r24, r25
    23c4:	09 f0       	breq	.+2      	; 0x23c8 <nwkRxTaskHandler+0x462>
    23c6:	0a ce       	rjmp	.-1004   	; 0x1fdc <nwkRxTaskHandler+0x76>
    23c8:	07 c0       	rjmp	.+14     	; 0x23d8 <nwkRxTaskHandler+0x472>
    23ca:	f8 01       	movw	r30, r16
			frame->state = NWK_RX_STATE_INDICATE;
		}
	} else
#endif /* NWK_ENABLE_MULTICAST */
	{
		if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr !=
    23cc:	87 81       	ldd	r24, Z+7	; 0x07
    23ce:	90 85       	ldd	r25, Z+8	; 0x08
    23d0:	01 96       	adiw	r24, 0x01	; 1
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <nwkRxTaskHandler+0x470>
    23d4:	fb ce       	rjmp	.-522    	; 0x21cc <nwkRxTaskHandler+0x266>
    23d6:	ec ce       	rjmp	.-552    	; 0x21b0 <nwkRxTaskHandler+0x24a>
    23d8:	2c 96       	adiw	r28, 0x0c	; 12
			nwkFrameFree(frame);
		}
		break;
		}
	}
}
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	ff 90       	pop	r15
    23ee:	ef 90       	pop	r14
    23f0:	df 90       	pop	r13
    23f2:	cf 90       	pop	r12
    23f4:	bf 90       	pop	r11
    23f6:	af 90       	pop	r10
    23f8:	9f 90       	pop	r9
    23fa:	8f 90       	pop	r8
    23fc:	7f 90       	pop	r7
    23fe:	6f 90       	pop	r6
    2400:	5f 90       	pop	r5
    2402:	4f 90       	pop	r4
    2404:	3f 90       	pop	r3
    2406:	2f 90       	pop	r2
    2408:	08 95       	ret

0000240a <nwkSecurityInit>:
    240a:	10 92 50 0c 	sts	0x0C50, r1	; 0x800c50 <nwkSecurityActiveFrames>

/*************************************************************************//**
*****************************************************************************/
void NWK_SetSecurityKey(uint8_t *key)
{
	memcpy((uint8_t *)nwkIb.key, key, NWK_SECURITY_KEY_SIZE);
    240e:	10 92 4f 0c 	sts	0x0C4F, r1	; 0x800c4f <nwkSecurityActiveFrame+0x1>
    2412:	10 92 4e 0c 	sts	0x0C4E, r1	; 0x800c4e <nwkSecurityActiveFrame>
    2416:	08 95       	ret

00002418 <nwkSecurityProcess>:

/*************************************************************************//**
*****************************************************************************/
void nwkSecurityProcess(NwkFrame_t *frame, bool encrypt)
{
	if (encrypt) {
    2418:	66 23       	and	r22, r22
    241a:	21 f0       	breq	.+8      	; 0x2424 <nwkSecurityProcess+0xc>
		frame->state = NWK_SECURITY_STATE_ENCRYPT_PENDING;
    241c:	20 e3       	ldi	r18, 0x30	; 48
    241e:	fc 01       	movw	r30, r24
    2420:	20 83       	st	Z, r18
    2422:	03 c0       	rjmp	.+6      	; 0x242a <nwkSecurityProcess+0x12>
	} else {
		frame->state = NWK_SECURITY_STATE_DECRYPT_PENDING;
    2424:	21 e3       	ldi	r18, 0x31	; 49
    2426:	fc 01       	movw	r30, r24
    2428:	20 83       	st	Z, r18
	}

	++nwkSecurityActiveFrames;
    242a:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <nwkSecurityActiveFrames>
    242e:	8f 5f       	subi	r24, 0xFF	; 255
    2430:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <nwkSecurityActiveFrames>
    2434:	08 95       	ret

00002436 <SYS_EncryptConf>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_EncryptConf(void)
{
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
	uint8_t *vector = (uint8_t *)nwkSecurityVector;
	uint8_t *text = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    243a:	c0 91 4e 0c 	lds	r28, 0x0C4E	; 0x800c4e <nwkSecurityActiveFrame>
    243e:	d0 91 4f 0c 	lds	r29, 0x0C4F	; 0x800c4f <nwkSecurityActiveFrame+0x1>
    2442:	fe 01       	movw	r30, r28
    2444:	ef 57       	subi	r30, 0x7F	; 127
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	a0 81       	ld	r26, Z
    244a:	b1 81       	ldd	r27, Z+1	; 0x01
    244c:	70 91 4c 0c 	lds	r23, 0x0C4C	; 0x800c4c <nwkSecurityOffset>
    2450:	87 2f       	mov	r24, r23
    2452:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t block;

	block
		= (nwkSecuritySize <
    2454:	50 91 4d 0c 	lds	r21, 0x0C4D	; 0x800c4d <nwkSecuritySize>
    2458:	65 2f       	mov	r22, r21
    245a:	51 31       	cpi	r21, 0x11	; 17
    245c:	08 f0       	brcs	.+2      	; 0x2460 <SYS_EncryptConf+0x2a>
    245e:	60 e1       	ldi	r22, 0x10	; 16
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2460:	66 23       	and	r22, r22
    2462:	d1 f0       	breq	.+52     	; 0x2498 <SYS_EncryptConf+0x62>
		text[i] ^= vector[i];

		if (nwkSecurityEncrypt) {
    2464:	40 91 4b 0c 	lds	r20, 0x0C4B	; 0x800c4b <nwkSecurityEncrypt>
    2468:	eb e3       	ldi	r30, 0x3B	; 59
    246a:	fc e0       	ldi	r31, 0x0C	; 12
    246c:	a8 0f       	add	r26, r24
    246e:	b9 1f       	adc	r27, r25
    2470:	2f ef       	ldi	r18, 0xFF	; 255
    2472:	26 0f       	add	r18, r22
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	24 5c       	subi	r18, 0xC4	; 196
    2478:	33 4f       	sbci	r19, 0xF3	; 243
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
		text[i] ^= vector[i];
    247a:	9c 91       	ld	r25, X
    247c:	80 81       	ld	r24, Z
    247e:	89 27       	eor	r24, r25
    2480:	8d 93       	st	X+, r24

		if (nwkSecurityEncrypt) {
    2482:	44 23       	and	r20, r20
    2484:	11 f0       	breq	.+4      	; 0x248a <SYS_EncryptConf+0x54>
			vector[i] = text[i];
    2486:	80 83       	st	Z, r24
    2488:	03 c0       	rjmp	.+6      	; 0x2490 <SYS_EncryptConf+0x5a>
		} else {
			vector[i] ^= text[i];
    248a:	90 81       	ld	r25, Z
    248c:	89 27       	eor	r24, r25
    248e:	80 83       	st	Z, r24
    2490:	31 96       	adiw	r30, 0x01	; 1
	block
		= (nwkSecuritySize <
			NWK_SECURITY_BLOCK_SIZE) ? nwkSecuritySize :
			NWK_SECURITY_BLOCK_SIZE;

	for (uint8_t i = 0; i < block; i++) {
    2492:	e2 17       	cp	r30, r18
    2494:	f3 07       	cpc	r31, r19
    2496:	89 f7       	brne	.-30     	; 0x247a <SYS_EncryptConf+0x44>
		} else {
			vector[i] ^= text[i];
		}
	}

	nwkSecurityOffset += block;
    2498:	76 0f       	add	r23, r22
    249a:	70 93 4c 0c 	sts	0x0C4C, r23	; 0x800c4c <nwkSecurityOffset>
	nwkSecuritySize -= block;
    249e:	56 1b       	sub	r21, r22
    24a0:	50 93 4d 0c 	sts	0x0C4D, r21	; 0x800c4d <nwkSecuritySize>

	if (nwkSecuritySize > 0) {
    24a4:	55 23       	and	r21, r21
    24a6:	19 f0       	breq	.+6      	; 0x24ae <SYS_EncryptConf+0x78>
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    24a8:	82 e3       	ldi	r24, 0x32	; 50
    24aa:	88 83       	st	Y, r24
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <SYS_EncryptConf+0x7c>
	} else {
		nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_CONFIRM;
    24ae:	84 e3       	ldi	r24, 0x34	; 52
    24b0:	88 83       	st	Y, r24
	}
}
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	08 95       	ret

000024b8 <nwkSecurityTaskHandler>:

/*************************************************************************//**
*  @brief Security Module task handler
*****************************************************************************/
void nwkSecurityTaskHandler(void)
{
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
	NwkFrame_t *frame = NULL;

	if (0 == nwkSecurityActiveFrames) {
    24c0:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <nwkSecurityActiveFrames>
    24c4:	88 23       	and	r24, r24
    24c6:	09 f4       	brne	.+2      	; 0x24ca <nwkSecurityTaskHandler+0x12>
    24c8:	e3 c0       	rjmp	.+454    	; 0x2690 <nwkSecurityTaskHandler+0x1d8>
		return;
	}

	if (nwkSecurityActiveFrame) {
    24ca:	e0 91 4e 0c 	lds	r30, 0x0C4E	; 0x800c4e <nwkSecurityActiveFrame>
    24ce:	f0 91 4f 0c 	lds	r31, 0x0C4F	; 0x800c4f <nwkSecurityActiveFrame+0x1>
    24d2:	30 97       	sbiw	r30, 0x00	; 0
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <nwkSecurityTaskHandler+0x20>
    24d6:	d5 c0       	rjmp	.+426    	; 0x2682 <nwkSecurityTaskHandler+0x1ca>
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
    24d8:	80 81       	ld	r24, Z
	if (0 == nwkSecurityActiveFrames) {
		return;
	}

	if (nwkSecurityActiveFrame) {
		if (NWK_SECURITY_STATE_CONFIRM ==
    24da:	84 33       	cpi	r24, 0x34	; 52
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <nwkSecurityTaskHandler+0x28>
    24de:	55 c0       	rjmp	.+170    	; 0x258a <nwkSecurityTaskHandler+0xd2>

/*************************************************************************//**
*****************************************************************************/
static bool nwkSecurityProcessMic(void)
{
	uint8_t *mic = &nwkSecurityActiveFrame->payload[nwkSecurityOffset];
    24e0:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <nwkSecurityOffset>
    24e4:	df 01       	movw	r26, r30
    24e6:	af 57       	subi	r26, 0x7F	; 127
    24e8:	bf 4f       	sbci	r27, 0xFF	; 255
    24ea:	cd 91       	ld	r28, X+
    24ec:	dc 91       	ld	r29, X
    24ee:	c8 0f       	add	r28, r24
    24f0:	d1 1d       	adc	r29, r1
	uint32_t vmic = nwkSecurityVector[0] ^ nwkSecurityVector[1] ^
    24f2:	ab e3       	ldi	r26, 0x3B	; 59
    24f4:	bc e0       	ldi	r27, 0x0C	; 12
			nwkSecurityVector[2] ^ nwkSecurityVector[3];
    24f6:	0d 91       	ld	r16, X+
    24f8:	1d 91       	ld	r17, X+
    24fa:	2d 91       	ld	r18, X+
    24fc:	3c 91       	ld	r19, X
    24fe:	13 97       	sbiw	r26, 0x03	; 3
    2500:	14 96       	adiw	r26, 0x04	; 4
    2502:	4d 91       	ld	r20, X+
    2504:	5d 91       	ld	r21, X+
    2506:	6d 91       	ld	r22, X+
    2508:	7c 91       	ld	r23, X
    250a:	17 97       	sbiw	r26, 0x07	; 7
    250c:	04 27       	eor	r16, r20
    250e:	15 27       	eor	r17, r21
    2510:	26 27       	eor	r18, r22
    2512:	37 27       	eor	r19, r23
    2514:	18 96       	adiw	r26, 0x08	; 8
    2516:	4d 91       	ld	r20, X+
    2518:	5d 91       	ld	r21, X+
    251a:	6d 91       	ld	r22, X+
    251c:	7c 91       	ld	r23, X
    251e:	1b 97       	sbiw	r26, 0x0b	; 11
    2520:	04 27       	eor	r16, r20
    2522:	15 27       	eor	r17, r21
    2524:	26 27       	eor	r18, r22
    2526:	37 27       	eor	r19, r23
    2528:	1c 96       	adiw	r26, 0x0c	; 12
    252a:	4d 91       	ld	r20, X+
    252c:	5d 91       	ld	r21, X+
    252e:	6d 91       	ld	r22, X+
    2530:	7c 91       	ld	r23, X
    2532:	1f 97       	sbiw	r26, 0x0f	; 15
    2534:	d9 01       	movw	r26, r18
    2536:	c8 01       	movw	r24, r16
    2538:	84 27       	eor	r24, r20
    253a:	95 27       	eor	r25, r21
    253c:	a6 27       	eor	r26, r22
    253e:	b7 27       	eor	r27, r23
	uint32_t tmic;

	if (nwkSecurityEncrypt) {
    2540:	20 91 4b 0c 	lds	r18, 0x0C4B	; 0x800c4b <nwkSecurityEncrypt>
    2544:	22 23       	and	r18, r18
    2546:	51 f0       	breq	.+20     	; 0x255c <nwkSecurityTaskHandler+0xa4>
		memcpy(mic, (uint8_t *)&vmic, NWK_SECURITY_MIC_SIZE);
    2548:	88 83       	st	Y, r24
    254a:	99 83       	std	Y+1, r25	; 0x01
    254c:	aa 83       	std	Y+2, r26	; 0x02
    254e:	bb 83       	std	Y+3, r27	; 0x03
		nwkSecurityActiveFrame->size += NWK_SECURITY_MIC_SIZE;
    2550:	81 81       	ldd	r24, Z+1	; 0x01
    2552:	8c 5f       	subi	r24, 0xFC	; 252
    2554:	81 83       	std	Z+1, r24	; 0x01
		if (NWK_SECURITY_STATE_CONFIRM ==
				nwkSecurityActiveFrame->state) {
			bool micStatus = nwkSecurityProcessMic();

			if (nwkSecurityEncrypt) {
				nwkTxEncryptConf(nwkSecurityActiveFrame);
    2556:	cf 01       	movw	r24, r30
    2558:	ea d1       	rcall	.+980    	; 0x292e <nwkTxEncryptConf>
    255a:	0d c0       	rjmp	.+26     	; 0x2576 <nwkSecurityTaskHandler+0xbe>
			} else {
				nwkRxDecryptConf(nwkSecurityActiveFrame,
    255c:	61 e0       	ldi	r22, 0x01	; 1
    255e:	08 81       	ld	r16, Y
    2560:	19 81       	ldd	r17, Y+1	; 0x01
    2562:	2a 81       	ldd	r18, Y+2	; 0x02
    2564:	3b 81       	ldd	r19, Y+3	; 0x03
    2566:	08 17       	cp	r16, r24
    2568:	19 07       	cpc	r17, r25
    256a:	2a 07       	cpc	r18, r26
    256c:	3b 07       	cpc	r19, r27
    256e:	09 f0       	breq	.+2      	; 0x2572 <nwkSecurityTaskHandler+0xba>
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	cf 01       	movw	r24, r30
    2574:	ee dc       	rcall	.-1572   	; 0x1f52 <nwkRxDecryptConf>
						micStatus);
			}

			nwkSecurityActiveFrame = NULL;
    2576:	10 92 4f 0c 	sts	0x0C4F, r1	; 0x800c4f <nwkSecurityActiveFrame+0x1>
    257a:	10 92 4e 0c 	sts	0x0C4E, r1	; 0x800c4e <nwkSecurityActiveFrame>
			--nwkSecurityActiveFrames;
    257e:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <nwkSecurityActiveFrames>
    2582:	81 50       	subi	r24, 0x01	; 1
    2584:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <nwkSecurityActiveFrames>
    2588:	83 c0       	rjmp	.+262    	; 0x2690 <nwkSecurityTaskHandler+0x1d8>
		} else if (NWK_SECURITY_STATE_PROCESS ==
    258a:	82 33       	cpi	r24, 0x32	; 50
    258c:	09 f0       	breq	.+2      	; 0x2590 <nwkSecurityTaskHandler+0xd8>
    258e:	80 c0       	rjmp	.+256    	; 0x2690 <nwkSecurityTaskHandler+0x1d8>
				nwkSecurityActiveFrame->state) {
			nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_WAIT;
    2590:	83 e3       	ldi	r24, 0x33	; 51
    2592:	80 83       	st	Z, r24
			SYS_EncryptReq((uint32_t *)nwkSecurityVector,
    2594:	64 e9       	ldi	r22, 0x94	; 148
    2596:	7c e0       	ldi	r23, 0x0C	; 12
    2598:	8b e3       	ldi	r24, 0x3B	; 59
    259a:	9c e0       	ldi	r25, 0x0C	; 12
    259c:	0e 94 3a 07 	call	0xe74	; 0xe74 <SYS_EncryptReq>
    25a0:	77 c0       	rjmp	.+238    	; 0x2690 <nwkSecurityTaskHandler+0x1d8>

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_SECURITY_STATE_ENCRYPT_PENDING == frame->state ||
    25a2:	dc 01       	movw	r26, r24
    25a4:	2c 91       	ld	r18, X
    25a6:	20 53       	subi	r18, 0x30	; 48
    25a8:	22 30       	cpi	r18, 0x02	; 2
    25aa:	08 f0       	brcs	.+2      	; 0x25ae <nwkSecurityTaskHandler+0xf6>
    25ac:	6c c0       	rjmp	.+216    	; 0x2686 <nwkSecurityTaskHandler+0x1ce>
				NWK_SECURITY_STATE_DECRYPT_PENDING ==
				frame->state) {
			nwkSecurityActiveFrame = frame;
    25ae:	90 93 4f 0c 	sts	0x0C4F, r25	; 0x800c4f <nwkSecurityActiveFrame+0x1>
    25b2:	80 93 4e 0c 	sts	0x0C4E, r24	; 0x800c4e <nwkSecurityActiveFrame>
*****************************************************************************/
static void nwkSecurityStart(void)
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
    25b6:	eb e3       	ldi	r30, 0x3B	; 59
    25b8:	fc e0       	ldi	r31, 0x0C	; 12
    25ba:	1c 96       	adiw	r26, 0x0c	; 12
    25bc:	4c 91       	ld	r20, X
    25be:	1c 97       	sbiw	r26, 0x0c	; 12
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	40 83       	st	Z, r20
    25c8:	51 83       	std	Z+1, r21	; 0x01
    25ca:	62 83       	std	Z+2, r22	; 0x02
    25cc:	73 83       	std	Z+3, r23	; 0x03
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    25ce:	1f 96       	adiw	r26, 0x0f	; 15
    25d0:	4d 91       	ld	r20, X+
    25d2:	5c 91       	ld	r21, X
    25d4:	50 97       	sbiw	r26, 0x10	; 16
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	70 e0       	ldi	r23, 0x00	; 0
    25da:	ba 01       	movw	r22, r20
    25dc:	55 27       	eor	r21, r21
    25de:	44 27       	eor	r20, r20
			16) | header->nwkDstEndpoint;
    25e0:	51 96       	adiw	r26, 0x11	; 17
    25e2:	2c 91       	ld	r18, X
    25e4:	51 97       	sbiw	r26, 0x11	; 17
    25e6:	22 95       	swap	r18
    25e8:	2f 70       	andi	r18, 0x0F	; 15
{
	NwkFrameHeader_t *header = &nwkSecurityActiveFrame->header;

	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
    25ea:	42 2b       	or	r20, r18
    25ec:	44 83       	std	Z+4, r20	; 0x04
    25ee:	55 83       	std	Z+5, r21	; 0x05
    25f0:	66 83       	std	Z+6, r22	; 0x06
    25f2:	77 83       	std	Z+7, r23	; 0x07
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    25f4:	1d 96       	adiw	r26, 0x0d	; 13
    25f6:	4d 91       	ld	r20, X+
    25f8:	5c 91       	ld	r21, X
    25fa:	1e 97       	sbiw	r26, 0x0e	; 14
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	ba 01       	movw	r22, r20
    2602:	55 27       	eor	r21, r21
    2604:	44 27       	eor	r20, r20
			16) | header->nwkSrcEndpoint;
    2606:	51 96       	adiw	r26, 0x11	; 17
    2608:	2c 91       	ld	r18, X
    260a:	51 97       	sbiw	r26, 0x11	; 17
    260c:	2f 70       	andi	r18, 0x0F	; 15
	nwkSecurityVector[0] = header->nwkSeq;
	nwkSecurityVector[1]
		= ((uint32_t)header->nwkDstAddr <<
			16) | header->nwkDstEndpoint;
	nwkSecurityVector[2]
		= ((uint32_t)header->nwkSrcAddr <<
    260e:	42 2b       	or	r20, r18
    2610:	40 87       	std	Z+8, r20	; 0x08
    2612:	51 87       	std	Z+9, r21	; 0x09
    2614:	62 87       	std	Z+10, r22	; 0x0a
    2616:	73 87       	std	Z+11, r23	; 0x0b
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
    2618:	15 96       	adiw	r26, 0x05	; 5
    261a:	4d 91       	ld	r20, X+
    261c:	5c 91       	ld	r21, X
    261e:	16 97       	sbiw	r26, 0x06	; 6
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	ba 01       	movw	r22, r20
    2626:	55 27       	eor	r21, r21
    2628:	44 27       	eor	r20, r20
    262a:	1b 96       	adiw	r26, 0x0b	; 11
    262c:	2c 91       	ld	r18, X
    262e:	1b 97       	sbiw	r26, 0x0b	; 11
    2630:	42 2b       	or	r20, r18
    2632:	44 87       	std	Z+12, r20	; 0x0c
    2634:	55 87       	std	Z+13, r21	; 0x0d
    2636:	66 87       	std	Z+14, r22	; 0x0e
    2638:	77 87       	std	Z+15, r23	; 0x0f
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
			nwkSecurityActiveFrame->state) {
    263a:	6c 91       	ld	r22, X
			16) | header->nwkSrcEndpoint;
	nwkSecurityVector[3]
		= ((uint32_t)header->macDstPanId <<
			16) | *(uint8_t *)&header->nwkFcf;

	if (NWK_SECURITY_STATE_DECRYPT_PENDING ==
    263c:	61 33       	cpi	r22, 0x31	; 49
    263e:	31 f4       	brne	.+12     	; 0x264c <nwkSecurityTaskHandler+0x194>
			nwkSecurityActiveFrame->state) {
		nwkSecurityActiveFrame->size -= NWK_SECURITY_MIC_SIZE;
    2640:	11 96       	adiw	r26, 0x01	; 1
    2642:	2c 91       	ld	r18, X
    2644:	11 97       	sbiw	r26, 0x01	; 1
    2646:	24 50       	subi	r18, 0x04	; 4
    2648:	11 96       	adiw	r26, 0x01	; 1
    264a:	2c 93       	st	X, r18
	}

	nwkSecuritySize = nwkFramePayloadSize(nwkSecurityActiveFrame);
    264c:	fc 01       	movw	r30, r24
    264e:	ef 57       	subi	r30, 0x7F	; 127
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	40 81       	ld	r20, Z
    2654:	51 81       	ldd	r21, Z+1	; 0x01
    2656:	9c 01       	movw	r18, r24
    2658:	2e 5f       	subi	r18, 0xFE	; 254
    265a:	3f 4f       	sbci	r19, 0xFF	; 255
    265c:	42 1b       	sub	r20, r18
    265e:	53 0b       	sbc	r21, r19
    2660:	fc 01       	movw	r30, r24
    2662:	21 81       	ldd	r18, Z+1	; 0x01
    2664:	24 1b       	sub	r18, r20
    2666:	20 93 4d 0c 	sts	0x0C4D, r18	; 0x800c4d <nwkSecuritySize>
	nwkSecurityOffset = 0;
    266a:	10 92 4c 0c 	sts	0x0C4C, r1	; 0x800c4c <nwkSecurityOffset>
	nwkSecurityEncrypt
		= (NWK_SECURITY_STATE_ENCRYPT_PENDING ==
    266e:	21 e0       	ldi	r18, 0x01	; 1
    2670:	60 33       	cpi	r22, 0x30	; 48
    2672:	09 f0       	breq	.+2      	; 0x2676 <nwkSecurityTaskHandler+0x1be>
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	20 93 4b 0c 	sts	0x0C4B, r18	; 0x800c4b <nwkSecurityEncrypt>
			nwkSecurityActiveFrame->state);

	nwkSecurityActiveFrame->state = NWK_SECURITY_STATE_PROCESS;
    267a:	22 e3       	ldi	r18, 0x32	; 50
    267c:	dc 01       	movw	r26, r24
    267e:	2c 93       	st	X, r18
    2680:	07 c0       	rjmp	.+14     	; 0x2690 <nwkSecurityTaskHandler+0x1d8>
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e0       	ldi	r25, 0x00	; 0
		}

		return;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    2686:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <nwkFrameNext>
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	09 f0       	breq	.+2      	; 0x2690 <nwkSecurityTaskHandler+0x1d8>
    268e:	89 cf       	rjmp	.-238    	; 0x25a2 <nwkSecurityTaskHandler+0xea>
			nwkSecurityActiveFrame = frame;
			nwkSecurityStart();
			return;
		}
	}
}
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	08 95       	ret

0000269a <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    269a:	ef 92       	push	r14
    269c:	ff 92       	push	r15
    269e:	0f 93       	push	r16
    26a0:	1f 93       	push	r17
    26a2:	cf 93       	push	r28
    26a4:	7c 01       	movw	r14, r24
	NwkFrame_t *frame = NULL;
	bool restart = false;
    26a6:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    26ac:	01 e0       	ldi	r16, 0x01	; 1

			if (0 == --frame->tx.timeout) {
				frame->state = NWK_TX_STATE_SEND;
    26ae:	c3 e1       	ldi	r28, 0x13	; 19
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    26b0:	13 c0       	rjmp	.+38     	; 0x26d8 <nwkTxDelayTimerHandler+0x3e>
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
    26b2:	fc 01       	movw	r30, r24
    26b4:	20 81       	ld	r18, Z
    26b6:	21 31       	cpi	r18, 0x11	; 17
    26b8:	79 f4       	brne	.+30     	; 0x26d8 <nwkTxDelayTimerHandler+0x3e>
			restart = true;

			if (0 == --frame->tx.timeout) {
    26ba:	ec 57       	subi	r30, 0x7C	; 124
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	20 81       	ld	r18, Z
    26c0:	31 81       	ldd	r19, Z+1	; 0x01
    26c2:	21 50       	subi	r18, 0x01	; 1
    26c4:	31 09       	sbc	r19, r1
    26c6:	31 83       	std	Z+1, r19	; 0x01
    26c8:	20 83       	st	Z, r18
    26ca:	23 2b       	or	r18, r19
    26cc:	21 f4       	brne	.+8      	; 0x26d6 <nwkTxDelayTimerHandler+0x3c>
				frame->state = NWK_TX_STATE_SEND;
    26ce:	fc 01       	movw	r30, r24
    26d0:	c0 83       	st	Z, r28
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_DELAY == frame->state) {
			restart = true;
    26d2:	10 2f       	mov	r17, r16
    26d4:	01 c0       	rjmp	.+2      	; 0x26d8 <nwkTxDelayTimerHandler+0x3e>
    26d6:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    26d8:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <nwkFrameNext>
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	49 f7       	brne	.-46     	; 0x26b2 <nwkTxDelayTimerHandler+0x18>
				frame->state = NWK_TX_STATE_SEND;
			}
		}
	}

	if (restart) {
    26e0:	11 23       	and	r17, r17
    26e2:	19 f0       	breq	.+6      	; 0x26ea <nwkTxDelayTimerHandler+0x50>
		SYS_TimerStart(timer);
    26e4:	c7 01       	movw	r24, r14
    26e6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <SYS_TimerStart>
	}
}
    26ea:	cf 91       	pop	r28
    26ec:	1f 91       	pop	r17
    26ee:	0f 91       	pop	r16
    26f0:	ff 90       	pop	r15
    26f2:	ef 90       	pop	r14
    26f4:	08 95       	ret

000026f6 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    26f6:	ef 92       	push	r14
    26f8:	ff 92       	push	r15
    26fa:	0f 93       	push	r16
    26fc:	1f 93       	push	r17
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	7c 01       	movw	r14, r24
	NwkFrame_t *frame = NULL;
	bool restart = false;
    2704:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	90 e0       	ldi	r25, 0x00	; 0
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    270a:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    270c:	d7 e1       	ldi	r29, 0x17	; 23
	frame->tx.status = status;
    270e:	c0 e1       	ldi	r28, 0x10	; 16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2710:	16 c0       	rjmp	.+44     	; 0x273e <nwkTxAckWaitTimerHandler+0x48>
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
    2712:	fc 01       	movw	r30, r24
    2714:	20 81       	ld	r18, Z
    2716:	26 31       	cpi	r18, 0x16	; 22
    2718:	91 f4       	brne	.+36     	; 0x273e <nwkTxAckWaitTimerHandler+0x48>
			restart = true;

			if (0 == --frame->tx.timeout) {
    271a:	ec 57       	subi	r30, 0x7C	; 124
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	20 81       	ld	r18, Z
    2720:	31 81       	ldd	r19, Z+1	; 0x01
    2722:	21 50       	subi	r18, 0x01	; 1
    2724:	31 09       	sbc	r19, r1
    2726:	31 83       	std	Z+1, r19	; 0x01
    2728:	20 83       	st	Z, r18
    272a:	23 2b       	or	r18, r19
    272c:	39 f4       	brne	.+14     	; 0x273c <nwkTxAckWaitTimerHandler+0x46>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    272e:	fc 01       	movw	r30, r24
    2730:	d0 83       	st	Z, r29
	frame->tx.status = status;
    2732:	ed 57       	subi	r30, 0x7D	; 125
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	c0 83       	st	Z, r28
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state) {
			restart = true;
    2738:	10 2f       	mov	r17, r16
    273a:	01 c0       	rjmp	.+2      	; 0x273e <nwkTxAckWaitTimerHandler+0x48>
    273c:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
	NwkFrame_t *frame = NULL;
	bool restart = false;

	while (NULL != (frame = nwkFrameNext(frame))) {
    273e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <nwkFrameNext>
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	31 f7       	brne	.-52     	; 0x2712 <nwkTxAckWaitTimerHandler+0x1c>
				nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
			}
		}
	}

	if (restart) {
    2746:	11 23       	and	r17, r17
    2748:	19 f0       	breq	.+6      	; 0x2750 <nwkTxAckWaitTimerHandler+0x5a>
		SYS_TimerStart(timer);
    274a:	c7 01       	movw	r24, r14
    274c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <SYS_TimerStart>
	}
}
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	1f 91       	pop	r17
    2756:	0f 91       	pop	r16
    2758:	ff 90       	pop	r15
    275a:	ef 90       	pop	r14
    275c:	08 95       	ret

0000275e <nwkTxInit>:
/*************************************************************************//**
*  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
	nwkTxPhyActiveFrame = NULL;
    275e:	10 92 6c 0c 	sts	0x0C6C, r1	; 0x800c6c <nwkTxPhyActiveFrame+0x1>
    2762:	10 92 6b 0c 	sts	0x0C6B, r1	; 0x800c6b <nwkTxPhyActiveFrame>

	nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    2766:	ee e5       	ldi	r30, 0x5E	; 94
    2768:	fc e0       	ldi	r31, 0x0C	; 12
    276a:	82 e3       	ldi	r24, 0x32	; 50
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a0 e0       	ldi	r26, 0x00	; 0
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	86 83       	std	Z+6, r24	; 0x06
    2774:	97 83       	std	Z+7, r25	; 0x07
    2776:	a0 87       	std	Z+8, r26	; 0x08
    2778:	b1 87       	std	Z+9, r27	; 0x09
	nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    277a:	12 86       	std	Z+10, r1	; 0x0a
	nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    277c:	8b e7       	ldi	r24, 0x7B	; 123
    277e:	93 e1       	ldi	r25, 0x13	; 19
    2780:	94 87       	std	Z+12, r25	; 0x0c
    2782:	83 87       	std	Z+11, r24	; 0x0b

	nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    2784:	e1 e5       	ldi	r30, 0x51	; 81
    2786:	fc e0       	ldi	r31, 0x0C	; 12
    2788:	8a e0       	ldi	r24, 0x0A	; 10
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	a0 e0       	ldi	r26, 0x00	; 0
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	86 83       	std	Z+6, r24	; 0x06
    2792:	97 83       	std	Z+7, r25	; 0x07
    2794:	a0 87       	std	Z+8, r26	; 0x08
    2796:	b1 87       	std	Z+9, r27	; 0x09
	nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    2798:	12 86       	std	Z+10, r1	; 0x0a
	nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    279a:	8d e4       	ldi	r24, 0x4D	; 77
    279c:	93 e1       	ldi	r25, 0x13	; 19
    279e:	94 87       	std	Z+12, r25	; 0x0c
    27a0:	83 87       	std	Z+11, r24	; 0x0b
    27a2:	08 95       	ret

000027a4 <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    27a4:	cf 93       	push	r28
    27a6:	df 93       	push	r29
    27a8:	ec 01       	movw	r28, r24
	NwkFrameHeader_t *header = &frame->header;

	if (frame->tx.control & NWK_TX_CONTROL_ROUTING) {
    27aa:	fc 01       	movw	r30, r24
    27ac:	ea 57       	subi	r30, 0x7A	; 122
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	81 ff       	sbrs	r24, 1
    27b4:	03 c0       	rjmp	.+6      	; 0x27bc <nwkTxFrame+0x18>
		frame->state = NWK_TX_STATE_DELAY;
    27b6:	92 e1       	ldi	r25, 0x12	; 18
    27b8:	98 83       	st	Y, r25
    27ba:	08 c0       	rjmp	.+16     	; 0x27cc <nwkTxFrame+0x28>
	} else {
  #ifdef NWK_ENABLE_SECURITY
		if (header->nwkFcf.security) {
    27bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    27be:	91 ff       	sbrs	r25, 1
    27c0:	03 c0       	rjmp	.+6      	; 0x27c8 <nwkTxFrame+0x24>
			frame->state = NWK_TX_STATE_ENCRYPT;
    27c2:	90 e1       	ldi	r25, 0x10	; 16
    27c4:	98 83       	st	Y, r25
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <nwkTxFrame+0x28>
		} else
  #endif
		frame->state = NWK_TX_STATE_DELAY;
    27c8:	92 e1       	ldi	r25, 0x12	; 18
    27ca:	98 83       	st	Y, r25
	}

	frame->tx.status = NWK_SUCCESS_STATUS;
    27cc:	fe 01       	movw	r30, r28
    27ce:	ed 57       	subi	r30, 0x7D	; 125
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	10 82       	st	Z, r1

	if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID) {
    27d4:	80 ff       	sbrs	r24, 0
    27d6:	05 c0       	rjmp	.+10     	; 0x27e2 <nwkTxFrame+0x3e>
		header->macDstPanId = NWK_BROADCAST_PANID;
    27d8:	2f ef       	ldi	r18, 0xFF	; 255
    27da:	3f ef       	ldi	r19, 0xFF	; 255
    27dc:	3e 83       	std	Y+6, r19	; 0x06
    27de:	2d 83       	std	Y+5, r18	; 0x05
    27e0:	06 c0       	rjmp	.+12     	; 0x27ee <nwkTxFrame+0x4a>
	} else {
		header->macDstPanId = nwkIb.panId;
    27e2:	20 91 70 0c 	lds	r18, 0x0C70	; 0x800c70 <nwkIb+0x2>
    27e6:	30 91 71 0c 	lds	r19, 0x0C71	; 0x800c71 <nwkIb+0x3>
    27ea:	3e 83       	std	Y+6, r19	; 0x06
    27ec:	2d 83       	std	Y+5, r18	; 0x05
	}

#ifdef NWK_ENABLE_ROUTING
	if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) &&
    27ee:	85 70       	andi	r24, 0x05	; 5
    27f0:	19 f4       	brne	.+6      	; 0x27f8 <nwkTxFrame+0x54>
			0 ==
			(frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)) {
		nwkRoutePrepareTx(frame);
    27f2:	ce 01       	movw	r24, r28
    27f4:	17 d8       	rcall	.-4050   	; 0x1824 <nwkRoutePrepareTx>
    27f6:	04 c0       	rjmp	.+8      	; 0x2800 <nwkTxFrame+0x5c>
	} else
#endif
	header->macDstAddr = header->nwkDstAddr;
    27f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27fa:	98 89       	ldd	r25, Y+16	; 0x10
    27fc:	98 87       	std	Y+8, r25	; 0x08
    27fe:	8f 83       	std	Y+7, r24	; 0x07

	header->macSrcAddr = nwkIb.addr;
    2800:	ee e6       	ldi	r30, 0x6E	; 110
    2802:	fc e0       	ldi	r31, 0x0C	; 12
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	9a 87       	std	Y+10, r25	; 0x0a
    280a:	89 87       	std	Y+9, r24	; 0x09
	header->macSeq = ++nwkIb.macSeqNum;
    280c:	85 81       	ldd	r24, Z+5	; 0x05
    280e:	8f 5f       	subi	r24, 0xFF	; 255
    2810:	85 83       	std	Z+5, r24	; 0x05
    2812:	8c 83       	std	Y+4, r24	; 0x04

	if (NWK_BROADCAST_ADDR == header->macDstAddr) {
    2814:	8f 81       	ldd	r24, Y+7	; 0x07
    2816:	98 85       	ldd	r25, Y+8	; 0x08
    2818:	01 96       	adiw	r24, 0x01	; 1
    281a:	69 f4       	brne	.+26     	; 0x2836 <nwkTxFrame+0x92>
		header->macFcf = 0x8841;
    281c:	81 e4       	ldi	r24, 0x41	; 65
    281e:	98 e8       	ldi	r25, 0x88	; 136
    2820:	9b 83       	std	Y+3, r25	; 0x03
    2822:	8a 83       	std	Y+2, r24	; 0x02
		frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2824:	bc d1       	rcall	.+888    	; 0x2b9e <rand>
    2826:	cc 57       	subi	r28, 0x7C	; 124
    2828:	df 4f       	sbci	r29, 0xFF	; 255
    282a:	87 70       	andi	r24, 0x07	; 7
    282c:	99 27       	eor	r25, r25
    282e:	01 96       	adiw	r24, 0x01	; 1
    2830:	99 83       	std	Y+1, r25	; 0x01
    2832:	88 83       	st	Y, r24
    2834:	08 c0       	rjmp	.+16     	; 0x2846 <nwkTxFrame+0xa2>
	} else {
		header->macFcf = 0x8861;
    2836:	81 e6       	ldi	r24, 0x61	; 97
    2838:	98 e8       	ldi	r25, 0x88	; 136
    283a:	9b 83       	std	Y+3, r25	; 0x03
    283c:	8a 83       	std	Y+2, r24	; 0x02
		frame->tx.timeout = 0;
    283e:	cc 57       	subi	r28, 0x7C	; 124
    2840:	df 4f       	sbci	r29, 0xFF	; 255
    2842:	19 82       	std	Y+1, r1	; 0x01
    2844:	18 82       	st	Y, r1
	}
}
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	08 95       	ret

0000284c <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	8c 01       	movw	r16, r24
	NwkFrame_t *newFrame;

	if (NULL == (newFrame = nwkFrameAlloc())) {
    2856:	0e 94 9f 0a 	call	0x153e	; 0x153e <nwkFrameAlloc>
    285a:	ec 01       	movw	r28, r24
    285c:	89 2b       	or	r24, r25
    285e:	a9 f1       	breq	.+106    	; 0x28ca <nwkTxBroadcastFrame+0x7e>
		return;
	}

	newFrame->state = NWK_TX_STATE_DELAY;
    2860:	82 e1       	ldi	r24, 0x12	; 18
    2862:	88 83       	st	Y, r24
	newFrame->size = frame->size;
    2864:	f8 01       	movw	r30, r16
    2866:	81 81       	ldd	r24, Z+1	; 0x01
    2868:	89 83       	std	Y+1, r24	; 0x01
	newFrame->tx.status = NWK_SUCCESS_STATUS;
    286a:	fe 01       	movw	r30, r28
    286c:	ed 57       	subi	r30, 0x7D	; 125
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	10 82       	st	Z, r1
	newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    2872:	95 d1       	rcall	.+810    	; 0x2b9e <rand>
    2874:	fe 01       	movw	r30, r28
    2876:	ec 57       	subi	r30, 0x7C	; 124
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	87 70       	andi	r24, 0x07	; 7
    287c:	99 27       	eor	r25, r25
    287e:	01 96       	adiw	r24, 0x01	; 1
    2880:	91 83       	std	Z+1, r25	; 0x01
    2882:	80 83       	st	Z, r24
	newFrame->tx.confirm = NULL;
    2884:	33 96       	adiw	r30, 0x03	; 3
    2886:	11 82       	std	Z+1, r1	; 0x01
    2888:	10 82       	st	Z, r1
	memcpy(newFrame->data, frame->data, frame->size);
    288a:	f8 01       	movw	r30, r16
    288c:	41 81       	ldd	r20, Z+1	; 0x01
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	b8 01       	movw	r22, r16
    2892:	6e 5f       	subi	r22, 0xFE	; 254
    2894:	7f 4f       	sbci	r23, 0xFF	; 255
    2896:	ce 01       	movw	r24, r28
    2898:	02 96       	adiw	r24, 0x02	; 2
    289a:	8f d1       	rcall	.+798    	; 0x2bba <memcpy>

	newFrame->header.macFcf = 0x8841;
    289c:	81 e4       	ldi	r24, 0x41	; 65
    289e:	98 e8       	ldi	r25, 0x88	; 136
    28a0:	9b 83       	std	Y+3, r25	; 0x03
    28a2:	8a 83       	std	Y+2, r24	; 0x02
	newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    28a4:	8f ef       	ldi	r24, 0xFF	; 255
    28a6:	9f ef       	ldi	r25, 0xFF	; 255
    28a8:	98 87       	std	Y+8, r25	; 0x08
    28aa:	8f 83       	std	Y+7, r24	; 0x07
	newFrame->header.macDstPanId = frame->header.macDstPanId;
    28ac:	f8 01       	movw	r30, r16
    28ae:	85 81       	ldd	r24, Z+5	; 0x05
    28b0:	96 81       	ldd	r25, Z+6	; 0x06
    28b2:	9e 83       	std	Y+6, r25	; 0x06
    28b4:	8d 83       	std	Y+5, r24	; 0x05
	newFrame->header.macSrcAddr = nwkIb.addr;
    28b6:	ee e6       	ldi	r30, 0x6E	; 110
    28b8:	fc e0       	ldi	r31, 0x0C	; 12
    28ba:	80 81       	ld	r24, Z
    28bc:	91 81       	ldd	r25, Z+1	; 0x01
    28be:	9a 87       	std	Y+10, r25	; 0x0a
    28c0:	89 87       	std	Y+9, r24	; 0x09
	newFrame->header.macSeq = ++nwkIb.macSeqNum;
    28c2:	85 81       	ldd	r24, Z+5	; 0x05
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	85 83       	std	Z+5, r24	; 0x05
    28c8:	8c 83       	std	Y+4, r24	; 0x04
}
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	1f 91       	pop	r17
    28d0:	0f 91       	pop	r16
    28d2:	08 95       	ret

000028d4 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
    28d8:	fc 01       	movw	r30, r24
    28da:	21 85       	ldd	r18, Z+9	; 0x09
    28dc:	23 30       	cpi	r18, 0x03	; 3
    28de:	e1 f4       	brne	.+56     	; 0x2918 <nwkTxAckReceived+0x44>
    28e0:	10 c0       	rjmp	.+32     	; 0x2902 <nwkTxAckReceived+0x2e>
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
		if (NWK_TX_STATE_WAIT_ACK == frame->state &&
    28e2:	fc 01       	movw	r30, r24
    28e4:	20 81       	ld	r18, Z
    28e6:	26 31       	cpi	r18, 0x16	; 22
    28e8:	89 f4       	brne	.+34     	; 0x290c <nwkTxAckReceived+0x38>
    28ea:	34 85       	ldd	r19, Z+12	; 0x0c
    28ec:	29 81       	ldd	r18, Y+1	; 0x01
    28ee:	32 13       	cpse	r19, r18
    28f0:	0d c0       	rjmp	.+26     	; 0x290c <nwkTxAckReceived+0x38>
				frame->header.nwkSeq == command->seq) {
			frame->state = NWK_TX_STATE_CONFIRM;
    28f2:	27 e1       	ldi	r18, 0x17	; 23
    28f4:	20 83       	st	Z, r18
			frame->tx.control = command->control;
    28f6:	2a 81       	ldd	r18, Y+2	; 0x02
    28f8:	ea 57       	subi	r30, 0x7A	; 122
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	20 83       	st	Z, r18
			return true;
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	0c c0       	rjmp	.+24     	; 0x291a <nwkTxAckReceived+0x46>
    2902:	fc 01       	movw	r30, r24

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    2904:	c7 81       	ldd	r28, Z+7	; 0x07
    2906:	d0 85       	ldd	r29, Z+8	; 0x08
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
	}

	while (NULL != (frame = nwkFrameNext(frame))) {
    290c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <nwkFrameNext>
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	39 f7       	brne	.-50     	; 0x28e2 <nwkTxAckReceived+0xe>
			frame->tx.control = command->control;
			return true;
		}
	}

	return false;
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	01 c0       	rjmp	.+2      	; 0x291a <nwkTxAckReceived+0x46>
{
	NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
	NwkFrame_t *frame = NULL;

	if (sizeof(NwkCommandAck_t) != ind->size) {
		return false;
    2918:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}

	return false;
}
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	08 95       	ret

00002920 <nwkTxConfirm>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
	frame->state = NWK_TX_STATE_CONFIRM;
    2920:	27 e1       	ldi	r18, 0x17	; 23
    2922:	fc 01       	movw	r30, r24
    2924:	20 83       	st	Z, r18
	frame->tx.status = status;
    2926:	ed 57       	subi	r30, 0x7D	; 125
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	60 83       	st	Z, r22
    292c:	08 95       	ret

0000292e <nwkTxEncryptConf>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxEncryptConf(NwkFrame_t *frame)
{
	frame->state = NWK_TX_STATE_DELAY;
    292e:	22 e1       	ldi	r18, 0x12	; 18
    2930:	fc 01       	movw	r30, r24
    2932:	20 83       	st	Z, r18
    2934:	08 95       	ret

00002936 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2936:	e0 91 6b 0c 	lds	r30, 0x0C6B	; 0x800c6b <nwkTxPhyActiveFrame>
    293a:	f0 91 6c 0c 	lds	r31, 0x0C6C	; 0x800c6c <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
    293e:	81 30       	cpi	r24, 0x01	; 1
    2940:	21 f0       	breq	.+8      	; 0x294a <PHY_DataConf+0x14>
    2942:	48 f0       	brcs	.+18     	; 0x2956 <PHY_DataConf+0x20>
    2944:	82 30       	cpi	r24, 0x02	; 2
    2946:	19 f0       	breq	.+6      	; 0x294e <PHY_DataConf+0x18>
    2948:	04 c0       	rjmp	.+8      	; 0x2952 <PHY_DataConf+0x1c>
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;

	case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
		return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    294a:	80 e2       	ldi	r24, 0x20	; 32
    294c:	05 c0       	rjmp	.+10     	; 0x2958 <PHY_DataConf+0x22>

	case PHY_STATUS_NO_ACK:
		return NWK_PHY_NO_ACK_STATUS;
    294e:	81 e2       	ldi	r24, 0x21	; 33
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <PHY_DataConf+0x22>

	default:
		return NWK_ERROR_STATUS;
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <PHY_DataConf+0x22>
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
	switch (status) {
	case PHY_STATUS_SUCCESS:
		return NWK_SUCCESS_STATUS;
    2956:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
	nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    2958:	df 01       	movw	r26, r30
    295a:	ad 57       	subi	r26, 0x7D	; 125
    295c:	bf 4f       	sbci	r27, 0xFF	; 255
    295e:	8c 93       	st	X, r24
	nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    2960:	85 e1       	ldi	r24, 0x15	; 21
    2962:	80 83       	st	Z, r24
	nwkTxPhyActiveFrame = NULL;
    2964:	10 92 6c 0c 	sts	0x0C6C, r1	; 0x800c6c <nwkTxPhyActiveFrame+0x1>
    2968:	10 92 6b 0c 	sts	0x0C6B, r1	; 0x800c6b <nwkTxPhyActiveFrame>
	nwkIb.lock--;
    296c:	ee e6       	ldi	r30, 0x6E	; 110
    296e:	fc e0       	ldi	r31, 0x0C	; 12
    2970:	86 a9       	ldd	r24, Z+54	; 0x36
    2972:	97 a9       	ldd	r25, Z+55	; 0x37
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	97 ab       	std	Z+55, r25	; 0x37
    2978:	86 ab       	std	Z+54, r24	; 0x36
    297a:	08 95       	ret

0000297c <nwkTxTaskHandler>:

/*************************************************************************//**
*  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    297c:	9f 92       	push	r9
    297e:	af 92       	push	r10
    2980:	bf 92       	push	r11
    2982:	cf 92       	push	r12
    2984:	df 92       	push	r13
    2986:	ef 92       	push	r14
    2988:	ff 92       	push	r15
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
	NwkFrame_t *frame = NULL;
    2992:	c0 e0       	ldi	r28, 0x00	; 0
    2994:	d0 e0       	ldi	r29, 0x00	; 0

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
				nwkTxPhyActiveFrame = frame;
				frame->state = NWK_TX_STATE_WAIT_CONF;
    2996:	0f 2e       	mov	r0, r31
    2998:	f4 e1       	ldi	r31, 0x14	; 20
    299a:	af 2e       	mov	r10, r31
    299c:	f0 2d       	mov	r31, r0
				PHY_DataReq(&(frame->size));
				nwkIb.lock++;
    299e:	0e e6       	ldi	r16, 0x6E	; 110
    29a0:	1c e0       	ldi	r17, 0x0C	; 12
					SYS_TimerStart(&nwkTxAckWaitTimer);
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    29a2:	0f 2e       	mov	r0, r31
    29a4:	f7 e1       	ldi	r31, 0x17	; 23
    29a6:	df 2e       	mov	r13, r31
    29a8:	f0 2d       	mov	r31, r0
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    29aa:	0f 2e       	mov	r0, r31
    29ac:	f6 e1       	ldi	r31, 0x16	; 22
    29ae:	9f 2e       	mov	r9, r31
    29b0:	f0 2d       	mov	r31, r0
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    29b2:	0f 2e       	mov	r0, r31
    29b4:	f5 e1       	ldi	r31, 0x15	; 21
    29b6:	ef 2e       	mov	r14, r31
    29b8:	f1 2c       	mov	r15, r1
    29ba:	f0 2d       	mov	r31, r0
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
				SYS_TimerStart(&nwkTxDelayTimer);
			} else {
				frame->state = NWK_TX_STATE_SEND;
    29bc:	0f 2e       	mov	r0, r31
    29be:	f3 e1       	ldi	r31, 0x13	; 19
    29c0:	cf 2e       	mov	r12, r31
    29c2:	f0 2d       	mov	r31, r0
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    29c4:	0f 2e       	mov	r0, r31
    29c6:	f1 e1       	ldi	r31, 0x11	; 17
    29c8:	bf 2e       	mov	r11, r31
    29ca:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    29cc:	6a c0       	rjmp	.+212    	; 0x2aa2 <nwkTxTaskHandler+0x126>
		switch (frame->state) {
    29ce:	88 81       	ld	r24, Y
    29d0:	83 31       	cpi	r24, 0x13	; 19
    29d2:	f9 f0       	breq	.+62     	; 0x2a12 <nwkTxTaskHandler+0x96>
    29d4:	28 f4       	brcc	.+10     	; 0x29e0 <nwkTxTaskHandler+0x64>
    29d6:	80 31       	cpi	r24, 0x10	; 16
    29d8:	49 f0       	breq	.+18     	; 0x29ec <nwkTxTaskHandler+0x70>
    29da:	82 31       	cpi	r24, 0x12	; 18
    29dc:	59 f0       	breq	.+22     	; 0x29f4 <nwkTxTaskHandler+0x78>
    29de:	61 c0       	rjmp	.+194    	; 0x2aa2 <nwkTxTaskHandler+0x126>
    29e0:	85 31       	cpi	r24, 0x15	; 21
    29e2:	71 f1       	breq	.+92     	; 0x2a40 <nwkTxTaskHandler+0xc4>
    29e4:	87 31       	cpi	r24, 0x17	; 23
    29e6:	09 f4       	brne	.+2      	; 0x29ea <nwkTxTaskHandler+0x6e>
    29e8:	4b c0       	rjmp	.+150    	; 0x2a80 <nwkTxTaskHandler+0x104>
    29ea:	5b c0       	rjmp	.+182    	; 0x2aa2 <nwkTxTaskHandler+0x126>
#ifdef NWK_ENABLE_SECURITY
		case NWK_TX_STATE_ENCRYPT:
		{
			nwkSecurityProcess(frame, true);
    29ec:	61 e0       	ldi	r22, 0x01	; 1
    29ee:	ce 01       	movw	r24, r28
    29f0:	13 dd       	rcall	.-1498   	; 0x2418 <nwkSecurityProcess>
		}
		break;
    29f2:	57 c0       	rjmp	.+174    	; 0x2aa2 <nwkTxTaskHandler+0x126>
#endif

		case NWK_TX_STATE_DELAY:
		{
			if (frame->tx.timeout > 0) {
    29f4:	fe 01       	movw	r30, r28
    29f6:	ec 57       	subi	r30, 0x7C	; 124
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 81       	ld	r24, Z
    29fc:	91 81       	ldd	r25, Z+1	; 0x01
    29fe:	89 2b       	or	r24, r25
    2a00:	31 f0       	breq	.+12     	; 0x2a0e <nwkTxTaskHandler+0x92>
				frame->state = NWK_TX_STATE_WAIT_DELAY;
    2a02:	b8 82       	st	Y, r11
				SYS_TimerStart(&nwkTxDelayTimer);
    2a04:	81 e5       	ldi	r24, 0x51	; 81
    2a06:	9c e0       	ldi	r25, 0x0C	; 12
    2a08:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <SYS_TimerStart>
    2a0c:	4a c0       	rjmp	.+148    	; 0x2aa2 <nwkTxTaskHandler+0x126>
			} else {
				frame->state = NWK_TX_STATE_SEND;
    2a0e:	c8 82       	st	Y, r12
    2a10:	48 c0       	rjmp	.+144    	; 0x2aa2 <nwkTxTaskHandler+0x126>
		}
		break;

		case NWK_TX_STATE_SEND:
		{
			if (NULL == nwkTxPhyActiveFrame) {
    2a12:	80 91 6b 0c 	lds	r24, 0x0C6B	; 0x800c6b <nwkTxPhyActiveFrame>
    2a16:	90 91 6c 0c 	lds	r25, 0x0C6C	; 0x800c6c <nwkTxPhyActiveFrame+0x1>
    2a1a:	89 2b       	or	r24, r25
    2a1c:	09 f0       	breq	.+2      	; 0x2a20 <nwkTxTaskHandler+0xa4>
    2a1e:	41 c0       	rjmp	.+130    	; 0x2aa2 <nwkTxTaskHandler+0x126>
				nwkTxPhyActiveFrame = frame;
    2a20:	d0 93 6c 0c 	sts	0x0C6C, r29	; 0x800c6c <nwkTxPhyActiveFrame+0x1>
    2a24:	c0 93 6b 0c 	sts	0x0C6B, r28	; 0x800c6b <nwkTxPhyActiveFrame>
				frame->state = NWK_TX_STATE_WAIT_CONF;
    2a28:	fe 01       	movw	r30, r28
    2a2a:	a1 92       	st	Z+, r10
    2a2c:	cf 01       	movw	r24, r30
				PHY_DataReq(&(frame->size));
    2a2e:	0e 94 b3 08 	call	0x1166	; 0x1166 <PHY_DataReq>
				nwkIb.lock++;
    2a32:	f8 01       	movw	r30, r16
    2a34:	86 a9       	ldd	r24, Z+54	; 0x36
    2a36:	97 a9       	ldd	r25, Z+55	; 0x37
    2a38:	01 96       	adiw	r24, 0x01	; 1
    2a3a:	97 ab       	std	Z+55, r25	; 0x37
    2a3c:	86 ab       	std	Z+54, r24	; 0x36
    2a3e:	31 c0       	rjmp	.+98     	; 0x2aa2 <nwkTxTaskHandler+0x126>
		case NWK_TX_STATE_WAIT_CONF:
			break;

		case NWK_TX_STATE_SENT:
		{
			if (NWK_SUCCESS_STATUS == frame->tx.status) {
    2a40:	fe 01       	movw	r30, r28
    2a42:	ed 57       	subi	r30, 0x7D	; 125
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 81       	ld	r24, Z
    2a48:	81 11       	cpse	r24, r1
    2a4a:	18 c0       	rjmp	.+48     	; 0x2a7c <nwkTxTaskHandler+0x100>
				if (frame->header.nwkSrcAddr == nwkIb.addr &&
    2a4c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a4e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a50:	f8 01       	movw	r30, r16
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	28 17       	cp	r18, r24
    2a58:	39 07       	cpc	r19, r25
    2a5a:	71 f4       	brne	.+28     	; 0x2a78 <nwkTxTaskHandler+0xfc>
    2a5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a5e:	80 ff       	sbrs	r24, 0
    2a60:	0b c0       	rjmp	.+22     	; 0x2a78 <nwkTxTaskHandler+0xfc>
						frame->header.nwkFcf.
						ackRequest) {
					frame->state = NWK_TX_STATE_WAIT_ACK;
    2a62:	98 82       	st	Y, r9
					frame->tx.timeout = NWK_ACK_WAIT_TIME /
    2a64:	fe 01       	movw	r30, r28
    2a66:	ec 57       	subi	r30, 0x7C	; 124
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	f1 82       	std	Z+1, r15	; 0x01
    2a6c:	e0 82       	st	Z, r14
							NWK_TX_ACK_WAIT_TIMER_INTERVAL
							+ 1;
					SYS_TimerStart(&nwkTxAckWaitTimer);
    2a6e:	8e e5       	ldi	r24, 0x5E	; 94
    2a70:	9c e0       	ldi	r25, 0x0C	; 12
    2a72:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <SYS_TimerStart>
    2a76:	15 c0       	rjmp	.+42     	; 0x2aa2 <nwkTxTaskHandler+0x126>
				} else {
					frame->state = NWK_TX_STATE_CONFIRM;
    2a78:	d8 82       	st	Y, r13
    2a7a:	13 c0       	rjmp	.+38     	; 0x2aa2 <nwkTxTaskHandler+0x126>
				}
			} else {
				frame->state = NWK_TX_STATE_CONFIRM;
    2a7c:	d8 82       	st	Y, r13
    2a7e:	11 c0       	rjmp	.+34     	; 0x2aa2 <nwkTxTaskHandler+0x126>
			break;

		case NWK_TX_STATE_CONFIRM:
		{
#ifdef NWK_ENABLE_ROUTING
			nwkRouteFrameSent(frame);
    2a80:	ce 01       	movw	r24, r28
    2a82:	0e 94 cb 0b 	call	0x1796	; 0x1796 <nwkRouteFrameSent>
#endif
			if (NULL == frame->tx.confirm) {
    2a86:	fe 01       	movw	r30, r28
    2a88:	e9 57       	subi	r30, 0x79	; 121
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	01 90       	ld	r0, Z+
    2a8e:	f0 81       	ld	r31, Z
    2a90:	e0 2d       	mov	r30, r0
    2a92:	30 97       	sbiw	r30, 0x00	; 0
    2a94:	21 f4       	brne	.+8      	; 0x2a9e <nwkTxTaskHandler+0x122>
				nwkFrameFree(frame);
    2a96:	ce 01       	movw	r24, r28
    2a98:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <nwkFrameFree>
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <nwkTxTaskHandler+0x126>
			} else {
				frame->tx.confirm(frame);
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	09 95       	icall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
	NwkFrame_t *frame = NULL;

	while (NULL != (frame = nwkFrameNext(frame))) {
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <nwkFrameNext>
    2aa8:	ec 01       	movw	r28, r24
    2aaa:	89 2b       	or	r24, r25
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <nwkTxTaskHandler+0x134>
    2aae:	8f cf       	rjmp	.-226    	; 0x29ce <nwkTxTaskHandler+0x52>

		default:
			break;
		}
	}
}
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	1f 91       	pop	r17
    2ab6:	0f 91       	pop	r16
    2ab8:	ff 90       	pop	r15
    2aba:	ef 90       	pop	r14
    2abc:	df 90       	pop	r13
    2abe:	cf 90       	pop	r12
    2ac0:	bf 90       	pop	r11
    2ac2:	af 90       	pop	r10
    2ac4:	9f 90       	pop	r9
    2ac6:	08 95       	ret

00002ac8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    2ac8:	08 95       	ret

00002aca <__udivmodhi4>:
    2aca:	aa 1b       	sub	r26, r26
    2acc:	bb 1b       	sub	r27, r27
    2ace:	51 e1       	ldi	r21, 0x11	; 17
    2ad0:	07 c0       	rjmp	.+14     	; 0x2ae0 <__udivmodhi4_ep>

00002ad2 <__udivmodhi4_loop>:
    2ad2:	aa 1f       	adc	r26, r26
    2ad4:	bb 1f       	adc	r27, r27
    2ad6:	a6 17       	cp	r26, r22
    2ad8:	b7 07       	cpc	r27, r23
    2ada:	10 f0       	brcs	.+4      	; 0x2ae0 <__udivmodhi4_ep>
    2adc:	a6 1b       	sub	r26, r22
    2ade:	b7 0b       	sbc	r27, r23

00002ae0 <__udivmodhi4_ep>:
    2ae0:	88 1f       	adc	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	5a 95       	dec	r21
    2ae6:	a9 f7       	brne	.-22     	; 0x2ad2 <__udivmodhi4_loop>
    2ae8:	80 95       	com	r24
    2aea:	90 95       	com	r25
    2aec:	bc 01       	movw	r22, r24
    2aee:	cd 01       	movw	r24, r26
    2af0:	08 95       	ret

00002af2 <__umulhisi3>:
    2af2:	a2 9f       	mul	r26, r18
    2af4:	b0 01       	movw	r22, r0
    2af6:	b3 9f       	mul	r27, r19
    2af8:	c0 01       	movw	r24, r0
    2afa:	a3 9f       	mul	r26, r19
    2afc:	70 0d       	add	r23, r0
    2afe:	81 1d       	adc	r24, r1
    2b00:	11 24       	eor	r1, r1
    2b02:	91 1d       	adc	r25, r1
    2b04:	b2 9f       	mul	r27, r18
    2b06:	70 0d       	add	r23, r0
    2b08:	81 1d       	adc	r24, r1
    2b0a:	11 24       	eor	r1, r1
    2b0c:	91 1d       	adc	r25, r1
    2b0e:	08 95       	ret

00002b10 <do_rand>:
    2b10:	8f 92       	push	r8
    2b12:	9f 92       	push	r9
    2b14:	af 92       	push	r10
    2b16:	bf 92       	push	r11
    2b18:	cf 92       	push	r12
    2b1a:	df 92       	push	r13
    2b1c:	ef 92       	push	r14
    2b1e:	ff 92       	push	r15
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	ec 01       	movw	r28, r24
    2b26:	68 81       	ld	r22, Y
    2b28:	79 81       	ldd	r23, Y+1	; 0x01
    2b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2e:	61 15       	cp	r22, r1
    2b30:	71 05       	cpc	r23, r1
    2b32:	81 05       	cpc	r24, r1
    2b34:	91 05       	cpc	r25, r1
    2b36:	21 f4       	brne	.+8      	; 0x2b40 <do_rand+0x30>
    2b38:	64 e2       	ldi	r22, 0x24	; 36
    2b3a:	79 ed       	ldi	r23, 0xD9	; 217
    2b3c:	8b e5       	ldi	r24, 0x5B	; 91
    2b3e:	97 e0       	ldi	r25, 0x07	; 7
    2b40:	2d e1       	ldi	r18, 0x1D	; 29
    2b42:	33 ef       	ldi	r19, 0xF3	; 243
    2b44:	41 e0       	ldi	r20, 0x01	; 1
    2b46:	50 e0       	ldi	r21, 0x00	; 0
    2b48:	41 d0       	rcall	.+130    	; 0x2bcc <__divmodsi4>
    2b4a:	49 01       	movw	r8, r18
    2b4c:	5a 01       	movw	r10, r20
    2b4e:	9b 01       	movw	r18, r22
    2b50:	ac 01       	movw	r20, r24
    2b52:	a7 ea       	ldi	r26, 0xA7	; 167
    2b54:	b1 e4       	ldi	r27, 0x41	; 65
    2b56:	56 d0       	rcall	.+172    	; 0x2c04 <__muluhisi3>
    2b58:	6b 01       	movw	r12, r22
    2b5a:	7c 01       	movw	r14, r24
    2b5c:	ac ee       	ldi	r26, 0xEC	; 236
    2b5e:	b4 ef       	ldi	r27, 0xF4	; 244
    2b60:	a5 01       	movw	r20, r10
    2b62:	94 01       	movw	r18, r8
    2b64:	5b d0       	rcall	.+182    	; 0x2c1c <__mulohisi3>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	8c 0d       	add	r24, r12
    2b6c:	9d 1d       	adc	r25, r13
    2b6e:	ae 1d       	adc	r26, r14
    2b70:	bf 1d       	adc	r27, r15
    2b72:	b7 ff       	sbrs	r27, 7
    2b74:	03 c0       	rjmp	.+6      	; 0x2b7c <do_rand+0x6c>
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	a1 09       	sbc	r26, r1
    2b7a:	b0 48       	sbci	r27, 0x80	; 128
    2b7c:	88 83       	st	Y, r24
    2b7e:	99 83       	std	Y+1, r25	; 0x01
    2b80:	aa 83       	std	Y+2, r26	; 0x02
    2b82:	bb 83       	std	Y+3, r27	; 0x03
    2b84:	9f 77       	andi	r25, 0x7F	; 127
    2b86:	df 91       	pop	r29
    2b88:	cf 91       	pop	r28
    2b8a:	ff 90       	pop	r15
    2b8c:	ef 90       	pop	r14
    2b8e:	df 90       	pop	r13
    2b90:	cf 90       	pop	r12
    2b92:	bf 90       	pop	r11
    2b94:	af 90       	pop	r10
    2b96:	9f 90       	pop	r9
    2b98:	8f 90       	pop	r8
    2b9a:	08 95       	ret

00002b9c <rand_r>:
    2b9c:	b9 cf       	rjmp	.-142    	; 0x2b10 <do_rand>

00002b9e <rand>:
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	92 e0       	ldi	r25, 0x02	; 2
    2ba2:	b6 cf       	rjmp	.-148    	; 0x2b10 <do_rand>

00002ba4 <srand>:
    2ba4:	a0 e0       	ldi	r26, 0x00	; 0
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    2bac:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    2bb0:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    2bb4:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    2bb8:	08 95       	ret

00002bba <memcpy>:
    2bba:	fb 01       	movw	r30, r22
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <memcpy+0xa>
    2bc0:	01 90       	ld	r0, Z+
    2bc2:	0d 92       	st	X+, r0
    2bc4:	41 50       	subi	r20, 0x01	; 1
    2bc6:	50 40       	sbci	r21, 0x00	; 0
    2bc8:	d8 f7       	brcc	.-10     	; 0x2bc0 <memcpy+0x6>
    2bca:	08 95       	ret

00002bcc <__divmodsi4>:
    2bcc:	05 2e       	mov	r0, r21
    2bce:	97 fb       	bst	r25, 7
    2bd0:	16 f4       	brtc	.+4      	; 0x2bd6 <__divmodsi4+0xa>
    2bd2:	00 94       	com	r0
    2bd4:	0f d0       	rcall	.+30     	; 0x2bf4 <__negsi2>
    2bd6:	57 fd       	sbrc	r21, 7
    2bd8:	05 d0       	rcall	.+10     	; 0x2be4 <__divmodsi4_neg2>
    2bda:	24 d0       	rcall	.+72     	; 0x2c24 <__udivmodsi4>
    2bdc:	07 fc       	sbrc	r0, 7
    2bde:	02 d0       	rcall	.+4      	; 0x2be4 <__divmodsi4_neg2>
    2be0:	46 f4       	brtc	.+16     	; 0x2bf2 <__divmodsi4_exit>
    2be2:	08 c0       	rjmp	.+16     	; 0x2bf4 <__negsi2>

00002be4 <__divmodsi4_neg2>:
    2be4:	50 95       	com	r21
    2be6:	40 95       	com	r20
    2be8:	30 95       	com	r19
    2bea:	21 95       	neg	r18
    2bec:	3f 4f       	sbci	r19, 0xFF	; 255
    2bee:	4f 4f       	sbci	r20, 0xFF	; 255
    2bf0:	5f 4f       	sbci	r21, 0xFF	; 255

00002bf2 <__divmodsi4_exit>:
    2bf2:	08 95       	ret

00002bf4 <__negsi2>:
    2bf4:	90 95       	com	r25
    2bf6:	80 95       	com	r24
    2bf8:	70 95       	com	r23
    2bfa:	61 95       	neg	r22
    2bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfe:	8f 4f       	sbci	r24, 0xFF	; 255
    2c00:	9f 4f       	sbci	r25, 0xFF	; 255
    2c02:	08 95       	ret

00002c04 <__muluhisi3>:
    2c04:	76 df       	rcall	.-276    	; 0x2af2 <__umulhisi3>
    2c06:	a5 9f       	mul	r26, r21
    2c08:	90 0d       	add	r25, r0
    2c0a:	b4 9f       	mul	r27, r20
    2c0c:	90 0d       	add	r25, r0
    2c0e:	a4 9f       	mul	r26, r20
    2c10:	80 0d       	add	r24, r0
    2c12:	91 1d       	adc	r25, r1
    2c14:	11 24       	eor	r1, r1
    2c16:	08 95       	ret

00002c18 <__mulshisi3>:
    2c18:	b7 ff       	sbrs	r27, 7
    2c1a:	f4 cf       	rjmp	.-24     	; 0x2c04 <__muluhisi3>

00002c1c <__mulohisi3>:
    2c1c:	f3 df       	rcall	.-26     	; 0x2c04 <__muluhisi3>
    2c1e:	82 1b       	sub	r24, r18
    2c20:	93 0b       	sbc	r25, r19
    2c22:	08 95       	ret

00002c24 <__udivmodsi4>:
    2c24:	a1 e2       	ldi	r26, 0x21	; 33
    2c26:	1a 2e       	mov	r1, r26
    2c28:	aa 1b       	sub	r26, r26
    2c2a:	bb 1b       	sub	r27, r27
    2c2c:	fd 01       	movw	r30, r26
    2c2e:	0d c0       	rjmp	.+26     	; 0x2c4a <__udivmodsi4_ep>

00002c30 <__udivmodsi4_loop>:
    2c30:	aa 1f       	adc	r26, r26
    2c32:	bb 1f       	adc	r27, r27
    2c34:	ee 1f       	adc	r30, r30
    2c36:	ff 1f       	adc	r31, r31
    2c38:	a2 17       	cp	r26, r18
    2c3a:	b3 07       	cpc	r27, r19
    2c3c:	e4 07       	cpc	r30, r20
    2c3e:	f5 07       	cpc	r31, r21
    2c40:	20 f0       	brcs	.+8      	; 0x2c4a <__udivmodsi4_ep>
    2c42:	a2 1b       	sub	r26, r18
    2c44:	b3 0b       	sbc	r27, r19
    2c46:	e4 0b       	sbc	r30, r20
    2c48:	f5 0b       	sbc	r31, r21

00002c4a <__udivmodsi4_ep>:
    2c4a:	66 1f       	adc	r22, r22
    2c4c:	77 1f       	adc	r23, r23
    2c4e:	88 1f       	adc	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	1a 94       	dec	r1
    2c54:	69 f7       	brne	.-38     	; 0x2c30 <__udivmodsi4_loop>
    2c56:	60 95       	com	r22
    2c58:	70 95       	com	r23
    2c5a:	80 95       	com	r24
    2c5c:	90 95       	com	r25
    2c5e:	9b 01       	movw	r18, r22
    2c60:	ac 01       	movw	r20, r24
    2c62:	bd 01       	movw	r22, r26
    2c64:	cf 01       	movw	r24, r30
    2c66:	08 95       	ret

00002c68 <_exit>:
    2c68:	f8 94       	cli

00002c6a <__stop_program>:
    2c6a:	ff cf       	rjmp	.-2      	; 0x2c6a <__stop_program>
